
GHP_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004404  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004608  08004608  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004608  08004608  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004608  08004608  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004608  08004608  00014608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000108  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000178  20000178  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad2e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000179e  00000000  00000000  0002adce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  0002c570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000748  00000000  00000000  0002cd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200b6  00000000  00000000  0002d498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b4fe  00000000  00000000  0004d54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0a56  00000000  00000000  00058a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001194a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002314  00000000  00000000  001194f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800457c 	.word	0x0800457c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800457c 	.word	0x0800457c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 faf9 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f83d 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f935 	bl	80004fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 f903 	bl	800049c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000296:	f000 f891 	bl	80003bc <MX_ADC1_Init>
  while (1)
  {
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  //HAL_Delay(3600);

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a4:	f001 fd40 	bl	8001d28 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 80002a8:	4814      	ldr	r0, [pc, #80]	; (80002fc <main+0x7c>)
 80002aa:	f000 fd03 	bl	8000cb4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002ae:	f04f 31ff 	mov.w	r1, #4294967295
 80002b2:	4812      	ldr	r0, [pc, #72]	; (80002fc <main+0x7c>)
 80002b4:	f000 fdb4 	bl	8000e20 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80002b8:	4810      	ldr	r0, [pc, #64]	; (80002fc <main+0x7c>)
 80002ba:	f000 fe7f 	bl	8000fbc <HAL_ADC_GetValue>
 80002be:	4603      	mov	r3, r0
 80002c0:	81fb      	strh	r3, [r7, #14]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f001 fd2c 	bl	8001d28 <HAL_GPIO_WritePin>

	  sprintf(msg, "%hu\r\n", raw);
 80002d0:	89fa      	ldrh	r2, [r7, #14]
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	490a      	ldr	r1, [pc, #40]	; (8000300 <main+0x80>)
 80002d6:	4618      	mov	r0, r3
 80002d8:	f003 fce2 	bl	8003ca0 <siprintf>

	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff76 	bl	80001d0 <strlen>
 80002e4:	4603      	mov	r3, r0
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	1d39      	adds	r1, r7, #4
 80002ea:	f04f 33ff 	mov.w	r3, #4294967295
 80002ee:	4805      	ldr	r0, [pc, #20]	; (8000304 <main+0x84>)
 80002f0:	f003 f92a 	bl	8003548 <HAL_UART_Transmit>
	  HAL_Delay(1);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f000 fb27 	bl	8000948 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80002fa:	e7ce      	b.n	800029a <main+0x1a>
 80002fc:	2000008c 	.word	0x2000008c
 8000300:	08004594 	.word	0x08004594
 8000304:	200000dc 	.word	0x200000dc

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b096      	sub	sp, #88	; 0x58
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000312:	2228      	movs	r2, #40	; 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f003 fcba 	bl	8003c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 031c 	add.w	r3, r7, #28
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	463b      	mov	r3, r7
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]
 800033a:	615a      	str	r2, [r3, #20]
 800033c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033e:	2302      	movs	r3, #2
 8000340:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000342:	2301      	movs	r3, #1
 8000344:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000346:	2310      	movs	r3, #16
 8000348:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034a:	2302      	movs	r3, #2
 800034c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800034e:	2300      	movs	r3, #0
 8000350:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000352:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000356:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000358:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fcfb 	bl	8001d58 <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000368:	f000 f944 	bl	80005f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	230f      	movs	r3, #15
 800036e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000370:	2302      	movs	r3, #2
 8000372:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000382:	f107 031c 	add.w	r3, r7, #28
 8000386:	2102      	movs	r1, #2
 8000388:	4618      	mov	r0, r3
 800038a:	f002 fd23 	bl	8002dd4 <HAL_RCC_ClockConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000394:	f000 f92e 	bl	80005f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000398:	2380      	movs	r3, #128	; 0x80
 800039a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800039c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a2:	463b      	mov	r3, r7
 80003a4:	4618      	mov	r0, r3
 80003a6:	f002 ff4b 	bl	8003240 <HAL_RCCEx_PeriphCLKConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003b0:	f000 f920 	bl	80005f4 <Error_Handler>
  }
}
 80003b4:	bf00      	nop
 80003b6:	3758      	adds	r7, #88	; 0x58
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08a      	sub	sp, #40	; 0x28
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003c2:	f107 031c 	add.w	r3, r7, #28
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]
 80003d8:	60da      	str	r2, [r3, #12]
 80003da:	611a      	str	r2, [r3, #16]
 80003dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003de:	4b2e      	ldr	r3, [pc, #184]	; (8000498 <MX_ADC1_Init+0xdc>)
 80003e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003e6:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <MX_ADC1_Init+0xdc>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003ec:	4b2a      	ldr	r3, [pc, #168]	; (8000498 <MX_ADC1_Init+0xdc>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003f2:	4b29      	ldr	r3, [pc, #164]	; (8000498 <MX_ADC1_Init+0xdc>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003f8:	4b27      	ldr	r3, [pc, #156]	; (8000498 <MX_ADC1_Init+0xdc>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003fe:	4b26      	ldr	r3, [pc, #152]	; (8000498 <MX_ADC1_Init+0xdc>)
 8000400:	2200      	movs	r2, #0
 8000402:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000406:	4b24      	ldr	r3, [pc, #144]	; (8000498 <MX_ADC1_Init+0xdc>)
 8000408:	2200      	movs	r2, #0
 800040a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800040c:	4b22      	ldr	r3, [pc, #136]	; (8000498 <MX_ADC1_Init+0xdc>)
 800040e:	2201      	movs	r2, #1
 8000410:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <MX_ADC1_Init+0xdc>)
 8000414:	2200      	movs	r2, #0
 8000416:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000418:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <MX_ADC1_Init+0xdc>)
 800041a:	2201      	movs	r2, #1
 800041c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800041e:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <MX_ADC1_Init+0xdc>)
 8000420:	2200      	movs	r2, #0
 8000422:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <MX_ADC1_Init+0xdc>)
 8000428:	2204      	movs	r2, #4
 800042a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800042c:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <MX_ADC1_Init+0xdc>)
 800042e:	2200      	movs	r2, #0
 8000430:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000432:	4b19      	ldr	r3, [pc, #100]	; (8000498 <MX_ADC1_Init+0xdc>)
 8000434:	2200      	movs	r2, #0
 8000436:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000438:	4817      	ldr	r0, [pc, #92]	; (8000498 <MX_ADC1_Init+0xdc>)
 800043a:	f000 faa9 	bl	8000990 <HAL_ADC_Init>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000444:	f000 f8d6 	bl	80005f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000448:	2300      	movs	r3, #0
 800044a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800044c:	f107 031c 	add.w	r3, r7, #28
 8000450:	4619      	mov	r1, r3
 8000452:	4811      	ldr	r0, [pc, #68]	; (8000498 <MX_ADC1_Init+0xdc>)
 8000454:	f001 f880 	bl	8001558 <HAL_ADCEx_MultiModeConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800045e:	f000 f8c9 	bl	80005f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000462:	2301      	movs	r3, #1
 8000464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000466:	2301      	movs	r3, #1
 8000468:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4619      	mov	r1, r3
 800047e:	4806      	ldr	r0, [pc, #24]	; (8000498 <MX_ADC1_Init+0xdc>)
 8000480:	f000 fdaa 	bl	8000fd8 <HAL_ADC_ConfigChannel>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800048a:	f000 f8b3 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	3728      	adds	r7, #40	; 0x28
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	2000008c 	.word	0x2000008c

0800049c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004a0:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004a2:	4a15      	ldr	r2, [pc, #84]	; (80004f8 <MX_USART2_UART_Init+0x5c>)
 80004a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004a6:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ae:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004c2:	220c      	movs	r2, #12
 80004c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004e0:	f002 ffe4 	bl	80034ac <HAL_UART_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004ea:	f000 f883 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000dc 	.word	0x200000dc
 80004f8:	40004400 	.word	0x40004400

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b36      	ldr	r3, [pc, #216]	; (80005ec <MX_GPIO_Init+0xf0>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a35      	ldr	r2, [pc, #212]	; (80005ec <MX_GPIO_Init+0xf0>)
 8000518:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b33      	ldr	r3, [pc, #204]	; (80005ec <MX_GPIO_Init+0xf0>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052a:	4b30      	ldr	r3, [pc, #192]	; (80005ec <MX_GPIO_Init+0xf0>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a2f      	ldr	r2, [pc, #188]	; (80005ec <MX_GPIO_Init+0xf0>)
 8000530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <MX_GPIO_Init+0xf0>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <MX_GPIO_Init+0xf0>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a29      	ldr	r2, [pc, #164]	; (80005ec <MX_GPIO_Init+0xf0>)
 8000548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b27      	ldr	r3, [pc, #156]	; (80005ec <MX_GPIO_Init+0xf0>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b24      	ldr	r3, [pc, #144]	; (80005ec <MX_GPIO_Init+0xf0>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a23      	ldr	r2, [pc, #140]	; (80005ec <MX_GPIO_Init+0xf0>)
 8000560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	4b21      	ldr	r3, [pc, #132]	; (80005ec <MX_GPIO_Init+0xf0>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2101      	movs	r1, #1
 8000576:	481e      	ldr	r0, [pc, #120]	; (80005f0 <MX_GPIO_Init+0xf4>)
 8000578:	f001 fbd6 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000586:	f001 fbcf 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000590:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	4813      	ldr	r0, [pc, #76]	; (80005f0 <MX_GPIO_Init+0xf4>)
 80005a2:	f001 fa4f 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005a6:	2301      	movs	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <MX_GPIO_Init+0xf4>)
 80005be:	f001 fa41 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 80005c2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f001 fa31 	bl	8001a44 <HAL_GPIO_Init>

}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000800 	.word	0x48000800

080005f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f8:	b672      	cpsid	i
}
 80005fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005fc:	e7fe      	b.n	80005fc <Error_Handler+0x8>
	...

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_MspInit+0x44>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <HAL_MspInit+0x44>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_MspInit+0x44>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_MspInit+0x44>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <HAL_MspInit+0x44>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_MspInit+0x44>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000636:	2007      	movs	r0, #7
 8000638:	f001 f9d0 	bl	80019dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000668:	d124      	bne.n	80006b4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <HAL_ADC_MspInit+0x74>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a13      	ldr	r2, [pc, #76]	; (80006bc <HAL_ADC_MspInit+0x74>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <HAL_ADC_MspInit+0x74>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <HAL_ADC_MspInit+0x74>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <HAL_ADC_MspInit+0x74>)
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <HAL_ADC_MspInit+0x74>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069a:	2301      	movs	r3, #1
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f001 f9c8 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	; 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a17      	ldr	r2, [pc, #92]	; (800073c <HAL_UART_MspInit+0x7c>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d128      	bne.n	8000734 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <HAL_UART_MspInit+0x80>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <HAL_UART_MspInit+0x80>)
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <HAL_UART_MspInit+0x80>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <HAL_UART_MspInit+0x80>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a10      	ldr	r2, [pc, #64]	; (8000740 <HAL_UART_MspInit+0x80>)
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <HAL_UART_MspInit+0x80>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000712:	230c      	movs	r3, #12
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071e:	2303      	movs	r3, #3
 8000720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000722:	2307      	movs	r3, #7
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000730:	f001 f988 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40004400 	.word	0x40004400
 8000740:	40021000 	.word	0x40021000

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f8ba 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a0:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <_sbrk+0x5c>)
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <_sbrk+0x60>)
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <_sbrk+0x64>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d102      	bne.n	80007ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <_sbrk+0x64>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <_sbrk+0x68>)
 80007b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <_sbrk+0x64>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d207      	bcs.n	80007d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c8:	f003 fa38 	bl	8003c3c <__errno>
 80007cc:	4603      	mov	r3, r0
 80007ce:	220c      	movs	r2, #12
 80007d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	e009      	b.n	80007ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <_sbrk+0x64>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	4a05      	ldr	r2, [pc, #20]	; (80007fc <_sbrk+0x64>)
 80007e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ea:	68fb      	ldr	r3, [r7, #12]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20003000 	.word	0x20003000
 80007f8:	00000400 	.word	0x00000400
 80007fc:	20000160 	.word	0x20000160
 8000800:	20000178 	.word	0x20000178

08000804 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <SystemInit+0x20>)
 800080a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <SystemInit+0x20>)
 8000810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000860 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <LoopForever+0x6>)
  ldr r1, =_edata
 800082e:	490e      	ldr	r1, [pc, #56]	; (8000868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <LoopForever+0xe>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000844:	4c0b      	ldr	r4, [pc, #44]	; (8000874 <LoopForever+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000852:	f7ff ffd7 	bl	8000804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000856:	f003 f9f7 	bl	8003c48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800085a:	f7ff fd11 	bl	8000280 <main>

0800085e <LoopForever>:

LoopForever:
    b LoopForever
 800085e:	e7fe      	b.n	800085e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000860:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800086c:	08004610 	.word	0x08004610
  ldr r2, =_sbss
 8000870:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000874:	20000178 	.word	0x20000178

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>
	...

0800087c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_Init+0x28>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_Init+0x28>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f001 f8a5 	bl	80019dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000892:	2000      	movs	r0, #0
 8000894:	f000 f808 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff feb2 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x54>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x58>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 f8af 	bl	8001a2a <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f001 f885 	bl	80019f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <HAL_InitTick+0x5c>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000008 	.word	0x20000008
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x20>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x24>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_IncTick+0x24>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000008 	.word	0x20000008
 800092c:	20000164 	.word	0x20000164

08000930 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;  
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000164 	.word	0x20000164

08000948 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000950:	f7ff ffee 	bl	8000930 <HAL_GetTick>
 8000954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000960:	d005      	beq.n	800096e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_Delay+0x44>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4413      	add	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800096e:	bf00      	nop
 8000970:	f7ff ffde 	bl	8000930 <HAL_GetTick>
 8000974:	4602      	mov	r2, r0
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	d8f7      	bhi.n	8000970 <HAL_Delay+0x28>
  {
  }
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008

08000990 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b09a      	sub	sp, #104	; 0x68
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800099e:	2300      	movs	r3, #0
 80009a0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d101      	bne.n	80009b0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e172      	b.n	8000c96 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 0310 	and.w	r3, r3, #16
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d176      	bne.n	8000ab0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d152      	bne.n	8000a70 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff fe2f 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d13b      	bne.n	8000a70 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 fed7 	bl	80017ac <ADC_Disable>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 0310 	and.w	r3, r3, #16
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d12f      	bne.n	8000a70 <HAL_ADC_Init+0xe0>
 8000a10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d12b      	bne.n	8000a70 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a20:	f023 0302 	bic.w	r3, r3, #2
 8000a24:	f043 0202 	orr.w	r2, r3, #2
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	689a      	ldr	r2, [r3, #8]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a3a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a4a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a4c:	4b94      	ldr	r3, [pc, #592]	; (8000ca0 <HAL_ADC_Init+0x310>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a94      	ldr	r2, [pc, #592]	; (8000ca4 <HAL_ADC_Init+0x314>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	0c9a      	lsrs	r2, r3, #18
 8000a58:	4613      	mov	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a62:	e002      	b.n	8000a6a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1f9      	bne.n	8000a64 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a8c:	d110      	bne.n	8000ab0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f023 0312 	bic.w	r3, r3, #18
 8000a96:	f043 0210 	orr.w	r2, r3, #16
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f043 0201 	orr.w	r2, r3, #1
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f003 0310 	and.w	r3, r3, #16
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f040 80df 	bne.w	8000c7c <HAL_ADC_Init+0x2ec>
 8000abe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f040 80da 	bne.w	8000c7c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f040 80d2 	bne.w	8000c7c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ae0:	f043 0202 	orr.w	r2, r3, #2
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ae8:	4b6f      	ldr	r3, [pc, #444]	; (8000ca8 <HAL_ADC_Init+0x318>)
 8000aea:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000af4:	d102      	bne.n	8000afc <HAL_ADC_Init+0x16c>
 8000af6:	4b6d      	ldr	r3, [pc, #436]	; (8000cac <HAL_ADC_Init+0x31c>)
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	e002      	b.n	8000b02 <HAL_ADC_Init+0x172>
 8000afc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b00:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	f003 0303 	and.w	r3, r3, #3
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d108      	bne.n	8000b22 <HAL_ADC_Init+0x192>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d101      	bne.n	8000b22 <HAL_ADC_Init+0x192>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <HAL_ADC_Init+0x194>
 8000b22:	2300      	movs	r3, #0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d11c      	bne.n	8000b62 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b28:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d010      	beq.n	8000b50 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f003 0303 	and.w	r3, r3, #3
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d107      	bne.n	8000b4a <HAL_ADC_Init+0x1ba>
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d101      	bne.n	8000b4a <HAL_ADC_Init+0x1ba>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <HAL_ADC_Init+0x1bc>
 8000b4a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d108      	bne.n	8000b62 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b60:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7e5b      	ldrb	r3, [r3, #25]
 8000b66:	035b      	lsls	r3, r3, #13
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b6c:	2a01      	cmp	r2, #1
 8000b6e:	d002      	beq.n	8000b76 <HAL_ADC_Init+0x1e6>
 8000b70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b74:	e000      	b.n	8000b78 <HAL_ADC_Init+0x1e8>
 8000b76:	2200      	movs	r2, #0
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d11b      	bne.n	8000bce <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7e5b      	ldrb	r3, [r3, #25]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d109      	bne.n	8000bb2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	045a      	lsls	r2, r3, #17
 8000ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bae:	663b      	str	r3, [r7, #96]	; 0x60
 8000bb0:	e00d      	b.n	8000bce <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000bba:	f043 0220 	orr.w	r2, r3, #32
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f043 0201 	orr.w	r2, r3, #1
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d007      	beq.n	8000be6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bde:	4313      	orrs	r3, r2
 8000be0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000be2:	4313      	orrs	r3, r2
 8000be4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f003 030c 	and.w	r3, r3, #12
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d114      	bne.n	8000c1e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	6812      	ldr	r2, [r2, #0]
 8000bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c02:	f023 0302 	bic.w	r3, r3, #2
 8000c06:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7e1b      	ldrb	r3, [r3, #24]
 8000c0c:	039a      	lsls	r2, r3, #14
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4313      	orrs	r3, r2
 8000c18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <HAL_ADC_Init+0x320>)
 8000c26:	4013      	ands	r3, r2
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	6812      	ldr	r2, [r2, #0]
 8000c2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c2e:	430b      	orrs	r3, r1
 8000c30:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d10c      	bne.n	8000c54 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	f023 010f 	bic.w	r1, r3, #15
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	1e5a      	subs	r2, r3, #1
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	631a      	str	r2, [r3, #48]	; 0x30
 8000c52:	e007      	b.n	8000c64 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 020f 	bic.w	r2, r2, #15
 8000c62:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f023 0303 	bic.w	r3, r3, #3
 8000c72:	f043 0201 	orr.w	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	641a      	str	r2, [r3, #64]	; 0x40
 8000c7a:	e00a      	b.n	8000c92 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f023 0312 	bic.w	r3, r3, #18
 8000c84:	f043 0210 	orr.w	r2, r3, #16
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000c92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3768      	adds	r7, #104	; 0x68
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	431bde83 	.word	0x431bde83
 8000ca8:	50000300 	.word	0x50000300
 8000cac:	50000100 	.word	0x50000100
 8000cb0:	fff0c007 	.word	0xfff0c007

08000cb4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f040 809c 	bne.w	8000e08 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d101      	bne.n	8000cde <HAL_ADC_Start+0x2a>
 8000cda:	2302      	movs	r3, #2
 8000cdc:	e097      	b.n	8000e0e <HAL_ADC_Start+0x15a>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 fcfc 	bl	80016e4 <ADC_Enable>
 8000cec:	4603      	mov	r3, r0
 8000cee:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8083 	bne.w	8000dfe <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d00:	f023 0301 	bic.w	r3, r3, #1
 8000d04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d0c:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <HAL_ADC_Start+0x164>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f003 031f 	and.w	r3, r3, #31
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d004      	beq.n	8000d22 <HAL_ADC_Start+0x6e>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d20:	d115      	bne.n	8000d4e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d027      	beq.n	8000d8c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d4c:	e01e      	b.n	8000d8c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d62:	d004      	beq.n	8000d6e <HAL_ADC_Start+0xba>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a2c      	ldr	r2, [pc, #176]	; (8000e1c <HAL_ADC_Start+0x168>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d10e      	bne.n	8000d8c <HAL_ADC_Start+0xd8>
 8000d6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d007      	beq.n	8000d8c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d98:	d106      	bne.n	8000da8 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f023 0206 	bic.w	r2, r3, #6
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	645a      	str	r2, [r3, #68]	; 0x44
 8000da6:	e002      	b.n	8000dae <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	221c      	movs	r2, #28
 8000dbc:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <HAL_ADC_Start+0x164>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 031f 	and.w	r3, r3, #31
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d010      	beq.n	8000dec <HAL_ADC_Start+0x138>
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <HAL_ADC_Start+0x164>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f003 031f 	and.w	r3, r3, #31
 8000dd2:	2b05      	cmp	r3, #5
 8000dd4:	d00a      	beq.n	8000dec <HAL_ADC_Start+0x138>
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <HAL_ADC_Start+0x164>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f003 031f 	and.w	r3, r3, #31
 8000dde:	2b09      	cmp	r3, #9
 8000de0:	d004      	beq.n	8000dec <HAL_ADC_Start+0x138>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dea:	d10f      	bne.n	8000e0c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f042 0204 	orr.w	r2, r2, #4
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	e006      	b.n	8000e0c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000e06:	e001      	b.n	8000e0c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	50000300 	.word	0x50000300
 8000e1c:	50000100 	.word	0x50000100

08000e20 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	d102      	bne.n	8000e3c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000e36:	2308      	movs	r3, #8
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e02e      	b.n	8000e9a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e3c:	4b5e      	ldr	r3, [pc, #376]	; (8000fb8 <HAL_ADC_PollForConversion+0x198>)
 8000e3e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d112      	bne.n	8000e72 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d11d      	bne.n	8000e96 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f043 0220 	orr.w	r2, r3, #32
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e09d      	b.n	8000fae <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00b      	beq.n	8000e96 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f043 0220 	orr.w	r2, r3, #32
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e08b      	b.n	8000fae <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000e96:	230c      	movs	r3, #12
 8000e98:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e9a:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <HAL_ADC_PollForConversion+0x198>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f003 031f 	and.w	r3, r3, #31
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <HAL_ADC_PollForConversion+0x90>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eae:	d104      	bne.n	8000eba <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	e003      	b.n	8000ec2 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000eba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8000ec2:	f7ff fd35 	bl	8000930 <HAL_GetTick>
 8000ec6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ec8:	e021      	b.n	8000f0e <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d01d      	beq.n	8000f0e <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d007      	beq.n	8000ee8 <HAL_ADC_PollForConversion+0xc8>
 8000ed8:	f7ff fd2a 	bl	8000930 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d212      	bcs.n	8000f0e <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10b      	bne.n	8000f0e <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f043 0204 	orr.w	r2, r3, #4
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e04f      	b.n	8000fae <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	4013      	ands	r3, r2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0d6      	beq.n	8000eca <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d131      	bne.n	8000f9a <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d12c      	bne.n	8000f9a <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	2b08      	cmp	r3, #8
 8000f4c:	d125      	bne.n	8000f9a <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d112      	bne.n	8000f82 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d112      	bne.n	8000f9a <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f043 0201 	orr.w	r2, r3, #1
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f80:	e00b      	b.n	8000f9a <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f043 0220 	orr.w	r2, r3, #32
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f043 0201 	orr.w	r2, r3, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d103      	bne.n	8000fac <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	50000300 	.word	0x50000300

08000fbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b09b      	sub	sp, #108	; 0x6c
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d101      	bne.n	8000ffa <HAL_ADC_ConfigChannel+0x22>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e2a4      	b.n	8001544 <HAL_ADC_ConfigChannel+0x56c>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	2b00      	cmp	r3, #0
 800100e:	f040 8288 	bne.w	8001522 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b04      	cmp	r3, #4
 8001018:	d81c      	bhi.n	8001054 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	461a      	mov	r2, r3
 800102e:	231f      	movs	r3, #31
 8001030:	4093      	lsls	r3, r2
 8001032:	43db      	mvns	r3, r3
 8001034:	4019      	ands	r1, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa00 f203 	lsl.w	r2, r0, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	430a      	orrs	r2, r1
 8001050:	631a      	str	r2, [r3, #48]	; 0x30
 8001052:	e063      	b.n	800111c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b09      	cmp	r3, #9
 800105a:	d81e      	bhi.n	800109a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	3b1e      	subs	r3, #30
 8001070:	221f      	movs	r2, #31
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	4019      	ands	r1, r3
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	3b1e      	subs	r3, #30
 800108c:	fa00 f203 	lsl.w	r2, r0, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
 8001098:	e040      	b.n	800111c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b0e      	cmp	r3, #14
 80010a0:	d81e      	bhi.n	80010e0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	3b3c      	subs	r3, #60	; 0x3c
 80010b6:	221f      	movs	r2, #31
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	4019      	ands	r1, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	3b3c      	subs	r3, #60	; 0x3c
 80010d2:	fa00 f203 	lsl.w	r2, r0, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	639a      	str	r2, [r3, #56]	; 0x38
 80010de:	e01d      	b.n	800111c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	3b5a      	subs	r3, #90	; 0x5a
 80010f4:	221f      	movs	r2, #31
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	4019      	ands	r1, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4413      	add	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	3b5a      	subs	r3, #90	; 0x5a
 8001110:	fa00 f203 	lsl.w	r2, r0, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b00      	cmp	r3, #0
 8001128:	f040 80e5 	bne.w	80012f6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b09      	cmp	r3, #9
 8001132:	d91c      	bls.n	800116e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6999      	ldr	r1, [r3, #24]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	3b1e      	subs	r3, #30
 8001146:	2207      	movs	r2, #7
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	4019      	ands	r1, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	6898      	ldr	r0, [r3, #8]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	3b1e      	subs	r3, #30
 8001160:	fa00 f203 	lsl.w	r2, r0, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	619a      	str	r2, [r3, #24]
 800116c:	e019      	b.n	80011a2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6959      	ldr	r1, [r3, #20]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	2207      	movs	r2, #7
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	4019      	ands	r1, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	6898      	ldr	r0, [r3, #8]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	fa00 f203 	lsl.w	r2, r0, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	695a      	ldr	r2, [r3, #20]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	08db      	lsrs	r3, r3, #3
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	3b01      	subs	r3, #1
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d84f      	bhi.n	8001264 <HAL_ADC_ConfigChannel+0x28c>
 80011c4:	a201      	add	r2, pc, #4	; (adr r2, 80011cc <HAL_ADC_ConfigChannel+0x1f4>)
 80011c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ca:	bf00      	nop
 80011cc:	080011dd 	.word	0x080011dd
 80011d0:	080011ff 	.word	0x080011ff
 80011d4:	08001221 	.word	0x08001221
 80011d8:	08001243 	.word	0x08001243
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011e2:	4b94      	ldr	r3, [pc, #592]	; (8001434 <HAL_ADC_ConfigChannel+0x45c>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	0691      	lsls	r1, r2, #26
 80011ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011ee:	430a      	orrs	r2, r1
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011fa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011fc:	e07e      	b.n	80012fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001204:	4b8b      	ldr	r3, [pc, #556]	; (8001434 <HAL_ADC_ConfigChannel+0x45c>)
 8001206:	4013      	ands	r3, r2
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	0691      	lsls	r1, r2, #26
 800120e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001210:	430a      	orrs	r2, r1
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800121c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800121e:	e06d      	b.n	80012fc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001226:	4b83      	ldr	r3, [pc, #524]	; (8001434 <HAL_ADC_ConfigChannel+0x45c>)
 8001228:	4013      	ands	r3, r2
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	6812      	ldr	r2, [r2, #0]
 800122e:	0691      	lsls	r1, r2, #26
 8001230:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001232:	430a      	orrs	r2, r1
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800123e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001240:	e05c      	b.n	80012fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001248:	4b7a      	ldr	r3, [pc, #488]	; (8001434 <HAL_ADC_ConfigChannel+0x45c>)
 800124a:	4013      	ands	r3, r2
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	0691      	lsls	r1, r2, #26
 8001252:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001254:	430a      	orrs	r2, r1
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001260:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001262:	e04b      	b.n	80012fc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	069b      	lsls	r3, r3, #26
 8001274:	429a      	cmp	r2, r3
 8001276:	d107      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001286:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800128e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	069b      	lsls	r3, r3, #26
 8001298:	429a      	cmp	r2, r3
 800129a:	d107      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012aa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	069b      	lsls	r3, r3, #26
 80012bc:	429a      	cmp	r2, r3
 80012be:	d107      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012ce:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	069b      	lsls	r3, r3, #26
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d10a      	bne.n	80012fa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012f2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80012f4:	e001      	b.n	80012fa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80012f6:	bf00      	nop
 80012f8:	e000      	b.n	80012fc <HAL_ADC_ConfigChannel+0x324>
      break;
 80012fa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d108      	bne.n	800131c <HAL_ADC_ConfigChannel+0x344>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <HAL_ADC_ConfigChannel+0x344>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <HAL_ADC_ConfigChannel+0x346>
 800131c:	2300      	movs	r3, #0
 800131e:	2b00      	cmp	r3, #0
 8001320:	f040 810a 	bne.w	8001538 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d00f      	beq.n	800134c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2201      	movs	r2, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	400a      	ands	r2, r1
 8001346:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800134a:	e049      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2201      	movs	r2, #1
 800135a:	409a      	lsls	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b09      	cmp	r3, #9
 800136c:	d91c      	bls.n	80013a8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6999      	ldr	r1, [r3, #24]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	3b1b      	subs	r3, #27
 8001380:	2207      	movs	r2, #7
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	4019      	ands	r1, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	6898      	ldr	r0, [r3, #8]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	3b1b      	subs	r3, #27
 800139a:	fa00 f203 	lsl.w	r2, r0, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	619a      	str	r2, [r3, #24]
 80013a6:	e01b      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6959      	ldr	r1, [r3, #20]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	2207      	movs	r2, #7
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	4019      	ands	r1, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	6898      	ldr	r0, [r3, #8]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	fa00 f203 	lsl.w	r2, r0, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_ADC_ConfigChannel+0x460>)
 80013e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b10      	cmp	r3, #16
 80013ea:	d105      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80013ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d015      	beq.n	8001424 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80013fc:	2b11      	cmp	r3, #17
 80013fe:	d105      	bne.n	800140c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00b      	beq.n	8001424 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001410:	2b12      	cmp	r3, #18
 8001412:	f040 8091 	bne.w	8001538 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800141e:	2b00      	cmp	r3, #0
 8001420:	f040 808a 	bne.w	8001538 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800142c:	d108      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x468>
 800142e:	4b03      	ldr	r3, [pc, #12]	; (800143c <HAL_ADC_ConfigChannel+0x464>)
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	e008      	b.n	8001446 <HAL_ADC_ConfigChannel+0x46e>
 8001434:	83fff000 	.word	0x83fff000
 8001438:	50000300 	.word	0x50000300
 800143c:	50000100 	.word	0x50000100
 8001440:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001444:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d108      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x48e>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x48e>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_ADC_ConfigChannel+0x490>
 8001466:	2300      	movs	r3, #0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d150      	bne.n	800150e <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800146c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800146e:	2b00      	cmp	r3, #0
 8001470:	d010      	beq.n	8001494 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b01      	cmp	r3, #1
 800147c:	d107      	bne.n	800148e <HAL_ADC_ConfigChannel+0x4b6>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_ADC_ConfigChannel+0x4b6>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_ADC_ConfigChannel+0x4b8>
 800148e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001490:	2b00      	cmp	r3, #0
 8001492:	d13c      	bne.n	800150e <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b10      	cmp	r3, #16
 800149a:	d11d      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0x500>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a4:	d118      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80014a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014b0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014b2:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_ADC_ConfigChannel+0x578>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a27      	ldr	r2, [pc, #156]	; (8001554 <HAL_ADC_ConfigChannel+0x57c>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	0c9a      	lsrs	r2, r3, #18
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014c8:	e002      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f9      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014d6:	e02e      	b.n	8001536 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b11      	cmp	r3, #17
 80014de:	d10b      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x520>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014e8:	d106      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80014ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80014f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014f6:	e01e      	b.n	8001536 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b12      	cmp	r3, #18
 80014fe:	d11a      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800150a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800150c:	e013      	b.n	8001536 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f043 0220 	orr.w	r2, r3, #32
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001520:	e00a      	b.n	8001538 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f043 0220 	orr.w	r2, r3, #32
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001534:	e000      	b.n	8001538 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001536:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001540:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001544:	4618      	mov	r0, r3
 8001546:	376c      	adds	r7, #108	; 0x6c
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	20000000 	.word	0x20000000
 8001554:	431bde83 	.word	0x431bde83

08001558 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001558:	b480      	push	{r7}
 800155a:	b099      	sub	sp, #100	; 0x64
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001570:	d102      	bne.n	8001578 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001572:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	e002      	b.n	800157e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001578:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800157c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0a2      	b.n	80016ce <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001592:	2302      	movs	r3, #2
 8001594:	e09b      	b.n	80016ce <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d17f      	bne.n	80016ac <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d179      	bne.n	80016ac <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b8:	4b49      	ldr	r3, [pc, #292]	; (80016e0 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80015ba:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d040      	beq.n	8001646 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80015c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015d6:	035b      	lsls	r3, r3, #13
 80015d8:	430b      	orrs	r3, r1
 80015da:	431a      	orrs	r2, r3
 80015dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015de:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d108      	bne.n	8001600 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001600:	2300      	movs	r3, #0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d15c      	bne.n	80016c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001622:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001624:	2b00      	cmp	r3, #0
 8001626:	d14b      	bne.n	80016c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001630:	f023 030f 	bic.w	r3, r3, #15
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	6811      	ldr	r1, [r2, #0]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	6892      	ldr	r2, [r2, #8]
 800163c:	430a      	orrs	r2, r1
 800163e:	431a      	orrs	r2, r3
 8001640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001642:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001644:	e03c      	b.n	80016c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800164e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001650:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d108      	bne.n	8001672 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001672:	2300      	movs	r3, #0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d123      	bne.n	80016c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d107      	bne.n	8001694 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001694:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001696:	2b00      	cmp	r3, #0
 8001698:	d112      	bne.n	80016c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800169a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80016a2:	f023 030f 	bic.w	r3, r3, #15
 80016a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016a8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016aa:	e009      	b.n	80016c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f043 0220 	orr.w	r2, r3, #32
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80016be:	e000      	b.n	80016c2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016c0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80016ce:	4618      	mov	r0, r3
 80016d0:	3764      	adds	r7, #100	; 0x64
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	50000100 	.word	0x50000100
 80016e0:	50000300 	.word	0x50000300

080016e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d108      	bne.n	8001710 <ADC_Enable+0x2c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <ADC_Enable+0x2c>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <ADC_Enable+0x2e>
 8001710:	2300      	movs	r3, #0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d143      	bne.n	800179e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <ADC_Enable+0xc4>)
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00d      	beq.n	8001740 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f043 0210 	orr.w	r2, r3, #16
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e02f      	b.n	80017a0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0201 	orr.w	r2, r2, #1
 800174e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001750:	f7ff f8ee 	bl	8000930 <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001756:	e01b      	b.n	8001790 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001758:	f7ff f8ea 	bl	8000930 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d914      	bls.n	8001790 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b01      	cmp	r3, #1
 8001772:	d00d      	beq.n	8001790 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f043 0210 	orr.w	r2, r3, #16
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e007      	b.n	80017a0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b01      	cmp	r3, #1
 800179c:	d1dc      	bne.n	8001758 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	8000003f 	.word	0x8000003f

080017ac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d108      	bne.n	80017d8 <ADC_Disable+0x2c>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <ADC_Disable+0x2c>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <ADC_Disable+0x2e>
 80017d8:	2300      	movs	r3, #0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d047      	beq.n	800186e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 030d 	and.w	r3, r3, #13
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d10f      	bne.n	800180c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0202 	orr.w	r2, r2, #2
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2203      	movs	r2, #3
 8001802:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001804:	f7ff f894 	bl	8000930 <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800180a:	e029      	b.n	8001860 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f043 0210 	orr.w	r2, r3, #16
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	f043 0201 	orr.w	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e023      	b.n	8001870 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001828:	f7ff f882 	bl	8000930 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d914      	bls.n	8001860 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	d10d      	bne.n	8001860 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f043 0210 	orr.w	r2, r3, #16
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001854:	f043 0201 	orr.w	r2, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e007      	b.n	8001870 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b01      	cmp	r3, #1
 800186c:	d0dc      	beq.n	8001828 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	; (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a8:	d301      	bcc.n	80019ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00f      	b.n	80019ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <SysTick_Config+0x40>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b6:	210f      	movs	r1, #15
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f7ff ff8e 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <SysTick_Config+0x40>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <SysTick_Config+0x40>)
 80019c8:	2207      	movs	r2, #7
 80019ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	e000e010 	.word	0xe000e010

080019dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff47 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a04:	f7ff ff5c 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	6978      	ldr	r0, [r7, #20]
 8001a10:	f7ff ff8e 	bl	8001930 <NVIC_EncodePriority>
 8001a14:	4602      	mov	r2, r0
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff5d 	bl	80018dc <__NVIC_SetPriority>
}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffb0 	bl	8001998 <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	e14e      	b.n	8001cf2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	4013      	ands	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8140 	beq.w	8001cec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d005      	beq.n	8001a84 <HAL_GPIO_Init+0x40>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d130      	bne.n	8001ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aba:	2201      	movs	r2, #1
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	f003 0201 	and.w	r2, r3, #1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d017      	beq.n	8001b22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d123      	bne.n	8001b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	220f      	movs	r2, #15
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	08da      	lsrs	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3208      	adds	r2, #8
 8001b70:	6939      	ldr	r1, [r7, #16]
 8001b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0203 	and.w	r2, r3, #3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 809a 	beq.w	8001cec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb8:	4b55      	ldr	r3, [pc, #340]	; (8001d10 <HAL_GPIO_Init+0x2cc>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a54      	ldr	r2, [pc, #336]	; (8001d10 <HAL_GPIO_Init+0x2cc>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b52      	ldr	r3, [pc, #328]	; (8001d10 <HAL_GPIO_Init+0x2cc>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bd0:	4a50      	ldr	r2, [pc, #320]	; (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bfa:	d013      	beq.n	8001c24 <HAL_GPIO_Init+0x1e0>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a46      	ldr	r2, [pc, #280]	; (8001d18 <HAL_GPIO_Init+0x2d4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d00d      	beq.n	8001c20 <HAL_GPIO_Init+0x1dc>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a45      	ldr	r2, [pc, #276]	; (8001d1c <HAL_GPIO_Init+0x2d8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d007      	beq.n	8001c1c <HAL_GPIO_Init+0x1d8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a44      	ldr	r2, [pc, #272]	; (8001d20 <HAL_GPIO_Init+0x2dc>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d101      	bne.n	8001c18 <HAL_GPIO_Init+0x1d4>
 8001c14:	2303      	movs	r3, #3
 8001c16:	e006      	b.n	8001c26 <HAL_GPIO_Init+0x1e2>
 8001c18:	2305      	movs	r3, #5
 8001c1a:	e004      	b.n	8001c26 <HAL_GPIO_Init+0x1e2>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e002      	b.n	8001c26 <HAL_GPIO_Init+0x1e2>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_GPIO_Init+0x1e2>
 8001c24:	2300      	movs	r3, #0
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	f002 0203 	and.w	r2, r2, #3
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c36:	4937      	ldr	r1, [pc, #220]	; (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c44:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <HAL_GPIO_Init+0x2e0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c68:	4a2e      	ldr	r2, [pc, #184]	; (8001d24 <HAL_GPIO_Init+0x2e0>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_GPIO_Init+0x2e0>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c92:	4a24      	ldr	r2, [pc, #144]	; (8001d24 <HAL_GPIO_Init+0x2e0>)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c98:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <HAL_GPIO_Init+0x2e0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_GPIO_Init+0x2e0>)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_GPIO_Init+0x2e0>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ce6:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <HAL_GPIO_Init+0x2e0>)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f47f aea9 	bne.w	8001a54 <HAL_GPIO_Init+0x10>
  }
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010000 	.word	0x40010000
 8001d18:	48000400 	.word	0x48000400
 8001d1c:	48000800 	.word	0x48000800
 8001d20:	48000c00 	.word	0x48000c00
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
 8001d34:	4613      	mov	r3, r2
 8001d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d38:	787b      	ldrb	r3, [r7, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d68:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f001 b823 	b.w	8002dc4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 817d 	beq.w	800208e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d94:	4bbc      	ldr	r3, [pc, #752]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d00c      	beq.n	8001dba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001da0:	4bb9      	ldr	r3, [pc, #740]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d15c      	bne.n	8001e66 <HAL_RCC_OscConfig+0x10e>
 8001dac:	4bb6      	ldr	r3, [pc, #728]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db8:	d155      	bne.n	8001e66 <HAL_RCC_OscConfig+0x10e>
 8001dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dbe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	095b      	lsrs	r3, r3, #5
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d102      	bne.n	8001dec <HAL_RCC_OscConfig+0x94>
 8001de6:	4ba8      	ldr	r3, [pc, #672]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	e015      	b.n	8001e18 <HAL_RCC_OscConfig+0xc0>
 8001dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e04:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e08:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e14:	4b9c      	ldr	r3, [pc, #624]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e1c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e20:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e24:	fa92 f2a2 	rbit	r2, r2
 8001e28:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e2c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e30:	fab2 f282 	clz	r2, r2
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	f042 0220 	orr.w	r2, r2, #32
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	f002 021f 	and.w	r2, r2, #31
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f202 	lsl.w	r2, r1, r2
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 811f 	beq.w	800208c <HAL_RCC_OscConfig+0x334>
 8001e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 8116 	bne.w	800208c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f000 bfaf 	b.w	8002dc4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12e>
 8001e78:	4b83      	ldr	r3, [pc, #524]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a82      	ldr	r2, [pc, #520]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	e036      	b.n	8001ef4 <HAL_RCC_OscConfig+0x19c>
 8001e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x158>
 8001e96:	4b7c      	ldr	r3, [pc, #496]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a7b      	ldr	r2, [pc, #492]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b79      	ldr	r3, [pc, #484]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a78      	ldr	r2, [pc, #480]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e021      	b.n	8001ef4 <HAL_RCC_OscConfig+0x19c>
 8001eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x184>
 8001ec2:	4b71      	ldr	r3, [pc, #452]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a70      	ldr	r2, [pc, #448]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b6e      	ldr	r3, [pc, #440]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6d      	ldr	r2, [pc, #436]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x19c>
 8001edc:	4b6a      	ldr	r3, [pc, #424]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a69      	ldr	r2, [pc, #420]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b67      	ldr	r3, [pc, #412]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a66      	ldr	r2, [pc, #408]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ef4:	4b64      	ldr	r3, [pc, #400]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	f023 020f 	bic.w	r2, r3, #15
 8001efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	495f      	ldr	r1, [pc, #380]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d059      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7fe fd07 	bl	8000930 <HAL_GetTick>
 8001f22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f28:	f7fe fd02 	bl	8000930 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b64      	cmp	r3, #100	; 0x64
 8001f36:	d902      	bls.n	8001f3e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	f000 bf43 	b.w	8002dc4 <HAL_RCC_OscConfig+0x106c>
 8001f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f42:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	095b      	lsrs	r3, r3, #5
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d102      	bne.n	8001f70 <HAL_RCC_OscConfig+0x218>
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	e015      	b.n	8001f9c <HAL_RCC_OscConfig+0x244>
 8001f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f74:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f88:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f8c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f98:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fa0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001fa4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001fa8:	fa92 f2a2 	rbit	r2, r2
 8001fac:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001fb0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001fb4:	fab2 f282 	clz	r2, r2
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f042 0220 	orr.w	r2, r2, #32
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f002 021f 	and.w	r2, r2, #31
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ab      	beq.n	8001f28 <HAL_RCC_OscConfig+0x1d0>
 8001fd0:	e05d      	b.n	800208e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fcad 	bl	8000930 <HAL_GetTick>
 8001fd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7fe fca8 	bl	8000930 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b64      	cmp	r3, #100	; 0x64
 8001fea:	d902      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	f000 bee9 	b.w	8002dc4 <HAL_RCC_OscConfig+0x106c>
 8001ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002006:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	095b      	lsrs	r3, r3, #5
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b01      	cmp	r3, #1
 800201c:	d102      	bne.n	8002024 <HAL_RCC_OscConfig+0x2cc>
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	e015      	b.n	8002050 <HAL_RCC_OscConfig+0x2f8>
 8002024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002028:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800203c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002040:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800204c:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <HAL_RCC_OscConfig+0x330>)
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002054:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002058:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800205c:	fa92 f2a2 	rbit	r2, r2
 8002060:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002064:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002068:	fab2 f282 	clz	r2, r2
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	f042 0220 	orr.w	r2, r2, #32
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	f002 021f 	and.w	r2, r2, #31
 8002078:	2101      	movs	r1, #1
 800207a:	fa01 f202 	lsl.w	r2, r1, r2
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ab      	bne.n	8001fdc <HAL_RCC_OscConfig+0x284>
 8002084:	e003      	b.n	800208e <HAL_RCC_OscConfig+0x336>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002092:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 817d 	beq.w	800239e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020a4:	4ba6      	ldr	r3, [pc, #664]	; (8002340 <HAL_RCC_OscConfig+0x5e8>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00b      	beq.n	80020c8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020b0:	4ba3      	ldr	r3, [pc, #652]	; (8002340 <HAL_RCC_OscConfig+0x5e8>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d172      	bne.n	80021a2 <HAL_RCC_OscConfig+0x44a>
 80020bc:	4ba0      	ldr	r3, [pc, #640]	; (8002340 <HAL_RCC_OscConfig+0x5e8>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d16c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x44a>
 80020c8:	2302      	movs	r3, #2
 80020ca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80020da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d102      	bne.n	80020f8 <HAL_RCC_OscConfig+0x3a0>
 80020f2:	4b93      	ldr	r3, [pc, #588]	; (8002340 <HAL_RCC_OscConfig+0x5e8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	e013      	b.n	8002120 <HAL_RCC_OscConfig+0x3c8>
 80020f8:	2302      	movs	r3, #2
 80020fa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800210a:	2302      	movs	r3, #2
 800210c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002110:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800211c:	4b88      	ldr	r3, [pc, #544]	; (8002340 <HAL_RCC_OscConfig+0x5e8>)
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	2202      	movs	r2, #2
 8002122:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002126:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800212a:	fa92 f2a2 	rbit	r2, r2
 800212e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002132:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002136:	fab2 f282 	clz	r2, r2
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	f042 0220 	orr.w	r2, r2, #32
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	f002 021f 	and.w	r2, r2, #31
 8002146:	2101      	movs	r1, #1
 8002148:	fa01 f202 	lsl.w	r2, r1, r2
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_RCC_OscConfig+0x410>
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d002      	beq.n	8002168 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	f000 be2e 	b.w	8002dc4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b75      	ldr	r3, [pc, #468]	; (8002340 <HAL_RCC_OscConfig+0x5e8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002174:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	21f8      	movs	r1, #248	; 0xf8
 800217e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002186:	fa91 f1a1 	rbit	r1, r1
 800218a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800218e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002192:	fab1 f181 	clz	r1, r1
 8002196:	b2c9      	uxtb	r1, r1
 8002198:	408b      	lsls	r3, r1
 800219a:	4969      	ldr	r1, [pc, #420]	; (8002340 <HAL_RCC_OscConfig+0x5e8>)
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a0:	e0fd      	b.n	800239e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8088 	beq.w	80022c4 <HAL_RCC_OscConfig+0x56c>
 80021b4:	2301      	movs	r3, #1
 80021b6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80021c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	461a      	mov	r2, r3
 80021dc:	2301      	movs	r3, #1
 80021de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe fba6 	bl	8000930 <HAL_GetTick>
 80021e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ea:	f7fe fba1 	bl	8000930 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d902      	bls.n	8002200 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	f000 bde2 	b.w	8002dc4 <HAL_RCC_OscConfig+0x106c>
 8002200:	2302      	movs	r3, #2
 8002202:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002212:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	095b      	lsrs	r3, r3, #5
 800221e:	b2db      	uxtb	r3, r3
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d102      	bne.n	8002230 <HAL_RCC_OscConfig+0x4d8>
 800222a:	4b45      	ldr	r3, [pc, #276]	; (8002340 <HAL_RCC_OscConfig+0x5e8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	e013      	b.n	8002258 <HAL_RCC_OscConfig+0x500>
 8002230:	2302      	movs	r3, #2
 8002232:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002242:	2302      	movs	r3, #2
 8002244:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002248:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002254:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <HAL_RCC_OscConfig+0x5e8>)
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	2202      	movs	r2, #2
 800225a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800225e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002262:	fa92 f2a2 	rbit	r2, r2
 8002266:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800226a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800226e:	fab2 f282 	clz	r2, r2
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	f042 0220 	orr.w	r2, r2, #32
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	f002 021f 	and.w	r2, r2, #31
 800227e:	2101      	movs	r1, #1
 8002280:	fa01 f202 	lsl.w	r2, r1, r2
 8002284:	4013      	ands	r3, r2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0af      	beq.n	80021ea <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <HAL_RCC_OscConfig+0x5e8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	21f8      	movs	r1, #248	; 0xf8
 80022a0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022a8:	fa91 f1a1 	rbit	r1, r1
 80022ac:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80022b0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80022b4:	fab1 f181 	clz	r1, r1
 80022b8:	b2c9      	uxtb	r1, r1
 80022ba:	408b      	lsls	r3, r1
 80022bc:	4920      	ldr	r1, [pc, #128]	; (8002340 <HAL_RCC_OscConfig+0x5e8>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]
 80022c2:	e06c      	b.n	800239e <HAL_RCC_OscConfig+0x646>
 80022c4:	2301      	movs	r3, #1
 80022c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80022d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	461a      	mov	r2, r3
 80022ec:	2300      	movs	r3, #0
 80022ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7fe fb1e 	bl	8000930 <HAL_GetTick>
 80022f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fa:	f7fe fb19 	bl	8000930 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d902      	bls.n	8002310 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	f000 bd5a 	b.w	8002dc4 <HAL_RCC_OscConfig+0x106c>
 8002310:	2302      	movs	r3, #2
 8002312:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	b2db      	uxtb	r3, r3
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d104      	bne.n	8002344 <HAL_RCC_OscConfig+0x5ec>
 800233a:	4b01      	ldr	r3, [pc, #4]	; (8002340 <HAL_RCC_OscConfig+0x5e8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	e015      	b.n	800236c <HAL_RCC_OscConfig+0x614>
 8002340:	40021000 	.word	0x40021000
 8002344:	2302      	movs	r3, #2
 8002346:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002356:	2302      	movs	r3, #2
 8002358:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800235c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002368:	4bc8      	ldr	r3, [pc, #800]	; (800268c <HAL_RCC_OscConfig+0x934>)
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	2202      	movs	r2, #2
 800236e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002372:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002376:	fa92 f2a2 	rbit	r2, r2
 800237a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800237e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002382:	fab2 f282 	clz	r2, r2
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	f042 0220 	orr.w	r2, r2, #32
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	f002 021f 	and.w	r2, r2, #31
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f202 	lsl.w	r2, r1, r2
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1ad      	bne.n	80022fa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8110 	beq.w	80025d4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d079      	beq.n	80024b8 <HAL_RCC_OscConfig+0x760>
 80023c4:	2301      	movs	r3, #1
 80023c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80023d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	4bab      	ldr	r3, [pc, #684]	; (8002690 <HAL_RCC_OscConfig+0x938>)
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	461a      	mov	r2, r3
 80023ea:	2301      	movs	r3, #1
 80023ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ee:	f7fe fa9f 	bl	8000930 <HAL_GetTick>
 80023f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f8:	f7fe fa9a 	bl	8000930 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d902      	bls.n	800240e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	f000 bcdb 	b.w	8002dc4 <HAL_RCC_OscConfig+0x106c>
 800240e:	2302      	movs	r3, #2
 8002410:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002424:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002428:	2202      	movs	r2, #2
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fa93 f2a3 	rbit	r2, r3
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800244c:	2202      	movs	r2, #2
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	fa93 f2a3 	rbit	r2, r3
 800245e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002462:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002466:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002468:	4b88      	ldr	r3, [pc, #544]	; (800268c <HAL_RCC_OscConfig+0x934>)
 800246a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800246c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002470:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002474:	2102      	movs	r1, #2
 8002476:	6019      	str	r1, [r3, #0]
 8002478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	fa93 f1a3 	rbit	r1, r3
 8002486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800248e:	6019      	str	r1, [r3, #0]
  return result;
 8002490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002494:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0a0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x6a0>
 80024b6:	e08d      	b.n	80025d4 <HAL_RCC_OscConfig+0x87c>
 80024b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024c0:	2201      	movs	r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	fa93 f2a3 	rbit	r2, r3
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024da:	601a      	str	r2, [r3, #0]
  return result;
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024e4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b68      	ldr	r3, [pc, #416]	; (8002690 <HAL_RCC_OscConfig+0x938>)
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	461a      	mov	r2, r3
 80024f6:	2300      	movs	r3, #0
 80024f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7fe fa19 	bl	8000930 <HAL_GetTick>
 80024fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002502:	e00a      	b.n	800251a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002504:	f7fe fa14 	bl	8000930 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d902      	bls.n	800251a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	f000 bc55 	b.w	8002dc4 <HAL_RCC_OscConfig+0x106c>
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002522:	2202      	movs	r2, #2
 8002524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fa93 f2a3 	rbit	r2, r3
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002546:	2202      	movs	r2, #2
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	fa93 f2a3 	rbit	r2, r3
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800256a:	2202      	movs	r2, #2
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	fa93 f2a3 	rbit	r2, r3
 800257c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002580:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002584:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002586:	4b41      	ldr	r3, [pc, #260]	; (800268c <HAL_RCC_OscConfig+0x934>)
 8002588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800258a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002592:	2102      	movs	r1, #2
 8002594:	6019      	str	r1, [r3, #0]
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	fa93 f1a3 	rbit	r1, r3
 80025a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025ac:	6019      	str	r1, [r3, #0]
  return result;
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	2101      	movs	r1, #1
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d197      	bne.n	8002504 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 81a1 	beq.w	800292c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f0:	4b26      	ldr	r3, [pc, #152]	; (800268c <HAL_RCC_OscConfig+0x934>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d116      	bne.n	800262a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fc:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_RCC_OscConfig+0x934>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_RCC_OscConfig+0x934>)
 8002602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002606:	61d3      	str	r3, [r2, #28]
 8002608:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_RCC_OscConfig+0x934>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002622:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002624:	2301      	movs	r3, #1
 8002626:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <HAL_RCC_OscConfig+0x93c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11a      	bne.n	800266c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <HAL_RCC_OscConfig+0x93c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a16      	ldr	r2, [pc, #88]	; (8002694 <HAL_RCC_OscConfig+0x93c>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002640:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002642:	f7fe f975 	bl	8000930 <HAL_GetTick>
 8002646:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264a:	e009      	b.n	8002660 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe f970 	bl	8000930 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b64      	cmp	r3, #100	; 0x64
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e3b1      	b.n	8002dc4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <HAL_RCC_OscConfig+0x93c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ef      	beq.n	800264c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002670:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10d      	bne.n	8002698 <HAL_RCC_OscConfig+0x940>
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_RCC_OscConfig+0x934>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4a02      	ldr	r2, [pc, #8]	; (800268c <HAL_RCC_OscConfig+0x934>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6213      	str	r3, [r2, #32]
 8002688:	e03c      	b.n	8002704 <HAL_RCC_OscConfig+0x9ac>
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	10908120 	.word	0x10908120
 8002694:	40007000 	.word	0x40007000
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x96a>
 80026a8:	4bc1      	ldr	r3, [pc, #772]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4ac0      	ldr	r2, [pc, #768]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	6213      	str	r3, [r2, #32]
 80026b4:	4bbe      	ldr	r3, [pc, #760]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4abd      	ldr	r2, [pc, #756]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80026ba:	f023 0304 	bic.w	r3, r3, #4
 80026be:	6213      	str	r3, [r2, #32]
 80026c0:	e020      	b.n	8002704 <HAL_RCC_OscConfig+0x9ac>
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x994>
 80026d2:	4bb7      	ldr	r3, [pc, #732]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4ab6      	ldr	r2, [pc, #728]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6213      	str	r3, [r2, #32]
 80026de:	4bb4      	ldr	r3, [pc, #720]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4ab3      	ldr	r2, [pc, #716]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6213      	str	r3, [r2, #32]
 80026ea:	e00b      	b.n	8002704 <HAL_RCC_OscConfig+0x9ac>
 80026ec:	4bb0      	ldr	r3, [pc, #704]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	4aaf      	ldr	r2, [pc, #700]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80026f2:	f023 0301 	bic.w	r3, r3, #1
 80026f6:	6213      	str	r3, [r2, #32]
 80026f8:	4bad      	ldr	r3, [pc, #692]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4aac      	ldr	r2, [pc, #688]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80026fe:	f023 0304 	bic.w	r3, r3, #4
 8002702:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002708:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8081 	beq.w	8002818 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002716:	f7fe f90b 	bl	8000930 <HAL_GetTick>
 800271a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002720:	f7fe f906 	bl	8000930 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e345      	b.n	8002dc4 <HAL_RCC_OscConfig+0x106c>
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002740:	2202      	movs	r2, #2
 8002742:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	fa93 f2a3 	rbit	r2, r3
 8002752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002756:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002764:	2202      	movs	r2, #2
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	fa93 f2a3 	rbit	r2, r3
 8002776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800277e:	601a      	str	r2, [r3, #0]
  return result;
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002788:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d102      	bne.n	80027a4 <HAL_RCC_OscConfig+0xa4c>
 800279e:	4b84      	ldr	r3, [pc, #528]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	e013      	b.n	80027cc <HAL_RCC_OscConfig+0xa74>
 80027a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027ac:	2202      	movs	r2, #2
 80027ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fa93 f2a3 	rbit	r2, r3
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	4b79      	ldr	r3, [pc, #484]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027d0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027d4:	2102      	movs	r1, #2
 80027d6:	6011      	str	r1, [r2, #0]
 80027d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	fa92 f1a2 	rbit	r1, r2
 80027e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027ee:	6011      	str	r1, [r2, #0]
  return result;
 80027f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027f4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	fab2 f282 	clz	r2, r2
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	f002 021f 	and.w	r2, r2, #31
 800280a:	2101      	movs	r1, #1
 800280c:	fa01 f202 	lsl.w	r2, r1, r2
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d084      	beq.n	8002720 <HAL_RCC_OscConfig+0x9c8>
 8002816:	e07f      	b.n	8002918 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002818:	f7fe f88a 	bl	8000930 <HAL_GetTick>
 800281c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002820:	e00b      	b.n	800283a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe f885 	bl	8000930 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e2c4      	b.n	8002dc4 <HAL_RCC_OscConfig+0x106c>
 800283a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002842:	2202      	movs	r2, #2
 8002844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	fa93 f2a3 	rbit	r2, r3
 8002854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002858:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002866:	2202      	movs	r2, #2
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	fa93 f2a3 	rbit	r2, r3
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002880:	601a      	str	r2, [r3, #0]
  return result;
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800288a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f043 0302 	orr.w	r3, r3, #2
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d102      	bne.n	80028a6 <HAL_RCC_OscConfig+0xb4e>
 80028a0:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	e013      	b.n	80028ce <HAL_RCC_OscConfig+0xb76>
 80028a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028ae:	2202      	movs	r2, #2
 80028b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028d6:	2102      	movs	r1, #2
 80028d8:	6011      	str	r1, [r2, #0]
 80028da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	fa92 f1a2 	rbit	r1, r2
 80028e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028f0:	6011      	str	r1, [r2, #0]
  return result;
 80028f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028f6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	fab2 f282 	clz	r2, r2
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	f002 021f 	and.w	r2, r2, #31
 800290c:	2101      	movs	r1, #1
 800290e:	fa01 f202 	lsl.w	r2, r1, r2
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d184      	bne.n	8002822 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002918:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002920:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	4a22      	ldr	r2, [pc, #136]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 8002926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002930:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 8242 	beq.w	8002dc2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800293e:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <HAL_RCC_OscConfig+0xc58>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b08      	cmp	r3, #8
 8002948:	f000 8213 	beq.w	8002d72 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	2b02      	cmp	r3, #2
 800295a:	f040 8162 	bne.w	8002c22 <HAL_RCC_OscConfig+0xeca>
 800295e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002962:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002966:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800296a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002970:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f2a3 	rbit	r2, r3
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002982:	601a      	str	r2, [r3, #0]
  return result;
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800298c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002998:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	461a      	mov	r2, r3
 80029a0:	2300      	movs	r3, #0
 80029a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fd ffc4 	bl	8000930 <HAL_GetTick>
 80029a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ac:	e00c      	b.n	80029c8 <HAL_RCC_OscConfig+0xc70>
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fd ffbc 	bl	8000930 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e1fd      	b.n	8002dc4 <HAL_RCC_OscConfig+0x106c>
 80029c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	fa93 f2a3 	rbit	r2, r3
 80029e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029ec:	601a      	str	r2, [r3, #0]
  return result;
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f8:	fab3 f383 	clz	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d102      	bne.n	8002a12 <HAL_RCC_OscConfig+0xcba>
 8002a0c:	4bb0      	ldr	r3, [pc, #704]	; (8002cd0 <HAL_RCC_OscConfig+0xf78>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	e027      	b.n	8002a62 <HAL_RCC_OscConfig+0xd0a>
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	fa93 f2a3 	rbit	r2, r3
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	fa93 f2a3 	rbit	r2, r3
 8002a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a58:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	4b9c      	ldr	r3, [pc, #624]	; (8002cd0 <HAL_RCC_OscConfig+0xf78>)
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a66:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a6a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a6e:	6011      	str	r1, [r2, #0]
 8002a70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a74:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	fa92 f1a2 	rbit	r1, r2
 8002a7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a82:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a86:	6011      	str	r1, [r2, #0]
  return result;
 8002a88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a8c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	fab2 f282 	clz	r2, r2
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	f042 0220 	orr.w	r2, r2, #32
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	f002 021f 	and.w	r2, r2, #31
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d182      	bne.n	80029b4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aae:	4b88      	ldr	r3, [pc, #544]	; (8002cd0 <HAL_RCC_OscConfig+0xf78>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	497f      	ldr	r1, [pc, #508]	; (8002cd0 <HAL_RCC_OscConfig+0xf78>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
 8002ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ada:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ade:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	fa93 f2a3 	rbit	r2, r3
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002afa:	601a      	str	r2, [r3, #0]
  return result;
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b04:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	461a      	mov	r2, r3
 8002b18:	2301      	movs	r3, #1
 8002b1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fd ff08 	bl	8000930 <HAL_GetTick>
 8002b20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b24:	e009      	b.n	8002b3a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b26:	f7fd ff03 	bl	8000930 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e144      	b.n	8002dc4 <HAL_RCC_OscConfig+0x106c>
 8002b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	fa93 f2a3 	rbit	r2, r3
 8002b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b5e:	601a      	str	r2, [r3, #0]
  return result;
 8002b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b64:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d102      	bne.n	8002b84 <HAL_RCC_OscConfig+0xe2c>
 8002b7e:	4b54      	ldr	r3, [pc, #336]	; (8002cd0 <HAL_RCC_OscConfig+0xf78>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	e027      	b.n	8002bd4 <HAL_RCC_OscConfig+0xe7c>
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f2a3 	rbit	r2, r3
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bae:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	fa93 f2a3 	rbit	r2, r3
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	4b3f      	ldr	r3, [pc, #252]	; (8002cd0 <HAL_RCC_OscConfig+0xf78>)
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bd8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bdc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002be0:	6011      	str	r1, [r2, #0]
 8002be2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002be6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	fa92 f1a2 	rbit	r1, r2
 8002bf0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bf4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bf8:	6011      	str	r1, [r2, #0]
  return result;
 8002bfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bfe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	fab2 f282 	clz	r2, r2
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	f042 0220 	orr.w	r2, r2, #32
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	f002 021f 	and.w	r2, r2, #31
 8002c14:	2101      	movs	r1, #1
 8002c16:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d082      	beq.n	8002b26 <HAL_RCC_OscConfig+0xdce>
 8002c20:	e0cf      	b.n	8002dc2 <HAL_RCC_OscConfig+0x106a>
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fa93 f2a3 	rbit	r2, r3
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c46:	601a      	str	r2, [r3, #0]
  return result;
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c50:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	461a      	mov	r2, r3
 8002c64:	2300      	movs	r3, #0
 8002c66:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fd fe62 	bl	8000930 <HAL_GetTick>
 8002c6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c70:	e009      	b.n	8002c86 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c72:	f7fd fe5d 	bl	8000930 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e09e      	b.n	8002dc4 <HAL_RCC_OscConfig+0x106c>
 8002c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	fa93 f2a3 	rbit	r2, r3
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002caa:	601a      	str	r2, [r3, #0]
  return result;
 8002cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d104      	bne.n	8002cd4 <HAL_RCC_OscConfig+0xf7c>
 8002cca:	4b01      	ldr	r3, [pc, #4]	; (8002cd0 <HAL_RCC_OscConfig+0xf78>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	e029      	b.n	8002d24 <HAL_RCC_OscConfig+0xfcc>
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ce0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	fa93 f2a3 	rbit	r2, r3
 8002cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	fa93 f2a3 	rbit	r2, r3
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	4b2b      	ldr	r3, [pc, #172]	; (8002dd0 <HAL_RCC_OscConfig+0x1078>)
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d28:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d30:	6011      	str	r1, [r2, #0]
 8002d32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d36:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	fa92 f1a2 	rbit	r1, r2
 8002d40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d44:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d48:	6011      	str	r1, [r2, #0]
  return result;
 8002d4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d4e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	fab2 f282 	clz	r2, r2
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	f042 0220 	orr.w	r2, r2, #32
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	f002 021f 	and.w	r2, r2, #31
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d180      	bne.n	8002c72 <HAL_RCC_OscConfig+0xf1a>
 8002d70:	e027      	b.n	8002dc2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e01e      	b.n	8002dc4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d86:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <HAL_RCC_OscConfig+0x1078>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d92:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d10b      	bne.n	8002dbe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002da6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002daa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000

08002dd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b09e      	sub	sp, #120	; 0x78
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e162      	b.n	80030b2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dec:	4b90      	ldr	r3, [pc, #576]	; (8003030 <HAL_RCC_ClockConfig+0x25c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d910      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b8d      	ldr	r3, [pc, #564]	; (8003030 <HAL_RCC_ClockConfig+0x25c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 0207 	bic.w	r2, r3, #7
 8002e02:	498b      	ldr	r1, [pc, #556]	; (8003030 <HAL_RCC_ClockConfig+0x25c>)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b89      	ldr	r3, [pc, #548]	; (8003030 <HAL_RCC_ClockConfig+0x25c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e14a      	b.n	80030b2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e28:	4b82      	ldr	r3, [pc, #520]	; (8003034 <HAL_RCC_ClockConfig+0x260>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	497f      	ldr	r1, [pc, #508]	; (8003034 <HAL_RCC_ClockConfig+0x260>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 80dc 	beq.w	8003000 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d13c      	bne.n	8002eca <HAL_RCC_ClockConfig+0xf6>
 8002e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e54:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d102      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xa6>
 8002e74:	4b6f      	ldr	r3, [pc, #444]	; (8003034 <HAL_RCC_ClockConfig+0x260>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	e00f      	b.n	8002e9a <HAL_RCC_ClockConfig+0xc6>
 8002e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	667b      	str	r3, [r7, #100]	; 0x64
 8002e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e8c:	663b      	str	r3, [r7, #96]	; 0x60
 8002e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e96:	4b67      	ldr	r3, [pc, #412]	; (8003034 <HAL_RCC_ClockConfig+0x260>)
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ea0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ea2:	fa92 f2a2 	rbit	r2, r2
 8002ea6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ea8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002eaa:	fab2 f282 	clz	r2, r2
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	f042 0220 	orr.w	r2, r2, #32
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f002 021f 	and.w	r2, r2, #31
 8002eba:	2101      	movs	r1, #1
 8002ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d17b      	bne.n	8002fbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e0f3      	b.n	80030b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d13c      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x178>
 8002ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ed6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d102      	bne.n	8002efc <HAL_RCC_ClockConfig+0x128>
 8002ef6:	4b4f      	ldr	r3, [pc, #316]	; (8003034 <HAL_RCC_ClockConfig+0x260>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	e00f      	b.n	8002f1c <HAL_RCC_ClockConfig+0x148>
 8002efc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	647b      	str	r3, [r7, #68]	; 0x44
 8002f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f0e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f18:	4b46      	ldr	r3, [pc, #280]	; (8003034 <HAL_RCC_ClockConfig+0x260>)
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f20:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f24:	fa92 f2a2 	rbit	r2, r2
 8002f28:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f2c:	fab2 f282 	clz	r2, r2
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	f042 0220 	orr.w	r2, r2, #32
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f002 021f 	and.w	r2, r2, #31
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d13a      	bne.n	8002fbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0b2      	b.n	80030b2 <HAL_RCC_ClockConfig+0x2de>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d102      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x1a0>
 8002f6e:	4b31      	ldr	r3, [pc, #196]	; (8003034 <HAL_RCC_ClockConfig+0x260>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	e00d      	b.n	8002f90 <HAL_RCC_ClockConfig+0x1bc>
 8002f74:	2302      	movs	r3, #2
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f80:	2302      	movs	r3, #2
 8002f82:	623b      	str	r3, [r7, #32]
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	4b29      	ldr	r3, [pc, #164]	; (8003034 <HAL_RCC_ClockConfig+0x260>)
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	2202      	movs	r2, #2
 8002f92:	61ba      	str	r2, [r7, #24]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	fa92 f2a2 	rbit	r2, r2
 8002f9a:	617a      	str	r2, [r7, #20]
  return result;
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	fab2 f282 	clz	r2, r2
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	f042 0220 	orr.w	r2, r2, #32
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	f002 021f 	and.w	r2, r2, #31
 8002fae:	2101      	movs	r1, #1
 8002fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e079      	b.n	80030b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <HAL_RCC_ClockConfig+0x260>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f023 0203 	bic.w	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	491a      	ldr	r1, [pc, #104]	; (8003034 <HAL_RCC_ClockConfig+0x260>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd0:	f7fd fcae 	bl	8000930 <HAL_GetTick>
 8002fd4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7fd fcaa 	bl	8000930 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e061      	b.n	80030b2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_RCC_ClockConfig+0x260>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 020c 	and.w	r2, r3, #12
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d1eb      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_ClockConfig+0x25c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d214      	bcs.n	8003038 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_RCC_ClockConfig+0x25c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 0207 	bic.w	r2, r3, #7
 8003016:	4906      	ldr	r1, [pc, #24]	; (8003030 <HAL_RCC_ClockConfig+0x25c>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b04      	ldr	r3, [pc, #16]	; (8003030 <HAL_RCC_ClockConfig+0x25c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d005      	beq.n	8003038 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e040      	b.n	80030b2 <HAL_RCC_ClockConfig+0x2de>
 8003030:	40022000 	.word	0x40022000
 8003034:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003044:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_RCC_ClockConfig+0x2e8>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	491a      	ldr	r1, [pc, #104]	; (80030bc <HAL_RCC_ClockConfig+0x2e8>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003062:	4b16      	ldr	r3, [pc, #88]	; (80030bc <HAL_RCC_ClockConfig+0x2e8>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4912      	ldr	r1, [pc, #72]	; (80030bc <HAL_RCC_ClockConfig+0x2e8>)
 8003072:	4313      	orrs	r3, r2
 8003074:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003076:	f000 f829 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 800307a:	4601      	mov	r1, r0
 800307c:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <HAL_RCC_ClockConfig+0x2e8>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003084:	22f0      	movs	r2, #240	; 0xf0
 8003086:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	fa92 f2a2 	rbit	r2, r2
 800308e:	60fa      	str	r2, [r7, #12]
  return result;
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	fab2 f282 	clz	r2, r2
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	40d3      	lsrs	r3, r2
 800309a:	4a09      	ldr	r2, [pc, #36]	; (80030c0 <HAL_RCC_ClockConfig+0x2ec>)
 800309c:	5cd3      	ldrb	r3, [r2, r3]
 800309e:	fa21 f303 	lsr.w	r3, r1, r3
 80030a2:	4a08      	ldr	r2, [pc, #32]	; (80030c4 <HAL_RCC_ClockConfig+0x2f0>)
 80030a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_RCC_ClockConfig+0x2f4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd fbfc 	bl	80008a8 <HAL_InitTick>
  
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3778      	adds	r7, #120	; 0x78
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000
 80030c0:	0800459c 	.word	0x0800459c
 80030c4:	20000000 	.word	0x20000000
 80030c8:	20000004 	.word	0x20000004

080030cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b08b      	sub	sp, #44	; 0x2c
 80030d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80030e6:	4b29      	ldr	r3, [pc, #164]	; (800318c <HAL_RCC_GetSysClockFreq+0xc0>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d002      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x30>
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d003      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0x36>
 80030fa:	e03c      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030fc:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030fe:	623b      	str	r3, [r7, #32]
      break;
 8003100:	e03c      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003108:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800310c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	fa92 f2a2 	rbit	r2, r2
 8003114:	607a      	str	r2, [r7, #4]
  return result;
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	fab2 f282 	clz	r2, r2
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	40d3      	lsrs	r3, r2
 8003120:	4a1c      	ldr	r2, [pc, #112]	; (8003194 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003122:	5cd3      	ldrb	r3, [r2, r3]
 8003124:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003126:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	220f      	movs	r2, #15
 8003130:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	fa92 f2a2 	rbit	r2, r2
 8003138:	60fa      	str	r2, [r7, #12]
  return result;
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	fab2 f282 	clz	r2, r2
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	40d3      	lsrs	r3, r2
 8003144:	4a14      	ldr	r2, [pc, #80]	; (8003198 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003154:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	fbb2 f2f3 	udiv	r2, r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
 8003164:	e004      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	4a0c      	ldr	r2, [pc, #48]	; (800319c <HAL_RCC_GetSysClockFreq+0xd0>)
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	623b      	str	r3, [r7, #32]
      break;
 8003174:	e002      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003178:	623b      	str	r3, [r7, #32]
      break;
 800317a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317c:	6a3b      	ldr	r3, [r7, #32]
}
 800317e:	4618      	mov	r0, r3
 8003180:	372c      	adds	r7, #44	; 0x2c
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	007a1200 	.word	0x007a1200
 8003194:	080045b4 	.word	0x080045b4
 8003198:	080045c4 	.word	0x080045c4
 800319c:	003d0900 	.word	0x003d0900

080031a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a4:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000000 	.word	0x20000000

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031be:	f7ff ffef 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031c2:	4601      	mov	r1, r0
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80031d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	fa92 f2a2 	rbit	r2, r2
 80031d8:	603a      	str	r2, [r7, #0]
  return result;
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	fab2 f282 	clz	r2, r2
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	40d3      	lsrs	r3, r2
 80031e4:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80031e6:	5cd3      	ldrb	r3, [r2, r3]
 80031e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	080045ac 	.word	0x080045ac

080031fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003202:	f7ff ffcd 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 8003206:	4601      	mov	r1, r0
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003210:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003214:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	fa92 f2a2 	rbit	r2, r2
 800321c:	603a      	str	r2, [r7, #0]
  return result;
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	fab2 f282 	clz	r2, r2
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	40d3      	lsrs	r3, r2
 8003228:	4a04      	ldr	r2, [pc, #16]	; (800323c <HAL_RCC_GetPCLK2Freq+0x40>)
 800322a:	5cd3      	ldrb	r3, [r2, r3]
 800322c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	080045ac 	.word	0x080045ac

08003240 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b092      	sub	sp, #72	; 0x48
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003250:	2300      	movs	r3, #0
 8003252:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80cd 	beq.w	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003264:	4b8e      	ldr	r3, [pc, #568]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10e      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003270:	4b8b      	ldr	r3, [pc, #556]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	4a8a      	ldr	r2, [pc, #552]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327a:	61d3      	str	r3, [r2, #28]
 800327c:	4b88      	ldr	r3, [pc, #544]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	4b85      	ldr	r3, [pc, #532]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d118      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800329a:	4b82      	ldr	r3, [pc, #520]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a81      	ldr	r2, [pc, #516]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a6:	f7fd fb43 	bl	8000930 <HAL_GetTick>
 80032aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ac:	e008      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ae:	f7fd fb3f 	bl	8000930 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b64      	cmp	r3, #100	; 0x64
 80032ba:	d901      	bls.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0ea      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	4b78      	ldr	r3, [pc, #480]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032cc:	4b74      	ldr	r3, [pc, #464]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d07d      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d076      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032ea:	4b6d      	ldr	r3, [pc, #436]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032f8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	4b66      	ldr	r3, [pc, #408]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	461a      	mov	r2, r3
 8003314:	2301      	movs	r3, #1
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800331c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	4b5d      	ldr	r3, [pc, #372]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	461a      	mov	r2, r3
 8003338:	2300      	movs	r3, #0
 800333a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800333c:	4a58      	ldr	r2, [pc, #352]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003340:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d045      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fd faf0 	bl	8000930 <HAL_GetTick>
 8003350:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	e00a      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fd faec 	bl	8000930 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e095      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800336a:	2302      	movs	r3, #2
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	2302      	movs	r3, #2
 8003378:	623b      	str	r3, [r7, #32]
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	61fb      	str	r3, [r7, #28]
  return result;
 8003382:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f043 0302 	orr.w	r3, r3, #2
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d102      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003398:	4b41      	ldr	r3, [pc, #260]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	e007      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800339e:	2302      	movs	r3, #2
 80033a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	4b3d      	ldr	r3, [pc, #244]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	2202      	movs	r2, #2
 80033b0:	613a      	str	r2, [r7, #16]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	fa92 f2a2 	rbit	r2, r2
 80033b8:	60fa      	str	r2, [r7, #12]
  return result;
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	fab2 f282 	clz	r2, r2
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f002 021f 	and.w	r2, r2, #31
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f202 	lsl.w	r2, r1, r2
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0bd      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033d8:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	492e      	ldr	r1, [pc, #184]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d105      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f2:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	4a2a      	ldr	r2, [pc, #168]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033fc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800340a:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	4922      	ldr	r1, [pc, #136]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003418:	4313      	orrs	r3, r2
 800341a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003428:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	f023 0210 	bic.w	r2, r3, #16
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	491a      	ldr	r1, [pc, #104]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003436:	4313      	orrs	r3, r2
 8003438:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003446:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	4913      	ldr	r1, [pc, #76]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003454:	4313      	orrs	r3, r2
 8003456:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003464:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	490b      	ldr	r1, [pc, #44]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003472:	4313      	orrs	r3, r2
 8003474:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d008      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	4904      	ldr	r1, [pc, #16]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003490:	4313      	orrs	r3, r2
 8003492:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3748      	adds	r7, #72	; 0x48
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40007000 	.word	0x40007000
 80034a8:	10908100 	.word	0x10908100

080034ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e040      	b.n	8003540 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd f8f6 	bl	80006c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2224      	movs	r2, #36	; 0x24
 80034d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0201 	bic.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f8c0 	bl	8003670 <UART_SetConfig>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e022      	b.n	8003540 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f9ea 	bl	80038dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003526:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fa71 	bl	8003a20 <UART_CheckIdleState>
 800353e:	4603      	mov	r3, r0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800355c:	2b20      	cmp	r3, #32
 800355e:	f040 8082 	bne.w	8003666 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <HAL_UART_Transmit+0x26>
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e07a      	b.n	8003668 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_UART_Transmit+0x38>
 800357c:	2302      	movs	r3, #2
 800357e:	e073      	b.n	8003668 <HAL_UART_Transmit+0x120>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2221      	movs	r2, #33	; 0x21
 8003594:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003596:	f7fd f9cb 	bl	8000930 <HAL_GetTick>
 800359a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b4:	d108      	bne.n	80035c8 <HAL_UART_Transmit+0x80>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	e003      	b.n	80035d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80035d8:	e02d      	b.n	8003636 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2200      	movs	r2, #0
 80035e2:	2180      	movs	r1, #128	; 0x80
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fa64 	bl	8003ab2 <UART_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e039      	b.n	8003668 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	881a      	ldrh	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003606:	b292      	uxth	r2, r2
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	3302      	adds	r3, #2
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	e008      	b.n	8003624 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	b292      	uxth	r2, r2
 800361c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3301      	adds	r3, #1
 8003622:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1cb      	bne.n	80035da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2200      	movs	r2, #0
 800364a:	2140      	movs	r1, #64	; 0x40
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 fa30 	bl	8003ab2 <UART_WaitOnFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e005      	b.n	8003668 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	e000      	b.n	8003668 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003666:	2302      	movs	r3, #2
  }
}
 8003668:	4618      	mov	r0, r3
 800366a:	3720      	adds	r7, #32
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4b8a      	ldr	r3, [pc, #552]	; (80038c4 <UART_SetConfig+0x254>)
 800369c:	4013      	ands	r3, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	6979      	ldr	r1, [r7, #20]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	430a      	orrs	r2, r1
 80036e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a78      	ldr	r2, [pc, #480]	; (80038c8 <UART_SetConfig+0x258>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d120      	bne.n	800372e <UART_SetConfig+0xbe>
 80036ec:	4b77      	ldr	r3, [pc, #476]	; (80038cc <UART_SetConfig+0x25c>)
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d817      	bhi.n	8003728 <UART_SetConfig+0xb8>
 80036f8:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <UART_SetConfig+0x90>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003711 	.word	0x08003711
 8003704:	0800371d 	.word	0x0800371d
 8003708:	08003723 	.word	0x08003723
 800370c:	08003717 	.word	0x08003717
 8003710:	2300      	movs	r3, #0
 8003712:	77fb      	strb	r3, [r7, #31]
 8003714:	e01d      	b.n	8003752 <UART_SetConfig+0xe2>
 8003716:	2302      	movs	r3, #2
 8003718:	77fb      	strb	r3, [r7, #31]
 800371a:	e01a      	b.n	8003752 <UART_SetConfig+0xe2>
 800371c:	2304      	movs	r3, #4
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e017      	b.n	8003752 <UART_SetConfig+0xe2>
 8003722:	2308      	movs	r3, #8
 8003724:	77fb      	strb	r3, [r7, #31]
 8003726:	e014      	b.n	8003752 <UART_SetConfig+0xe2>
 8003728:	2310      	movs	r3, #16
 800372a:	77fb      	strb	r3, [r7, #31]
 800372c:	e011      	b.n	8003752 <UART_SetConfig+0xe2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a67      	ldr	r2, [pc, #412]	; (80038d0 <UART_SetConfig+0x260>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d102      	bne.n	800373e <UART_SetConfig+0xce>
 8003738:	2300      	movs	r3, #0
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e009      	b.n	8003752 <UART_SetConfig+0xe2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a64      	ldr	r2, [pc, #400]	; (80038d4 <UART_SetConfig+0x264>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d102      	bne.n	800374e <UART_SetConfig+0xde>
 8003748:	2300      	movs	r3, #0
 800374a:	77fb      	strb	r3, [r7, #31]
 800374c:	e001      	b.n	8003752 <UART_SetConfig+0xe2>
 800374e:	2310      	movs	r3, #16
 8003750:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800375a:	d15b      	bne.n	8003814 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800375c:	7ffb      	ldrb	r3, [r7, #31]
 800375e:	2b08      	cmp	r3, #8
 8003760:	d827      	bhi.n	80037b2 <UART_SetConfig+0x142>
 8003762:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <UART_SetConfig+0xf8>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	0800378d 	.word	0x0800378d
 800376c:	08003795 	.word	0x08003795
 8003770:	0800379d 	.word	0x0800379d
 8003774:	080037b3 	.word	0x080037b3
 8003778:	080037a3 	.word	0x080037a3
 800377c:	080037b3 	.word	0x080037b3
 8003780:	080037b3 	.word	0x080037b3
 8003784:	080037b3 	.word	0x080037b3
 8003788:	080037ab 	.word	0x080037ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800378c:	f7ff fd14 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8003790:	61b8      	str	r0, [r7, #24]
        break;
 8003792:	e013      	b.n	80037bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003794:	f7ff fd32 	bl	80031fc <HAL_RCC_GetPCLK2Freq>
 8003798:	61b8      	str	r0, [r7, #24]
        break;
 800379a:	e00f      	b.n	80037bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800379c:	4b4e      	ldr	r3, [pc, #312]	; (80038d8 <UART_SetConfig+0x268>)
 800379e:	61bb      	str	r3, [r7, #24]
        break;
 80037a0:	e00c      	b.n	80037bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a2:	f7ff fc93 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 80037a6:	61b8      	str	r0, [r7, #24]
        break;
 80037a8:	e008      	b.n	80037bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ae:	61bb      	str	r3, [r7, #24]
        break;
 80037b0:	e004      	b.n	80037bc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	77bb      	strb	r3, [r7, #30]
        break;
 80037ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d074      	beq.n	80038ac <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	005a      	lsls	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	441a      	add	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b0f      	cmp	r3, #15
 80037de:	d916      	bls.n	800380e <UART_SetConfig+0x19e>
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e6:	d212      	bcs.n	800380e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	f023 030f 	bic.w	r3, r3, #15
 80037f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	085b      	lsrs	r3, r3, #1
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	89fb      	ldrh	r3, [r7, #14]
 8003800:	4313      	orrs	r3, r2
 8003802:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	89fa      	ldrh	r2, [r7, #14]
 800380a:	60da      	str	r2, [r3, #12]
 800380c:	e04e      	b.n	80038ac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	77bb      	strb	r3, [r7, #30]
 8003812:	e04b      	b.n	80038ac <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003814:	7ffb      	ldrb	r3, [r7, #31]
 8003816:	2b08      	cmp	r3, #8
 8003818:	d827      	bhi.n	800386a <UART_SetConfig+0x1fa>
 800381a:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <UART_SetConfig+0x1b0>)
 800381c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003820:	08003845 	.word	0x08003845
 8003824:	0800384d 	.word	0x0800384d
 8003828:	08003855 	.word	0x08003855
 800382c:	0800386b 	.word	0x0800386b
 8003830:	0800385b 	.word	0x0800385b
 8003834:	0800386b 	.word	0x0800386b
 8003838:	0800386b 	.word	0x0800386b
 800383c:	0800386b 	.word	0x0800386b
 8003840:	08003863 	.word	0x08003863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003844:	f7ff fcb8 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8003848:	61b8      	str	r0, [r7, #24]
        break;
 800384a:	e013      	b.n	8003874 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800384c:	f7ff fcd6 	bl	80031fc <HAL_RCC_GetPCLK2Freq>
 8003850:	61b8      	str	r0, [r7, #24]
        break;
 8003852:	e00f      	b.n	8003874 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003854:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <UART_SetConfig+0x268>)
 8003856:	61bb      	str	r3, [r7, #24]
        break;
 8003858:	e00c      	b.n	8003874 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800385a:	f7ff fc37 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 800385e:	61b8      	str	r0, [r7, #24]
        break;
 8003860:	e008      	b.n	8003874 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003866:	61bb      	str	r3, [r7, #24]
        break;
 8003868:	e004      	b.n	8003874 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	77bb      	strb	r3, [r7, #30]
        break;
 8003872:	bf00      	nop
    }

    if (pclk != 0U)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d018      	beq.n	80038ac <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	085a      	lsrs	r2, r3, #1
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	441a      	add	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	b29b      	uxth	r3, r3
 800388e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2b0f      	cmp	r3, #15
 8003894:	d908      	bls.n	80038a8 <UART_SetConfig+0x238>
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389c:	d204      	bcs.n	80038a8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	60da      	str	r2, [r3, #12]
 80038a6:	e001      	b.n	80038ac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3720      	adds	r7, #32
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	efff69f3 	.word	0xefff69f3
 80038c8:	40013800 	.word	0x40013800
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40004400 	.word	0x40004400
 80038d4:	40004800 	.word	0x40004800
 80038d8:	007a1200 	.word	0x007a1200

080038dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01a      	beq.n	80039f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039da:	d10a      	bne.n	80039f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a30:	f7fc ff7e 	bl	8000930 <HAL_GetTick>
 8003a34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d10e      	bne.n	8003a62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f82d 	bl	8003ab2 <UART_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e023      	b.n	8003aaa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d10e      	bne.n	8003a8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f817 	bl	8003ab2 <UART_WaitOnFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e00d      	b.n	8003aaa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b09c      	sub	sp, #112	; 0x70
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac2:	e0a5      	b.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aca:	f000 80a1 	beq.w	8003c10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ace:	f7fc ff2f 	bl	8000930 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d13e      	bne.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003af8:	667b      	str	r3, [r7, #100]	; 0x64
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b04:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b0a:	e841 2300 	strex	r3, r2, [r1]
 8003b0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1e6      	bne.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3308      	adds	r3, #8
 8003b34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b36:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e5      	bne.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e067      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d04f      	beq.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b7e:	d147      	bne.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8003baa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e6      	bne.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	613b      	str	r3, [r7, #16]
   return(result);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3308      	adds	r3, #8
 8003bda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003bdc:	623a      	str	r2, [r7, #32]
 8003bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	69f9      	ldr	r1, [r7, #28]
 8003be2:	6a3a      	ldr	r2, [r7, #32]
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e5      	bne.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e010      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	f43f af4a 	beq.w	8003ac4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3770      	adds	r7, #112	; 0x70
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <__errno>:
 8003c3c:	4b01      	ldr	r3, [pc, #4]	; (8003c44 <__errno+0x8>)
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	2000000c 	.word	0x2000000c

08003c48 <__libc_init_array>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	4d0d      	ldr	r5, [pc, #52]	; (8003c80 <__libc_init_array+0x38>)
 8003c4c:	4c0d      	ldr	r4, [pc, #52]	; (8003c84 <__libc_init_array+0x3c>)
 8003c4e:	1b64      	subs	r4, r4, r5
 8003c50:	10a4      	asrs	r4, r4, #2
 8003c52:	2600      	movs	r6, #0
 8003c54:	42a6      	cmp	r6, r4
 8003c56:	d109      	bne.n	8003c6c <__libc_init_array+0x24>
 8003c58:	4d0b      	ldr	r5, [pc, #44]	; (8003c88 <__libc_init_array+0x40>)
 8003c5a:	4c0c      	ldr	r4, [pc, #48]	; (8003c8c <__libc_init_array+0x44>)
 8003c5c:	f000 fc8e 	bl	800457c <_init>
 8003c60:	1b64      	subs	r4, r4, r5
 8003c62:	10a4      	asrs	r4, r4, #2
 8003c64:	2600      	movs	r6, #0
 8003c66:	42a6      	cmp	r6, r4
 8003c68:	d105      	bne.n	8003c76 <__libc_init_array+0x2e>
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c70:	4798      	blx	r3
 8003c72:	3601      	adds	r6, #1
 8003c74:	e7ee      	b.n	8003c54 <__libc_init_array+0xc>
 8003c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7a:	4798      	blx	r3
 8003c7c:	3601      	adds	r6, #1
 8003c7e:	e7f2      	b.n	8003c66 <__libc_init_array+0x1e>
 8003c80:	08004608 	.word	0x08004608
 8003c84:	08004608 	.word	0x08004608
 8003c88:	08004608 	.word	0x08004608
 8003c8c:	0800460c 	.word	0x0800460c

08003c90 <memset>:
 8003c90:	4402      	add	r2, r0
 8003c92:	4603      	mov	r3, r0
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d100      	bne.n	8003c9a <memset+0xa>
 8003c98:	4770      	bx	lr
 8003c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c9e:	e7f9      	b.n	8003c94 <memset+0x4>

08003ca0 <siprintf>:
 8003ca0:	b40e      	push	{r1, r2, r3}
 8003ca2:	b500      	push	{lr}
 8003ca4:	b09c      	sub	sp, #112	; 0x70
 8003ca6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ca8:	9002      	str	r0, [sp, #8]
 8003caa:	9006      	str	r0, [sp, #24]
 8003cac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cb0:	4809      	ldr	r0, [pc, #36]	; (8003cd8 <siprintf+0x38>)
 8003cb2:	9107      	str	r1, [sp, #28]
 8003cb4:	9104      	str	r1, [sp, #16]
 8003cb6:	4909      	ldr	r1, [pc, #36]	; (8003cdc <siprintf+0x3c>)
 8003cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cbc:	9105      	str	r1, [sp, #20]
 8003cbe:	6800      	ldr	r0, [r0, #0]
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	a902      	add	r1, sp, #8
 8003cc4:	f000 f868 	bl	8003d98 <_svfiprintf_r>
 8003cc8:	9b02      	ldr	r3, [sp, #8]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	b01c      	add	sp, #112	; 0x70
 8003cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cd4:	b003      	add	sp, #12
 8003cd6:	4770      	bx	lr
 8003cd8:	2000000c 	.word	0x2000000c
 8003cdc:	ffff0208 	.word	0xffff0208

08003ce0 <__ssputs_r>:
 8003ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce4:	688e      	ldr	r6, [r1, #8]
 8003ce6:	429e      	cmp	r6, r3
 8003ce8:	4682      	mov	sl, r0
 8003cea:	460c      	mov	r4, r1
 8003cec:	4690      	mov	r8, r2
 8003cee:	461f      	mov	r7, r3
 8003cf0:	d838      	bhi.n	8003d64 <__ssputs_r+0x84>
 8003cf2:	898a      	ldrh	r2, [r1, #12]
 8003cf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cf8:	d032      	beq.n	8003d60 <__ssputs_r+0x80>
 8003cfa:	6825      	ldr	r5, [r4, #0]
 8003cfc:	6909      	ldr	r1, [r1, #16]
 8003cfe:	eba5 0901 	sub.w	r9, r5, r1
 8003d02:	6965      	ldr	r5, [r4, #20]
 8003d04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	444b      	add	r3, r9
 8003d10:	106d      	asrs	r5, r5, #1
 8003d12:	429d      	cmp	r5, r3
 8003d14:	bf38      	it	cc
 8003d16:	461d      	movcc	r5, r3
 8003d18:	0553      	lsls	r3, r2, #21
 8003d1a:	d531      	bpl.n	8003d80 <__ssputs_r+0xa0>
 8003d1c:	4629      	mov	r1, r5
 8003d1e:	f000 fb63 	bl	80043e8 <_malloc_r>
 8003d22:	4606      	mov	r6, r0
 8003d24:	b950      	cbnz	r0, 8003d3c <__ssputs_r+0x5c>
 8003d26:	230c      	movs	r3, #12
 8003d28:	f8ca 3000 	str.w	r3, [sl]
 8003d2c:	89a3      	ldrh	r3, [r4, #12]
 8003d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d32:	81a3      	strh	r3, [r4, #12]
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295
 8003d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d3c:	6921      	ldr	r1, [r4, #16]
 8003d3e:	464a      	mov	r2, r9
 8003d40:	f000 fabe 	bl	80042c0 <memcpy>
 8003d44:	89a3      	ldrh	r3, [r4, #12]
 8003d46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4e:	81a3      	strh	r3, [r4, #12]
 8003d50:	6126      	str	r6, [r4, #16]
 8003d52:	6165      	str	r5, [r4, #20]
 8003d54:	444e      	add	r6, r9
 8003d56:	eba5 0509 	sub.w	r5, r5, r9
 8003d5a:	6026      	str	r6, [r4, #0]
 8003d5c:	60a5      	str	r5, [r4, #8]
 8003d5e:	463e      	mov	r6, r7
 8003d60:	42be      	cmp	r6, r7
 8003d62:	d900      	bls.n	8003d66 <__ssputs_r+0x86>
 8003d64:	463e      	mov	r6, r7
 8003d66:	6820      	ldr	r0, [r4, #0]
 8003d68:	4632      	mov	r2, r6
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	f000 fab6 	bl	80042dc <memmove>
 8003d70:	68a3      	ldr	r3, [r4, #8]
 8003d72:	1b9b      	subs	r3, r3, r6
 8003d74:	60a3      	str	r3, [r4, #8]
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	4433      	add	r3, r6
 8003d7a:	6023      	str	r3, [r4, #0]
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	e7db      	b.n	8003d38 <__ssputs_r+0x58>
 8003d80:	462a      	mov	r2, r5
 8003d82:	f000 fba5 	bl	80044d0 <_realloc_r>
 8003d86:	4606      	mov	r6, r0
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d1e1      	bne.n	8003d50 <__ssputs_r+0x70>
 8003d8c:	6921      	ldr	r1, [r4, #16]
 8003d8e:	4650      	mov	r0, sl
 8003d90:	f000 fabe 	bl	8004310 <_free_r>
 8003d94:	e7c7      	b.n	8003d26 <__ssputs_r+0x46>
	...

08003d98 <_svfiprintf_r>:
 8003d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9c:	4698      	mov	r8, r3
 8003d9e:	898b      	ldrh	r3, [r1, #12]
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	b09d      	sub	sp, #116	; 0x74
 8003da4:	4607      	mov	r7, r0
 8003da6:	460d      	mov	r5, r1
 8003da8:	4614      	mov	r4, r2
 8003daa:	d50e      	bpl.n	8003dca <_svfiprintf_r+0x32>
 8003dac:	690b      	ldr	r3, [r1, #16]
 8003dae:	b963      	cbnz	r3, 8003dca <_svfiprintf_r+0x32>
 8003db0:	2140      	movs	r1, #64	; 0x40
 8003db2:	f000 fb19 	bl	80043e8 <_malloc_r>
 8003db6:	6028      	str	r0, [r5, #0]
 8003db8:	6128      	str	r0, [r5, #16]
 8003dba:	b920      	cbnz	r0, 8003dc6 <_svfiprintf_r+0x2e>
 8003dbc:	230c      	movs	r3, #12
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc4:	e0d1      	b.n	8003f6a <_svfiprintf_r+0x1d2>
 8003dc6:	2340      	movs	r3, #64	; 0x40
 8003dc8:	616b      	str	r3, [r5, #20]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dce:	2320      	movs	r3, #32
 8003dd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dd8:	2330      	movs	r3, #48	; 0x30
 8003dda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f84 <_svfiprintf_r+0x1ec>
 8003dde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003de2:	f04f 0901 	mov.w	r9, #1
 8003de6:	4623      	mov	r3, r4
 8003de8:	469a      	mov	sl, r3
 8003dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dee:	b10a      	cbz	r2, 8003df4 <_svfiprintf_r+0x5c>
 8003df0:	2a25      	cmp	r2, #37	; 0x25
 8003df2:	d1f9      	bne.n	8003de8 <_svfiprintf_r+0x50>
 8003df4:	ebba 0b04 	subs.w	fp, sl, r4
 8003df8:	d00b      	beq.n	8003e12 <_svfiprintf_r+0x7a>
 8003dfa:	465b      	mov	r3, fp
 8003dfc:	4622      	mov	r2, r4
 8003dfe:	4629      	mov	r1, r5
 8003e00:	4638      	mov	r0, r7
 8003e02:	f7ff ff6d 	bl	8003ce0 <__ssputs_r>
 8003e06:	3001      	adds	r0, #1
 8003e08:	f000 80aa 	beq.w	8003f60 <_svfiprintf_r+0x1c8>
 8003e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e0e:	445a      	add	r2, fp
 8003e10:	9209      	str	r2, [sp, #36]	; 0x24
 8003e12:	f89a 3000 	ldrb.w	r3, [sl]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80a2 	beq.w	8003f60 <_svfiprintf_r+0x1c8>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e26:	f10a 0a01 	add.w	sl, sl, #1
 8003e2a:	9304      	str	r3, [sp, #16]
 8003e2c:	9307      	str	r3, [sp, #28]
 8003e2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e32:	931a      	str	r3, [sp, #104]	; 0x68
 8003e34:	4654      	mov	r4, sl
 8003e36:	2205      	movs	r2, #5
 8003e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e3c:	4851      	ldr	r0, [pc, #324]	; (8003f84 <_svfiprintf_r+0x1ec>)
 8003e3e:	f7fc f9cf 	bl	80001e0 <memchr>
 8003e42:	9a04      	ldr	r2, [sp, #16]
 8003e44:	b9d8      	cbnz	r0, 8003e7e <_svfiprintf_r+0xe6>
 8003e46:	06d0      	lsls	r0, r2, #27
 8003e48:	bf44      	itt	mi
 8003e4a:	2320      	movmi	r3, #32
 8003e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e50:	0711      	lsls	r1, r2, #28
 8003e52:	bf44      	itt	mi
 8003e54:	232b      	movmi	r3, #43	; 0x2b
 8003e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e60:	d015      	beq.n	8003e8e <_svfiprintf_r+0xf6>
 8003e62:	9a07      	ldr	r2, [sp, #28]
 8003e64:	4654      	mov	r4, sl
 8003e66:	2000      	movs	r0, #0
 8003e68:	f04f 0c0a 	mov.w	ip, #10
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e72:	3b30      	subs	r3, #48	; 0x30
 8003e74:	2b09      	cmp	r3, #9
 8003e76:	d94e      	bls.n	8003f16 <_svfiprintf_r+0x17e>
 8003e78:	b1b0      	cbz	r0, 8003ea8 <_svfiprintf_r+0x110>
 8003e7a:	9207      	str	r2, [sp, #28]
 8003e7c:	e014      	b.n	8003ea8 <_svfiprintf_r+0x110>
 8003e7e:	eba0 0308 	sub.w	r3, r0, r8
 8003e82:	fa09 f303 	lsl.w	r3, r9, r3
 8003e86:	4313      	orrs	r3, r2
 8003e88:	9304      	str	r3, [sp, #16]
 8003e8a:	46a2      	mov	sl, r4
 8003e8c:	e7d2      	b.n	8003e34 <_svfiprintf_r+0x9c>
 8003e8e:	9b03      	ldr	r3, [sp, #12]
 8003e90:	1d19      	adds	r1, r3, #4
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	9103      	str	r1, [sp, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bfbb      	ittet	lt
 8003e9a:	425b      	neglt	r3, r3
 8003e9c:	f042 0202 	orrlt.w	r2, r2, #2
 8003ea0:	9307      	strge	r3, [sp, #28]
 8003ea2:	9307      	strlt	r3, [sp, #28]
 8003ea4:	bfb8      	it	lt
 8003ea6:	9204      	strlt	r2, [sp, #16]
 8003ea8:	7823      	ldrb	r3, [r4, #0]
 8003eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8003eac:	d10c      	bne.n	8003ec8 <_svfiprintf_r+0x130>
 8003eae:	7863      	ldrb	r3, [r4, #1]
 8003eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb2:	d135      	bne.n	8003f20 <_svfiprintf_r+0x188>
 8003eb4:	9b03      	ldr	r3, [sp, #12]
 8003eb6:	1d1a      	adds	r2, r3, #4
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	9203      	str	r2, [sp, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bfb8      	it	lt
 8003ec0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ec4:	3402      	adds	r4, #2
 8003ec6:	9305      	str	r3, [sp, #20]
 8003ec8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f94 <_svfiprintf_r+0x1fc>
 8003ecc:	7821      	ldrb	r1, [r4, #0]
 8003ece:	2203      	movs	r2, #3
 8003ed0:	4650      	mov	r0, sl
 8003ed2:	f7fc f985 	bl	80001e0 <memchr>
 8003ed6:	b140      	cbz	r0, 8003eea <_svfiprintf_r+0x152>
 8003ed8:	2340      	movs	r3, #64	; 0x40
 8003eda:	eba0 000a 	sub.w	r0, r0, sl
 8003ede:	fa03 f000 	lsl.w	r0, r3, r0
 8003ee2:	9b04      	ldr	r3, [sp, #16]
 8003ee4:	4303      	orrs	r3, r0
 8003ee6:	3401      	adds	r4, #1
 8003ee8:	9304      	str	r3, [sp, #16]
 8003eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eee:	4826      	ldr	r0, [pc, #152]	; (8003f88 <_svfiprintf_r+0x1f0>)
 8003ef0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ef4:	2206      	movs	r2, #6
 8003ef6:	f7fc f973 	bl	80001e0 <memchr>
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d038      	beq.n	8003f70 <_svfiprintf_r+0x1d8>
 8003efe:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <_svfiprintf_r+0x1f4>)
 8003f00:	bb1b      	cbnz	r3, 8003f4a <_svfiprintf_r+0x1b2>
 8003f02:	9b03      	ldr	r3, [sp, #12]
 8003f04:	3307      	adds	r3, #7
 8003f06:	f023 0307 	bic.w	r3, r3, #7
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	9303      	str	r3, [sp, #12]
 8003f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f10:	4433      	add	r3, r6
 8003f12:	9309      	str	r3, [sp, #36]	; 0x24
 8003f14:	e767      	b.n	8003de6 <_svfiprintf_r+0x4e>
 8003f16:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	e7a5      	b.n	8003e6c <_svfiprintf_r+0xd4>
 8003f20:	2300      	movs	r3, #0
 8003f22:	3401      	adds	r4, #1
 8003f24:	9305      	str	r3, [sp, #20]
 8003f26:	4619      	mov	r1, r3
 8003f28:	f04f 0c0a 	mov.w	ip, #10
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f32:	3a30      	subs	r2, #48	; 0x30
 8003f34:	2a09      	cmp	r2, #9
 8003f36:	d903      	bls.n	8003f40 <_svfiprintf_r+0x1a8>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0c5      	beq.n	8003ec8 <_svfiprintf_r+0x130>
 8003f3c:	9105      	str	r1, [sp, #20]
 8003f3e:	e7c3      	b.n	8003ec8 <_svfiprintf_r+0x130>
 8003f40:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f44:	4604      	mov	r4, r0
 8003f46:	2301      	movs	r3, #1
 8003f48:	e7f0      	b.n	8003f2c <_svfiprintf_r+0x194>
 8003f4a:	ab03      	add	r3, sp, #12
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	462a      	mov	r2, r5
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <_svfiprintf_r+0x1f8>)
 8003f52:	a904      	add	r1, sp, #16
 8003f54:	4638      	mov	r0, r7
 8003f56:	f3af 8000 	nop.w
 8003f5a:	1c42      	adds	r2, r0, #1
 8003f5c:	4606      	mov	r6, r0
 8003f5e:	d1d6      	bne.n	8003f0e <_svfiprintf_r+0x176>
 8003f60:	89ab      	ldrh	r3, [r5, #12]
 8003f62:	065b      	lsls	r3, r3, #25
 8003f64:	f53f af2c 	bmi.w	8003dc0 <_svfiprintf_r+0x28>
 8003f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f6a:	b01d      	add	sp, #116	; 0x74
 8003f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f70:	ab03      	add	r3, sp, #12
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	462a      	mov	r2, r5
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <_svfiprintf_r+0x1f8>)
 8003f78:	a904      	add	r1, sp, #16
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	f000 f87a 	bl	8004074 <_printf_i>
 8003f80:	e7eb      	b.n	8003f5a <_svfiprintf_r+0x1c2>
 8003f82:	bf00      	nop
 8003f84:	080045d4 	.word	0x080045d4
 8003f88:	080045de 	.word	0x080045de
 8003f8c:	00000000 	.word	0x00000000
 8003f90:	08003ce1 	.word	0x08003ce1
 8003f94:	080045da 	.word	0x080045da

08003f98 <_printf_common>:
 8003f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f9c:	4616      	mov	r6, r2
 8003f9e:	4699      	mov	r9, r3
 8003fa0:	688a      	ldr	r2, [r1, #8]
 8003fa2:	690b      	ldr	r3, [r1, #16]
 8003fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	bfb8      	it	lt
 8003fac:	4613      	movlt	r3, r2
 8003fae:	6033      	str	r3, [r6, #0]
 8003fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fb4:	4607      	mov	r7, r0
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	b10a      	cbz	r2, 8003fbe <_printf_common+0x26>
 8003fba:	3301      	adds	r3, #1
 8003fbc:	6033      	str	r3, [r6, #0]
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	0699      	lsls	r1, r3, #26
 8003fc2:	bf42      	ittt	mi
 8003fc4:	6833      	ldrmi	r3, [r6, #0]
 8003fc6:	3302      	addmi	r3, #2
 8003fc8:	6033      	strmi	r3, [r6, #0]
 8003fca:	6825      	ldr	r5, [r4, #0]
 8003fcc:	f015 0506 	ands.w	r5, r5, #6
 8003fd0:	d106      	bne.n	8003fe0 <_printf_common+0x48>
 8003fd2:	f104 0a19 	add.w	sl, r4, #25
 8003fd6:	68e3      	ldr	r3, [r4, #12]
 8003fd8:	6832      	ldr	r2, [r6, #0]
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	42ab      	cmp	r3, r5
 8003fde:	dc26      	bgt.n	800402e <_printf_common+0x96>
 8003fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fe4:	1e13      	subs	r3, r2, #0
 8003fe6:	6822      	ldr	r2, [r4, #0]
 8003fe8:	bf18      	it	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	0692      	lsls	r2, r2, #26
 8003fee:	d42b      	bmi.n	8004048 <_printf_common+0xb0>
 8003ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	47c0      	blx	r8
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d01e      	beq.n	800403c <_printf_common+0xa4>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	68e5      	ldr	r5, [r4, #12]
 8004002:	6832      	ldr	r2, [r6, #0]
 8004004:	f003 0306 	and.w	r3, r3, #6
 8004008:	2b04      	cmp	r3, #4
 800400a:	bf08      	it	eq
 800400c:	1aad      	subeq	r5, r5, r2
 800400e:	68a3      	ldr	r3, [r4, #8]
 8004010:	6922      	ldr	r2, [r4, #16]
 8004012:	bf0c      	ite	eq
 8004014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004018:	2500      	movne	r5, #0
 800401a:	4293      	cmp	r3, r2
 800401c:	bfc4      	itt	gt
 800401e:	1a9b      	subgt	r3, r3, r2
 8004020:	18ed      	addgt	r5, r5, r3
 8004022:	2600      	movs	r6, #0
 8004024:	341a      	adds	r4, #26
 8004026:	42b5      	cmp	r5, r6
 8004028:	d11a      	bne.n	8004060 <_printf_common+0xc8>
 800402a:	2000      	movs	r0, #0
 800402c:	e008      	b.n	8004040 <_printf_common+0xa8>
 800402e:	2301      	movs	r3, #1
 8004030:	4652      	mov	r2, sl
 8004032:	4649      	mov	r1, r9
 8004034:	4638      	mov	r0, r7
 8004036:	47c0      	blx	r8
 8004038:	3001      	adds	r0, #1
 800403a:	d103      	bne.n	8004044 <_printf_common+0xac>
 800403c:	f04f 30ff 	mov.w	r0, #4294967295
 8004040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004044:	3501      	adds	r5, #1
 8004046:	e7c6      	b.n	8003fd6 <_printf_common+0x3e>
 8004048:	18e1      	adds	r1, r4, r3
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	2030      	movs	r0, #48	; 0x30
 800404e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004052:	4422      	add	r2, r4
 8004054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800405c:	3302      	adds	r3, #2
 800405e:	e7c7      	b.n	8003ff0 <_printf_common+0x58>
 8004060:	2301      	movs	r3, #1
 8004062:	4622      	mov	r2, r4
 8004064:	4649      	mov	r1, r9
 8004066:	4638      	mov	r0, r7
 8004068:	47c0      	blx	r8
 800406a:	3001      	adds	r0, #1
 800406c:	d0e6      	beq.n	800403c <_printf_common+0xa4>
 800406e:	3601      	adds	r6, #1
 8004070:	e7d9      	b.n	8004026 <_printf_common+0x8e>
	...

08004074 <_printf_i>:
 8004074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004078:	7e0f      	ldrb	r7, [r1, #24]
 800407a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800407c:	2f78      	cmp	r7, #120	; 0x78
 800407e:	4691      	mov	r9, r2
 8004080:	4680      	mov	r8, r0
 8004082:	460c      	mov	r4, r1
 8004084:	469a      	mov	sl, r3
 8004086:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800408a:	d807      	bhi.n	800409c <_printf_i+0x28>
 800408c:	2f62      	cmp	r7, #98	; 0x62
 800408e:	d80a      	bhi.n	80040a6 <_printf_i+0x32>
 8004090:	2f00      	cmp	r7, #0
 8004092:	f000 80d8 	beq.w	8004246 <_printf_i+0x1d2>
 8004096:	2f58      	cmp	r7, #88	; 0x58
 8004098:	f000 80a3 	beq.w	80041e2 <_printf_i+0x16e>
 800409c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040a4:	e03a      	b.n	800411c <_printf_i+0xa8>
 80040a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040aa:	2b15      	cmp	r3, #21
 80040ac:	d8f6      	bhi.n	800409c <_printf_i+0x28>
 80040ae:	a101      	add	r1, pc, #4	; (adr r1, 80040b4 <_printf_i+0x40>)
 80040b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040b4:	0800410d 	.word	0x0800410d
 80040b8:	08004121 	.word	0x08004121
 80040bc:	0800409d 	.word	0x0800409d
 80040c0:	0800409d 	.word	0x0800409d
 80040c4:	0800409d 	.word	0x0800409d
 80040c8:	0800409d 	.word	0x0800409d
 80040cc:	08004121 	.word	0x08004121
 80040d0:	0800409d 	.word	0x0800409d
 80040d4:	0800409d 	.word	0x0800409d
 80040d8:	0800409d 	.word	0x0800409d
 80040dc:	0800409d 	.word	0x0800409d
 80040e0:	0800422d 	.word	0x0800422d
 80040e4:	08004151 	.word	0x08004151
 80040e8:	0800420f 	.word	0x0800420f
 80040ec:	0800409d 	.word	0x0800409d
 80040f0:	0800409d 	.word	0x0800409d
 80040f4:	0800424f 	.word	0x0800424f
 80040f8:	0800409d 	.word	0x0800409d
 80040fc:	08004151 	.word	0x08004151
 8004100:	0800409d 	.word	0x0800409d
 8004104:	0800409d 	.word	0x0800409d
 8004108:	08004217 	.word	0x08004217
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	1d1a      	adds	r2, r3, #4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	602a      	str	r2, [r5, #0]
 8004114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800411c:	2301      	movs	r3, #1
 800411e:	e0a3      	b.n	8004268 <_printf_i+0x1f4>
 8004120:	6820      	ldr	r0, [r4, #0]
 8004122:	6829      	ldr	r1, [r5, #0]
 8004124:	0606      	lsls	r6, r0, #24
 8004126:	f101 0304 	add.w	r3, r1, #4
 800412a:	d50a      	bpl.n	8004142 <_printf_i+0xce>
 800412c:	680e      	ldr	r6, [r1, #0]
 800412e:	602b      	str	r3, [r5, #0]
 8004130:	2e00      	cmp	r6, #0
 8004132:	da03      	bge.n	800413c <_printf_i+0xc8>
 8004134:	232d      	movs	r3, #45	; 0x2d
 8004136:	4276      	negs	r6, r6
 8004138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800413c:	485e      	ldr	r0, [pc, #376]	; (80042b8 <_printf_i+0x244>)
 800413e:	230a      	movs	r3, #10
 8004140:	e019      	b.n	8004176 <_printf_i+0x102>
 8004142:	680e      	ldr	r6, [r1, #0]
 8004144:	602b      	str	r3, [r5, #0]
 8004146:	f010 0f40 	tst.w	r0, #64	; 0x40
 800414a:	bf18      	it	ne
 800414c:	b236      	sxthne	r6, r6
 800414e:	e7ef      	b.n	8004130 <_printf_i+0xbc>
 8004150:	682b      	ldr	r3, [r5, #0]
 8004152:	6820      	ldr	r0, [r4, #0]
 8004154:	1d19      	adds	r1, r3, #4
 8004156:	6029      	str	r1, [r5, #0]
 8004158:	0601      	lsls	r1, r0, #24
 800415a:	d501      	bpl.n	8004160 <_printf_i+0xec>
 800415c:	681e      	ldr	r6, [r3, #0]
 800415e:	e002      	b.n	8004166 <_printf_i+0xf2>
 8004160:	0646      	lsls	r6, r0, #25
 8004162:	d5fb      	bpl.n	800415c <_printf_i+0xe8>
 8004164:	881e      	ldrh	r6, [r3, #0]
 8004166:	4854      	ldr	r0, [pc, #336]	; (80042b8 <_printf_i+0x244>)
 8004168:	2f6f      	cmp	r7, #111	; 0x6f
 800416a:	bf0c      	ite	eq
 800416c:	2308      	moveq	r3, #8
 800416e:	230a      	movne	r3, #10
 8004170:	2100      	movs	r1, #0
 8004172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004176:	6865      	ldr	r5, [r4, #4]
 8004178:	60a5      	str	r5, [r4, #8]
 800417a:	2d00      	cmp	r5, #0
 800417c:	bfa2      	ittt	ge
 800417e:	6821      	ldrge	r1, [r4, #0]
 8004180:	f021 0104 	bicge.w	r1, r1, #4
 8004184:	6021      	strge	r1, [r4, #0]
 8004186:	b90e      	cbnz	r6, 800418c <_printf_i+0x118>
 8004188:	2d00      	cmp	r5, #0
 800418a:	d04d      	beq.n	8004228 <_printf_i+0x1b4>
 800418c:	4615      	mov	r5, r2
 800418e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004192:	fb03 6711 	mls	r7, r3, r1, r6
 8004196:	5dc7      	ldrb	r7, [r0, r7]
 8004198:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800419c:	4637      	mov	r7, r6
 800419e:	42bb      	cmp	r3, r7
 80041a0:	460e      	mov	r6, r1
 80041a2:	d9f4      	bls.n	800418e <_printf_i+0x11a>
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d10b      	bne.n	80041c0 <_printf_i+0x14c>
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	07de      	lsls	r6, r3, #31
 80041ac:	d508      	bpl.n	80041c0 <_printf_i+0x14c>
 80041ae:	6923      	ldr	r3, [r4, #16]
 80041b0:	6861      	ldr	r1, [r4, #4]
 80041b2:	4299      	cmp	r1, r3
 80041b4:	bfde      	ittt	le
 80041b6:	2330      	movle	r3, #48	; 0x30
 80041b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041c0:	1b52      	subs	r2, r2, r5
 80041c2:	6122      	str	r2, [r4, #16]
 80041c4:	f8cd a000 	str.w	sl, [sp]
 80041c8:	464b      	mov	r3, r9
 80041ca:	aa03      	add	r2, sp, #12
 80041cc:	4621      	mov	r1, r4
 80041ce:	4640      	mov	r0, r8
 80041d0:	f7ff fee2 	bl	8003f98 <_printf_common>
 80041d4:	3001      	adds	r0, #1
 80041d6:	d14c      	bne.n	8004272 <_printf_i+0x1fe>
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295
 80041dc:	b004      	add	sp, #16
 80041de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e2:	4835      	ldr	r0, [pc, #212]	; (80042b8 <_printf_i+0x244>)
 80041e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80041e8:	6829      	ldr	r1, [r5, #0]
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80041f0:	6029      	str	r1, [r5, #0]
 80041f2:	061d      	lsls	r5, r3, #24
 80041f4:	d514      	bpl.n	8004220 <_printf_i+0x1ac>
 80041f6:	07df      	lsls	r7, r3, #31
 80041f8:	bf44      	itt	mi
 80041fa:	f043 0320 	orrmi.w	r3, r3, #32
 80041fe:	6023      	strmi	r3, [r4, #0]
 8004200:	b91e      	cbnz	r6, 800420a <_printf_i+0x196>
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	f023 0320 	bic.w	r3, r3, #32
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	2310      	movs	r3, #16
 800420c:	e7b0      	b.n	8004170 <_printf_i+0xfc>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	f043 0320 	orr.w	r3, r3, #32
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	2378      	movs	r3, #120	; 0x78
 8004218:	4828      	ldr	r0, [pc, #160]	; (80042bc <_printf_i+0x248>)
 800421a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800421e:	e7e3      	b.n	80041e8 <_printf_i+0x174>
 8004220:	0659      	lsls	r1, r3, #25
 8004222:	bf48      	it	mi
 8004224:	b2b6      	uxthmi	r6, r6
 8004226:	e7e6      	b.n	80041f6 <_printf_i+0x182>
 8004228:	4615      	mov	r5, r2
 800422a:	e7bb      	b.n	80041a4 <_printf_i+0x130>
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	6826      	ldr	r6, [r4, #0]
 8004230:	6961      	ldr	r1, [r4, #20]
 8004232:	1d18      	adds	r0, r3, #4
 8004234:	6028      	str	r0, [r5, #0]
 8004236:	0635      	lsls	r5, r6, #24
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	d501      	bpl.n	8004240 <_printf_i+0x1cc>
 800423c:	6019      	str	r1, [r3, #0]
 800423e:	e002      	b.n	8004246 <_printf_i+0x1d2>
 8004240:	0670      	lsls	r0, r6, #25
 8004242:	d5fb      	bpl.n	800423c <_printf_i+0x1c8>
 8004244:	8019      	strh	r1, [r3, #0]
 8004246:	2300      	movs	r3, #0
 8004248:	6123      	str	r3, [r4, #16]
 800424a:	4615      	mov	r5, r2
 800424c:	e7ba      	b.n	80041c4 <_printf_i+0x150>
 800424e:	682b      	ldr	r3, [r5, #0]
 8004250:	1d1a      	adds	r2, r3, #4
 8004252:	602a      	str	r2, [r5, #0]
 8004254:	681d      	ldr	r5, [r3, #0]
 8004256:	6862      	ldr	r2, [r4, #4]
 8004258:	2100      	movs	r1, #0
 800425a:	4628      	mov	r0, r5
 800425c:	f7fb ffc0 	bl	80001e0 <memchr>
 8004260:	b108      	cbz	r0, 8004266 <_printf_i+0x1f2>
 8004262:	1b40      	subs	r0, r0, r5
 8004264:	6060      	str	r0, [r4, #4]
 8004266:	6863      	ldr	r3, [r4, #4]
 8004268:	6123      	str	r3, [r4, #16]
 800426a:	2300      	movs	r3, #0
 800426c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004270:	e7a8      	b.n	80041c4 <_printf_i+0x150>
 8004272:	6923      	ldr	r3, [r4, #16]
 8004274:	462a      	mov	r2, r5
 8004276:	4649      	mov	r1, r9
 8004278:	4640      	mov	r0, r8
 800427a:	47d0      	blx	sl
 800427c:	3001      	adds	r0, #1
 800427e:	d0ab      	beq.n	80041d8 <_printf_i+0x164>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	079b      	lsls	r3, r3, #30
 8004284:	d413      	bmi.n	80042ae <_printf_i+0x23a>
 8004286:	68e0      	ldr	r0, [r4, #12]
 8004288:	9b03      	ldr	r3, [sp, #12]
 800428a:	4298      	cmp	r0, r3
 800428c:	bfb8      	it	lt
 800428e:	4618      	movlt	r0, r3
 8004290:	e7a4      	b.n	80041dc <_printf_i+0x168>
 8004292:	2301      	movs	r3, #1
 8004294:	4632      	mov	r2, r6
 8004296:	4649      	mov	r1, r9
 8004298:	4640      	mov	r0, r8
 800429a:	47d0      	blx	sl
 800429c:	3001      	adds	r0, #1
 800429e:	d09b      	beq.n	80041d8 <_printf_i+0x164>
 80042a0:	3501      	adds	r5, #1
 80042a2:	68e3      	ldr	r3, [r4, #12]
 80042a4:	9903      	ldr	r1, [sp, #12]
 80042a6:	1a5b      	subs	r3, r3, r1
 80042a8:	42ab      	cmp	r3, r5
 80042aa:	dcf2      	bgt.n	8004292 <_printf_i+0x21e>
 80042ac:	e7eb      	b.n	8004286 <_printf_i+0x212>
 80042ae:	2500      	movs	r5, #0
 80042b0:	f104 0619 	add.w	r6, r4, #25
 80042b4:	e7f5      	b.n	80042a2 <_printf_i+0x22e>
 80042b6:	bf00      	nop
 80042b8:	080045e5 	.word	0x080045e5
 80042bc:	080045f6 	.word	0x080045f6

080042c0 <memcpy>:
 80042c0:	440a      	add	r2, r1
 80042c2:	4291      	cmp	r1, r2
 80042c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042c8:	d100      	bne.n	80042cc <memcpy+0xc>
 80042ca:	4770      	bx	lr
 80042cc:	b510      	push	{r4, lr}
 80042ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042d6:	4291      	cmp	r1, r2
 80042d8:	d1f9      	bne.n	80042ce <memcpy+0xe>
 80042da:	bd10      	pop	{r4, pc}

080042dc <memmove>:
 80042dc:	4288      	cmp	r0, r1
 80042de:	b510      	push	{r4, lr}
 80042e0:	eb01 0402 	add.w	r4, r1, r2
 80042e4:	d902      	bls.n	80042ec <memmove+0x10>
 80042e6:	4284      	cmp	r4, r0
 80042e8:	4623      	mov	r3, r4
 80042ea:	d807      	bhi.n	80042fc <memmove+0x20>
 80042ec:	1e43      	subs	r3, r0, #1
 80042ee:	42a1      	cmp	r1, r4
 80042f0:	d008      	beq.n	8004304 <memmove+0x28>
 80042f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042fa:	e7f8      	b.n	80042ee <memmove+0x12>
 80042fc:	4402      	add	r2, r0
 80042fe:	4601      	mov	r1, r0
 8004300:	428a      	cmp	r2, r1
 8004302:	d100      	bne.n	8004306 <memmove+0x2a>
 8004304:	bd10      	pop	{r4, pc}
 8004306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800430a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800430e:	e7f7      	b.n	8004300 <memmove+0x24>

08004310 <_free_r>:
 8004310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004312:	2900      	cmp	r1, #0
 8004314:	d044      	beq.n	80043a0 <_free_r+0x90>
 8004316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800431a:	9001      	str	r0, [sp, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f1a1 0404 	sub.w	r4, r1, #4
 8004322:	bfb8      	it	lt
 8004324:	18e4      	addlt	r4, r4, r3
 8004326:	f000 f913 	bl	8004550 <__malloc_lock>
 800432a:	4a1e      	ldr	r2, [pc, #120]	; (80043a4 <_free_r+0x94>)
 800432c:	9801      	ldr	r0, [sp, #4]
 800432e:	6813      	ldr	r3, [r2, #0]
 8004330:	b933      	cbnz	r3, 8004340 <_free_r+0x30>
 8004332:	6063      	str	r3, [r4, #4]
 8004334:	6014      	str	r4, [r2, #0]
 8004336:	b003      	add	sp, #12
 8004338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800433c:	f000 b90e 	b.w	800455c <__malloc_unlock>
 8004340:	42a3      	cmp	r3, r4
 8004342:	d908      	bls.n	8004356 <_free_r+0x46>
 8004344:	6825      	ldr	r5, [r4, #0]
 8004346:	1961      	adds	r1, r4, r5
 8004348:	428b      	cmp	r3, r1
 800434a:	bf01      	itttt	eq
 800434c:	6819      	ldreq	r1, [r3, #0]
 800434e:	685b      	ldreq	r3, [r3, #4]
 8004350:	1949      	addeq	r1, r1, r5
 8004352:	6021      	streq	r1, [r4, #0]
 8004354:	e7ed      	b.n	8004332 <_free_r+0x22>
 8004356:	461a      	mov	r2, r3
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	b10b      	cbz	r3, 8004360 <_free_r+0x50>
 800435c:	42a3      	cmp	r3, r4
 800435e:	d9fa      	bls.n	8004356 <_free_r+0x46>
 8004360:	6811      	ldr	r1, [r2, #0]
 8004362:	1855      	adds	r5, r2, r1
 8004364:	42a5      	cmp	r5, r4
 8004366:	d10b      	bne.n	8004380 <_free_r+0x70>
 8004368:	6824      	ldr	r4, [r4, #0]
 800436a:	4421      	add	r1, r4
 800436c:	1854      	adds	r4, r2, r1
 800436e:	42a3      	cmp	r3, r4
 8004370:	6011      	str	r1, [r2, #0]
 8004372:	d1e0      	bne.n	8004336 <_free_r+0x26>
 8004374:	681c      	ldr	r4, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	6053      	str	r3, [r2, #4]
 800437a:	4421      	add	r1, r4
 800437c:	6011      	str	r1, [r2, #0]
 800437e:	e7da      	b.n	8004336 <_free_r+0x26>
 8004380:	d902      	bls.n	8004388 <_free_r+0x78>
 8004382:	230c      	movs	r3, #12
 8004384:	6003      	str	r3, [r0, #0]
 8004386:	e7d6      	b.n	8004336 <_free_r+0x26>
 8004388:	6825      	ldr	r5, [r4, #0]
 800438a:	1961      	adds	r1, r4, r5
 800438c:	428b      	cmp	r3, r1
 800438e:	bf04      	itt	eq
 8004390:	6819      	ldreq	r1, [r3, #0]
 8004392:	685b      	ldreq	r3, [r3, #4]
 8004394:	6063      	str	r3, [r4, #4]
 8004396:	bf04      	itt	eq
 8004398:	1949      	addeq	r1, r1, r5
 800439a:	6021      	streq	r1, [r4, #0]
 800439c:	6054      	str	r4, [r2, #4]
 800439e:	e7ca      	b.n	8004336 <_free_r+0x26>
 80043a0:	b003      	add	sp, #12
 80043a2:	bd30      	pop	{r4, r5, pc}
 80043a4:	20000168 	.word	0x20000168

080043a8 <sbrk_aligned>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4e0e      	ldr	r6, [pc, #56]	; (80043e4 <sbrk_aligned+0x3c>)
 80043ac:	460c      	mov	r4, r1
 80043ae:	6831      	ldr	r1, [r6, #0]
 80043b0:	4605      	mov	r5, r0
 80043b2:	b911      	cbnz	r1, 80043ba <sbrk_aligned+0x12>
 80043b4:	f000 f8bc 	bl	8004530 <_sbrk_r>
 80043b8:	6030      	str	r0, [r6, #0]
 80043ba:	4621      	mov	r1, r4
 80043bc:	4628      	mov	r0, r5
 80043be:	f000 f8b7 	bl	8004530 <_sbrk_r>
 80043c2:	1c43      	adds	r3, r0, #1
 80043c4:	d00a      	beq.n	80043dc <sbrk_aligned+0x34>
 80043c6:	1cc4      	adds	r4, r0, #3
 80043c8:	f024 0403 	bic.w	r4, r4, #3
 80043cc:	42a0      	cmp	r0, r4
 80043ce:	d007      	beq.n	80043e0 <sbrk_aligned+0x38>
 80043d0:	1a21      	subs	r1, r4, r0
 80043d2:	4628      	mov	r0, r5
 80043d4:	f000 f8ac 	bl	8004530 <_sbrk_r>
 80043d8:	3001      	adds	r0, #1
 80043da:	d101      	bne.n	80043e0 <sbrk_aligned+0x38>
 80043dc:	f04f 34ff 	mov.w	r4, #4294967295
 80043e0:	4620      	mov	r0, r4
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	2000016c 	.word	0x2000016c

080043e8 <_malloc_r>:
 80043e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ec:	1ccd      	adds	r5, r1, #3
 80043ee:	f025 0503 	bic.w	r5, r5, #3
 80043f2:	3508      	adds	r5, #8
 80043f4:	2d0c      	cmp	r5, #12
 80043f6:	bf38      	it	cc
 80043f8:	250c      	movcc	r5, #12
 80043fa:	2d00      	cmp	r5, #0
 80043fc:	4607      	mov	r7, r0
 80043fe:	db01      	blt.n	8004404 <_malloc_r+0x1c>
 8004400:	42a9      	cmp	r1, r5
 8004402:	d905      	bls.n	8004410 <_malloc_r+0x28>
 8004404:	230c      	movs	r3, #12
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	2600      	movs	r6, #0
 800440a:	4630      	mov	r0, r6
 800440c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004410:	4e2e      	ldr	r6, [pc, #184]	; (80044cc <_malloc_r+0xe4>)
 8004412:	f000 f89d 	bl	8004550 <__malloc_lock>
 8004416:	6833      	ldr	r3, [r6, #0]
 8004418:	461c      	mov	r4, r3
 800441a:	bb34      	cbnz	r4, 800446a <_malloc_r+0x82>
 800441c:	4629      	mov	r1, r5
 800441e:	4638      	mov	r0, r7
 8004420:	f7ff ffc2 	bl	80043a8 <sbrk_aligned>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	4604      	mov	r4, r0
 8004428:	d14d      	bne.n	80044c6 <_malloc_r+0xde>
 800442a:	6834      	ldr	r4, [r6, #0]
 800442c:	4626      	mov	r6, r4
 800442e:	2e00      	cmp	r6, #0
 8004430:	d140      	bne.n	80044b4 <_malloc_r+0xcc>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	4631      	mov	r1, r6
 8004436:	4638      	mov	r0, r7
 8004438:	eb04 0803 	add.w	r8, r4, r3
 800443c:	f000 f878 	bl	8004530 <_sbrk_r>
 8004440:	4580      	cmp	r8, r0
 8004442:	d13a      	bne.n	80044ba <_malloc_r+0xd2>
 8004444:	6821      	ldr	r1, [r4, #0]
 8004446:	3503      	adds	r5, #3
 8004448:	1a6d      	subs	r5, r5, r1
 800444a:	f025 0503 	bic.w	r5, r5, #3
 800444e:	3508      	adds	r5, #8
 8004450:	2d0c      	cmp	r5, #12
 8004452:	bf38      	it	cc
 8004454:	250c      	movcc	r5, #12
 8004456:	4629      	mov	r1, r5
 8004458:	4638      	mov	r0, r7
 800445a:	f7ff ffa5 	bl	80043a8 <sbrk_aligned>
 800445e:	3001      	adds	r0, #1
 8004460:	d02b      	beq.n	80044ba <_malloc_r+0xd2>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	442b      	add	r3, r5
 8004466:	6023      	str	r3, [r4, #0]
 8004468:	e00e      	b.n	8004488 <_malloc_r+0xa0>
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	1b52      	subs	r2, r2, r5
 800446e:	d41e      	bmi.n	80044ae <_malloc_r+0xc6>
 8004470:	2a0b      	cmp	r2, #11
 8004472:	d916      	bls.n	80044a2 <_malloc_r+0xba>
 8004474:	1961      	adds	r1, r4, r5
 8004476:	42a3      	cmp	r3, r4
 8004478:	6025      	str	r5, [r4, #0]
 800447a:	bf18      	it	ne
 800447c:	6059      	strne	r1, [r3, #4]
 800447e:	6863      	ldr	r3, [r4, #4]
 8004480:	bf08      	it	eq
 8004482:	6031      	streq	r1, [r6, #0]
 8004484:	5162      	str	r2, [r4, r5]
 8004486:	604b      	str	r3, [r1, #4]
 8004488:	4638      	mov	r0, r7
 800448a:	f104 060b 	add.w	r6, r4, #11
 800448e:	f000 f865 	bl	800455c <__malloc_unlock>
 8004492:	f026 0607 	bic.w	r6, r6, #7
 8004496:	1d23      	adds	r3, r4, #4
 8004498:	1af2      	subs	r2, r6, r3
 800449a:	d0b6      	beq.n	800440a <_malloc_r+0x22>
 800449c:	1b9b      	subs	r3, r3, r6
 800449e:	50a3      	str	r3, [r4, r2]
 80044a0:	e7b3      	b.n	800440a <_malloc_r+0x22>
 80044a2:	6862      	ldr	r2, [r4, #4]
 80044a4:	42a3      	cmp	r3, r4
 80044a6:	bf0c      	ite	eq
 80044a8:	6032      	streq	r2, [r6, #0]
 80044aa:	605a      	strne	r2, [r3, #4]
 80044ac:	e7ec      	b.n	8004488 <_malloc_r+0xa0>
 80044ae:	4623      	mov	r3, r4
 80044b0:	6864      	ldr	r4, [r4, #4]
 80044b2:	e7b2      	b.n	800441a <_malloc_r+0x32>
 80044b4:	4634      	mov	r4, r6
 80044b6:	6876      	ldr	r6, [r6, #4]
 80044b8:	e7b9      	b.n	800442e <_malloc_r+0x46>
 80044ba:	230c      	movs	r3, #12
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	4638      	mov	r0, r7
 80044c0:	f000 f84c 	bl	800455c <__malloc_unlock>
 80044c4:	e7a1      	b.n	800440a <_malloc_r+0x22>
 80044c6:	6025      	str	r5, [r4, #0]
 80044c8:	e7de      	b.n	8004488 <_malloc_r+0xa0>
 80044ca:	bf00      	nop
 80044cc:	20000168 	.word	0x20000168

080044d0 <_realloc_r>:
 80044d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d4:	4680      	mov	r8, r0
 80044d6:	4614      	mov	r4, r2
 80044d8:	460e      	mov	r6, r1
 80044da:	b921      	cbnz	r1, 80044e6 <_realloc_r+0x16>
 80044dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044e0:	4611      	mov	r1, r2
 80044e2:	f7ff bf81 	b.w	80043e8 <_malloc_r>
 80044e6:	b92a      	cbnz	r2, 80044f4 <_realloc_r+0x24>
 80044e8:	f7ff ff12 	bl	8004310 <_free_r>
 80044ec:	4625      	mov	r5, r4
 80044ee:	4628      	mov	r0, r5
 80044f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044f4:	f000 f838 	bl	8004568 <_malloc_usable_size_r>
 80044f8:	4284      	cmp	r4, r0
 80044fa:	4607      	mov	r7, r0
 80044fc:	d802      	bhi.n	8004504 <_realloc_r+0x34>
 80044fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004502:	d812      	bhi.n	800452a <_realloc_r+0x5a>
 8004504:	4621      	mov	r1, r4
 8004506:	4640      	mov	r0, r8
 8004508:	f7ff ff6e 	bl	80043e8 <_malloc_r>
 800450c:	4605      	mov	r5, r0
 800450e:	2800      	cmp	r0, #0
 8004510:	d0ed      	beq.n	80044ee <_realloc_r+0x1e>
 8004512:	42bc      	cmp	r4, r7
 8004514:	4622      	mov	r2, r4
 8004516:	4631      	mov	r1, r6
 8004518:	bf28      	it	cs
 800451a:	463a      	movcs	r2, r7
 800451c:	f7ff fed0 	bl	80042c0 <memcpy>
 8004520:	4631      	mov	r1, r6
 8004522:	4640      	mov	r0, r8
 8004524:	f7ff fef4 	bl	8004310 <_free_r>
 8004528:	e7e1      	b.n	80044ee <_realloc_r+0x1e>
 800452a:	4635      	mov	r5, r6
 800452c:	e7df      	b.n	80044ee <_realloc_r+0x1e>
	...

08004530 <_sbrk_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	4d06      	ldr	r5, [pc, #24]	; (800454c <_sbrk_r+0x1c>)
 8004534:	2300      	movs	r3, #0
 8004536:	4604      	mov	r4, r0
 8004538:	4608      	mov	r0, r1
 800453a:	602b      	str	r3, [r5, #0]
 800453c:	f7fc f92c 	bl	8000798 <_sbrk>
 8004540:	1c43      	adds	r3, r0, #1
 8004542:	d102      	bne.n	800454a <_sbrk_r+0x1a>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	b103      	cbz	r3, 800454a <_sbrk_r+0x1a>
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	bd38      	pop	{r3, r4, r5, pc}
 800454c:	20000170 	.word	0x20000170

08004550 <__malloc_lock>:
 8004550:	4801      	ldr	r0, [pc, #4]	; (8004558 <__malloc_lock+0x8>)
 8004552:	f000 b811 	b.w	8004578 <__retarget_lock_acquire_recursive>
 8004556:	bf00      	nop
 8004558:	20000174 	.word	0x20000174

0800455c <__malloc_unlock>:
 800455c:	4801      	ldr	r0, [pc, #4]	; (8004564 <__malloc_unlock+0x8>)
 800455e:	f000 b80c 	b.w	800457a <__retarget_lock_release_recursive>
 8004562:	bf00      	nop
 8004564:	20000174 	.word	0x20000174

08004568 <_malloc_usable_size_r>:
 8004568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800456c:	1f18      	subs	r0, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	bfbc      	itt	lt
 8004572:	580b      	ldrlt	r3, [r1, r0]
 8004574:	18c0      	addlt	r0, r0, r3
 8004576:	4770      	bx	lr

08004578 <__retarget_lock_acquire_recursive>:
 8004578:	4770      	bx	lr

0800457a <__retarget_lock_release_recursive>:
 800457a:	4770      	bx	lr

0800457c <_init>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr

08004588 <_fini>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	bf00      	nop
 800458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458e:	bc08      	pop	{r3}
 8004590:	469e      	mov	lr, r3
 8004592:	4770      	bx	lr
