
GHP_Labor_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008448  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080085d8  080085d8  000185d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a34  08008a34  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008a34  08008a34  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a34  08008a34  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a34  08008a34  00018a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a38  08008a38  00018a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          0000016c  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000350  20000350  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000103a7  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f02  00000000  00000000  000305bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  000324c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d60  00000000  00000000  000332e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a52  00000000  00000000  00034048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011734  00000000  00000000  00055a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb998  00000000  00000000  000671ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00132b66  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c64  00000000  00000000  00132bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085c0 	.word	0x080085c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080085c0 	.word	0x080085c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <getVoltageFromAdc>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
float getVoltageFromAdc(uint16_t *value){
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	return (*value * voltage) / adc_res;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	ee07 3a90 	vmov	s15, r3
 8000bb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <getVoltageFromAdc+0x40>)
 8000bbe:	edd3 7a00 	vldr	s15, [r3]
 8000bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <getVoltageFromAdc+0x44>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	ee07 3a90 	vmov	s15, r3
 8000bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000bd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8000bda:	eeb0 0a67 	vmov.f32	s0, s15
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000004 	.word	0x20000004

08000bf0 <getArithmeticADCValue>:
		return sumADCRaw * 1/(counter-1);
	}

}
*/
int getArithmeticADCValue(uint16_t *adc_raw){
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

	sumADCRaw += *adc_raw - ringBuffer[counter % cycle];
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	881a      	ldrh	r2, [r3, #0]
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <getArithmeticADCValue+0x70>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4259      	negs	r1, r3
 8000c02:	f003 0303 	and.w	r3, r3, #3
 8000c06:	f001 0103 	and.w	r1, r1, #3
 8000c0a:	bf58      	it	pl
 8000c0c:	424b      	negpl	r3, r1
 8000c0e:	4915      	ldr	r1, [pc, #84]	; (8000c64 <getArithmeticADCValue+0x74>)
 8000c10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <getArithmeticADCValue+0x78>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <getArithmeticADCValue+0x78>)
 8000c22:	801a      	strh	r2, [r3, #0]
	ringBuffer[counter%cycle] = *adc_raw;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <getArithmeticADCValue+0x70>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	425a      	negs	r2, r3
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	f002 0203 	and.w	r2, r2, #3
 8000c32:	bf58      	it	pl
 8000c34:	4253      	negpl	r3, r2
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	8811      	ldrh	r1, [r2, #0]
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <getArithmeticADCValue+0x74>)
 8000c3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	counter++;
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <getArithmeticADCValue+0x70>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <getArithmeticADCValue+0x70>)
 8000c48:	6013      	str	r3, [r2, #0]
	return sumADCRaw/cycle;
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <getArithmeticADCValue+0x78>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	b29b      	uxth	r3, r3
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000328 	.word	0x20000328
 8000c64:	20000330 	.word	0x20000330
 8000c68:	20000322 	.word	0x20000322

08000c6c <initADCValueContainer>:



void initADCValueContainer(){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	adcContainer = malloc(sizeof(uint16_t)*cycle);
 8000c70:	2008      	movs	r0, #8
 8000c72:	f004 ff6f 	bl	8005b54 <malloc>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <initADCValueContainer+0x18>)
 8000c7c:	601a      	str	r2, [r3, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000032c 	.word	0x2000032c

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8c:	f000 fcfa 	bl	8001684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c90:	f000 f8a4 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c94:	f000 fa4c 	bl	8001130 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c98:	f000 fa1a 	bl	80010d0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c9c:	f000 f8fc 	bl	8000e98 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ca0:	f000 f96a 	bl	8000f78 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  initADCValueContainer();
 8000ca4:	f7ff ffe2 	bl	8000c6c <initADCValueContainer>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4841      	ldr	r0, [pc, #260]	; (8000db0 <main+0x128>)
 8000cac:	f003 fbd2 	bl	8004454 <HAL_TIM_PWM_Start>





	  HAL_ADC_Start(&hadc1);
 8000cb0:	4840      	ldr	r0, [pc, #256]	; (8000db4 <main+0x12c>)
 8000cb2:	f000 ff03 	bl	8001abc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000cb6:	f04f 31ff 	mov.w	r1, #4294967295
 8000cba:	483e      	ldr	r0, [pc, #248]	; (8000db4 <main+0x12c>)
 8000cbc:	f000 ffb4 	bl	8001c28 <HAL_ADC_PollForConversion>
	  raw_adc_value = HAL_ADC_GetValue(&hadc1);
 8000cc0:	483c      	ldr	r0, [pc, #240]	; (8000db4 <main+0x12c>)
 8000cc2:	f001 f87f 	bl	8001dc4 <HAL_ADC_GetValue>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	4b3b      	ldr	r3, [pc, #236]	; (8000db8 <main+0x130>)
 8000ccc:	801a      	strh	r2, [r3, #0]
	  getVoltageFromAdc(&raw_adc_value);
 8000cce:	483a      	ldr	r0, [pc, #232]	; (8000db8 <main+0x130>)
 8000cd0:	f7ff ff6a 	bl	8000ba8 <getVoltageFromAdc>
	  arithmeticADC = getArithmeticADCValue(&raw_adc_value);
 8000cd4:	4838      	ldr	r0, [pc, #224]	; (8000db8 <main+0x130>)
 8000cd6:	f7ff ff8b 	bl	8000bf0 <getArithmeticADCValue>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a37      	ldr	r2, [pc, #220]	; (8000dbc <main+0x134>)
 8000cde:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4836      	ldr	r0, [pc, #216]	; (8000dc0 <main+0x138>)
 8000ce6:	f001 ff3b 	bl	8002b60 <HAL_GPIO_WritePin>

	  // Aufgabe 02

	  if(arithmeticADC > (adc_res/2) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET){
 8000cea:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <main+0x13c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	0fda      	lsrs	r2, r3, #31
 8000cf0:	4413      	add	r3, r2
 8000cf2:	105b      	asrs	r3, r3, #1
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <main+0x134>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	da0e      	bge.n	8000d1c <main+0x94>
 8000cfe:	2120      	movs	r1, #32
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f001 ff14 	bl	8002b30 <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d106      	bne.n	8000d1c <main+0x94>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2120      	movs	r1, #32
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f001 ff23 	bl	8002b60 <HAL_GPIO_WritePin>
 8000d1a:	e017      	b.n	8000d4c <main+0xc4>
	  }
	  else if(arithmeticADC <= (adc_res/2) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) != GPIO_PIN_RESET)
 8000d1c:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <main+0x13c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	0fda      	lsrs	r2, r3, #31
 8000d22:	4413      	add	r3, r2
 8000d24:	105b      	asrs	r3, r3, #1
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <main+0x134>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	db0d      	blt.n	8000d4c <main+0xc4>
 8000d30:	2120      	movs	r1, #32
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d36:	f001 fefb 	bl	8002b30 <HAL_GPIO_ReadPin>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d005      	beq.n	8000d4c <main+0xc4>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2120      	movs	r1, #32
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f001 ff0a 	bl	8002b60 <HAL_GPIO_WritePin>
	  }
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, arithmeticADC);
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <main+0x134>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <main+0x128>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34

	  HAL_Delay(10);
 8000d56:	200a      	movs	r0, #10
 8000d58:	f000 fcfa 	bl	8001750 <HAL_Delay>



	  if(counter%1000 == 0){
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <main+0x140>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <main+0x144>)
 8000d62:	fb83 1302 	smull	r1, r3, r3, r2
 8000d66:	1199      	asrs	r1, r3, #6
 8000d68:	17d3      	asrs	r3, r2, #31
 8000d6a:	1acb      	subs	r3, r1, r3
 8000d6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d70:	fb01 f303 	mul.w	r3, r1, r3
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d19a      	bne.n	8000cb0 <main+0x28>
		  printf("adc_value == %d \n\r", raw_adc_value);
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <main+0x130>)
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <main+0x148>)
 8000d82:	f005 fc41 	bl	8006608 <iprintf>
		  printf("adc_voltage == %f \n\r", getVoltageFromAdc(&raw_adc_value));
 8000d86:	480c      	ldr	r0, [pc, #48]	; (8000db8 <main+0x130>)
 8000d88:	f7ff ff0e 	bl	8000ba8 <getVoltageFromAdc>
 8000d8c:	ee10 3a10 	vmov	r3, s0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fbd9 	bl	8000548 <__aeabi_f2d>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <main+0x14c>)
 8000d9c:	f005 fc34 	bl	8006608 <iprintf>
		  printf("Arithmetic Value == %d \n\n\n\r", arithmeticADC);
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <main+0x134>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <main+0x150>)
 8000da8:	f005 fc2e 	bl	8006608 <iprintf>
	  HAL_ADC_Start(&hadc1);
 8000dac:	e780      	b.n	8000cb0 <main+0x28>
 8000dae:	bf00      	nop
 8000db0:	20000250 	.word	0x20000250
 8000db4:	20000200 	.word	0x20000200
 8000db8:	20000320 	.word	0x20000320
 8000dbc:	20000324 	.word	0x20000324
 8000dc0:	48000800 	.word	0x48000800
 8000dc4:	20000004 	.word	0x20000004
 8000dc8:	20000328 	.word	0x20000328
 8000dcc:	10624dd3 	.word	0x10624dd3
 8000dd0:	080085d8 	.word	0x080085d8
 8000dd4:	080085ec 	.word	0x080085ec
 8000dd8:	08008604 	.word	0x08008604

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b096      	sub	sp, #88	; 0x58
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000de6:	2228      	movs	r2, #40	; 0x28
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f004 feba 	bl	8005b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e00:	463b      	mov	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e12:	2302      	movs	r3, #2
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e16:	2301      	movs	r3, #1
 8000e18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e22:	2300      	movs	r3, #0
 8000e24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e26:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 fead 	bl	8002b90 <HAL_RCC_OscConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000e3c:	f000 fa12 	bl	8001264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e40:	230f      	movs	r3, #15
 8000e42:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e44:	2302      	movs	r3, #2
 8000e46:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f002 fed5 	bl	8003c0c <HAL_RCC_ClockConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e68:	f000 f9fc 	bl	8001264 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000e6c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000e70:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e76:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f003 f8fa 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e8a:	f000 f9eb 	bl	8001264 <Error_Handler>
  }
}
 8000e8e:	bf00      	nop
 8000e90:	3758      	adds	r7, #88	; 0x58
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eba:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000ebc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ec0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ece:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed4:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee2:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000f04:	2204      	movs	r2, #4
 8000f06:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f14:	4817      	ldr	r0, [pc, #92]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000f16:	f000 fc3f 	bl	8001798 <HAL_ADC_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000f20:	f000 f9a0 	bl	8001264 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4811      	ldr	r0, [pc, #68]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000f30:	f001 fa16 	bl	8002360 <HAL_ADCEx_MultiModeConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f3a:	f000 f993 	bl	8001264 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <MX_ADC1_Init+0xdc>)
 8000f5c:	f000 ff40 	bl	8001de0 <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000f66:	f000 f97d 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000200 	.word	0x20000200

08000f78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b09a      	sub	sp, #104	; 0x68
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
 8000fa8:	615a      	str	r2, [r3, #20]
 8000faa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	222c      	movs	r2, #44	; 0x2c
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f004 fdd6 	bl	8005b64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb8:	4b43      	ldr	r3, [pc, #268]	; (80010c8 <MX_TIM1_Init+0x150>)
 8000fba:	4a44      	ldr	r2, [pc, #272]	; (80010cc <MX_TIM1_Init+0x154>)
 8000fbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000fbe:	4b42      	ldr	r3, [pc, #264]	; (80010c8 <MX_TIM1_Init+0x150>)
 8000fc0:	223f      	movs	r2, #63	; 0x3f
 8000fc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b40      	ldr	r3, [pc, #256]	; (80010c8 <MX_TIM1_Init+0x150>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8000fca:	4b3f      	ldr	r3, [pc, #252]	; (80010c8 <MX_TIM1_Init+0x150>)
 8000fcc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000fd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b3d      	ldr	r3, [pc, #244]	; (80010c8 <MX_TIM1_Init+0x150>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd8:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <MX_TIM1_Init+0x150>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <MX_TIM1_Init+0x150>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fe4:	4838      	ldr	r0, [pc, #224]	; (80010c8 <MX_TIM1_Init+0x150>)
 8000fe6:	f003 f97d 	bl	80042e4 <HAL_TIM_Base_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ff0:	f000 f938 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ffa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ffe:	4619      	mov	r1, r3
 8001000:	4831      	ldr	r0, [pc, #196]	; (80010c8 <MX_TIM1_Init+0x150>)
 8001002:	f003 fc27 	bl	8004854 <HAL_TIM_ConfigClockSource>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800100c:	f000 f92a 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001010:	482d      	ldr	r0, [pc, #180]	; (80010c8 <MX_TIM1_Init+0x150>)
 8001012:	f003 f9be 	bl	8004392 <HAL_TIM_PWM_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800101c:	f000 f922 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800102c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001030:	4619      	mov	r1, r3
 8001032:	4825      	ldr	r0, [pc, #148]	; (80010c8 <MX_TIM1_Init+0x150>)
 8001034:	f004 f8b6 	bl	80051a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800103e:	f000 f911 	bl	8001264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001042:	2360      	movs	r3, #96	; 0x60
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800104a:	2300      	movs	r3, #0
 800104c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800104e:	2300      	movs	r3, #0
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800105e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001062:	2200      	movs	r2, #0
 8001064:	4619      	mov	r1, r3
 8001066:	4818      	ldr	r0, [pc, #96]	; (80010c8 <MX_TIM1_Init+0x150>)
 8001068:	f003 fae0 	bl	800462c <HAL_TIM_PWM_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001072:	f000 f8f7 	bl	8001264 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800108a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800108e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001098:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <MX_TIM1_Init+0x150>)
 80010ac:	f004 f8e8 	bl	8005280 <HAL_TIMEx_ConfigBreakDeadTime>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80010b6:	f000 f8d5 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <MX_TIM1_Init+0x150>)
 80010bc:	f000 f958 	bl	8001370 <HAL_TIM_MspPostInit>

}
 80010c0:	bf00      	nop
 80010c2:	3768      	adds	r7, #104	; 0x68
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000250 	.word	0x20000250
 80010cc:	40012c00 	.word	0x40012c00

080010d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <MX_USART2_UART_Init+0x5c>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010dc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80010e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_USART2_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_USART2_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_USART2_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_USART2_UART_Init+0x58>)
 8001114:	f004 f92c 	bl	8005370 <HAL_UART_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800111e:	f000 f8a1 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000029c 	.word	0x2000029c
 800112c:	40004400 	.word	0x40004400

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <MX_GPIO_Init+0xc8>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a2b      	ldr	r2, [pc, #172]	; (80011f8 <MX_GPIO_Init+0xc8>)
 800114c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001150:	6153      	str	r3, [r2, #20]
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <MX_GPIO_Init+0xc8>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <MX_GPIO_Init+0xc8>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	4a25      	ldr	r2, [pc, #148]	; (80011f8 <MX_GPIO_Init+0xc8>)
 8001164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001168:	6153      	str	r3, [r2, #20]
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <MX_GPIO_Init+0xc8>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_GPIO_Init+0xc8>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <MX_GPIO_Init+0xc8>)
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	6153      	str	r3, [r2, #20]
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_GPIO_Init+0xc8>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_GPIO_Init+0xc8>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <MX_GPIO_Init+0xc8>)
 8001194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001198:	6153      	str	r3, [r2, #20]
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_GPIO_Init+0xc8>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f001 fcd6 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	480c      	ldr	r0, [pc, #48]	; (80011fc <MX_GPIO_Init+0xcc>)
 80011cc:	f001 fb3e 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80011d0:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f001 fb2e 	bl	800284c <HAL_GPIO_Init>

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000800 	.word	0x48000800

08001200 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
	  {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	   uint8_t c[1];
	   c[0] = ch & 0x00FF;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	733b      	strb	r3, [r7, #12]
	   HAL_UART_Transmit(&huart2, &*c, 1, 10);
 800120e:	f107 010c 	add.w	r1, r7, #12
 8001212:	230a      	movs	r3, #10
 8001214:	2201      	movs	r2, #1
 8001216:	4804      	ldr	r0, [pc, #16]	; (8001228 <__io_putchar+0x28>)
 8001218:	f004 f8f8 	bl	800540c <HAL_UART_Transmit>
	   return ch;
 800121c:	687b      	ldr	r3, [r7, #4]
	  }
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000029c 	.word	0x2000029c

0800122c <_write>:

	  int _write(int file,char *ptr, int len)
	  {
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
	   int DataIdx;
	   for(DataIdx= 0; DataIdx< len; DataIdx++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e009      	b.n	8001252 <_write+0x26>
	   {
	   __io_putchar(*ptr++);
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	60ba      	str	r2, [r7, #8]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ffda 	bl	8001200 <__io_putchar>
	   for(DataIdx= 0; DataIdx< len; DataIdx++)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	429a      	cmp	r2, r3
 8001258:	dbf1      	blt.n	800123e <_write+0x12>
	   }
	  return len;
 800125a:	687b      	ldr	r3, [r7, #4]
	  }
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	e7fe      	b.n	800126c <Error_Handler+0x8>
	...

08001270 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_MspInit+0x44>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <HAL_MspInit+0x44>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6193      	str	r3, [r2, #24]
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <HAL_MspInit+0x44>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_MspInit+0x44>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_MspInit+0x44>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	61d3      	str	r3, [r2, #28]
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_MspInit+0x44>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012a6:	2007      	movs	r0, #7
 80012a8:	f001 fa9c 	bl	80027e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021000 	.word	0x40021000

080012b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d8:	d124      	bne.n	8001324 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_ADC_MspInit+0x74>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	4a13      	ldr	r2, [pc, #76]	; (800132c <HAL_ADC_MspInit+0x74>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e4:	6153      	str	r3, [r2, #20]
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_ADC_MspInit+0x74>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_ADC_MspInit+0x74>)
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	4a0d      	ldr	r2, [pc, #52]	; (800132c <HAL_ADC_MspInit+0x74>)
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	6153      	str	r3, [r2, #20]
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_ADC_MspInit+0x74>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800130a:	2301      	movs	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130e:	2303      	movs	r3, #3
 8001310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001320:	f001 fa94 	bl	800284c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_TIM_Base_MspInit+0x38>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d10b      	bne.n	800135a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_TIM_Base_MspInit+0x3c>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a09      	ldr	r2, [pc, #36]	; (800136c <HAL_TIM_Base_MspInit+0x3c>)
 8001348:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_TIM_Base_MspInit+0x3c>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40012c00 	.word	0x40012c00
 800136c:	40021000 	.word	0x40021000

08001370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <HAL_TIM_MspPostInit+0x64>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d11b      	bne.n	80013ca <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_TIM_MspPostInit+0x68>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <HAL_TIM_MspPostInit+0x68>)
 8001398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800139c:	6153      	str	r3, [r2, #20]
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_TIM_MspPostInit+0x68>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013aa:	2301      	movs	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <HAL_TIM_MspPostInit+0x6c>)
 80013c6:	f001 fa41 	bl	800284c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40012c00 	.word	0x40012c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48000800 	.word	0x48000800

080013e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_UART_MspInit+0x7c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d128      	bne.n	8001454 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_UART_MspInit+0x80>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a16      	ldr	r2, [pc, #88]	; (8001460 <HAL_UART_MspInit+0x80>)
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_UART_MspInit+0x80>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_UART_MspInit+0x80>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4a10      	ldr	r2, [pc, #64]	; (8001460 <HAL_UART_MspInit+0x80>)
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	6153      	str	r3, [r2, #20]
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_UART_MspInit+0x80>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001432:	230c      	movs	r3, #12
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001442:	2307      	movs	r3, #7
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001450:	f001 f9fc 	bl	800284c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	; 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40004400 	.word	0x40004400
 8001460:	40021000 	.word	0x40021000

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b0:	f000 f92e 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
	return 1;
 80014bc:	2301      	movs	r3, #1
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_kill>:

int _kill(int pid, int sig)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014d2:	f004 fb15 	bl	8005b00 <__errno>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2216      	movs	r2, #22
 80014da:	601a      	str	r2, [r3, #0]
	return -1;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <_exit>:

void _exit (int status)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ffe7 	bl	80014c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014fa:	e7fe      	b.n	80014fa <_exit+0x12>

080014fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	e00a      	b.n	8001524 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800150e:	f3af 8000 	nop.w
 8001512:	4601      	mov	r1, r0
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	60ba      	str	r2, [r7, #8]
 800151a:	b2ca      	uxtb	r2, r1
 800151c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	429a      	cmp	r2, r3
 800152a:	dbf0      	blt.n	800150e <_read+0x12>
	}

return len;
 800152c:	687b      	ldr	r3, [r7, #4]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	return -1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155e:	605a      	str	r2, [r3, #4]
	return 0;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <_isatty>:

int _isatty(int file)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
	return 1;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
	return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a8:	4a14      	ldr	r2, [pc, #80]	; (80015fc <_sbrk+0x5c>)
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <_sbrk+0x60>)
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <_sbrk+0x64>)
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <_sbrk+0x68>)
 80015c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d207      	bcs.n	80015e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d0:	f004 fa96 	bl	8005b00 <__errno>
 80015d4:	4603      	mov	r3, r0
 80015d6:	220c      	movs	r2, #12
 80015d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	e009      	b.n	80015f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <_sbrk+0x64>)
 80015f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f2:	68fb      	ldr	r3, [r7, #12]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20003000 	.word	0x20003000
 8001600:	00000400 	.word	0x00000400
 8001604:	20000338 	.word	0x20000338
 8001608:	20000350 	.word	0x20000350

0800160c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <SystemInit+0x20>)
 8001612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <SystemInit+0x20>)
 8001618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800161c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001668 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001634:	480d      	ldr	r0, [pc, #52]	; (800166c <LoopForever+0x6>)
  ldr r1, =_edata
 8001636:	490e      	ldr	r1, [pc, #56]	; (8001670 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001638:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <LoopForever+0xe>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <LoopForever+0x12>)
  ldr r4, =_ebss
 800164c:	4c0b      	ldr	r4, [pc, #44]	; (800167c <LoopForever+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800165a:	f7ff ffd7 	bl	800160c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165e:	f004 fa55 	bl	8005b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001662:	f7ff fb11 	bl	8000c88 <main>

08001666 <LoopForever>:

LoopForever:
    b LoopForever
 8001666:	e7fe      	b.n	8001666 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001668:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800166c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001670:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001674:	08008a3c 	.word	0x08008a3c
  ldr r2, =_sbss
 8001678:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800167c:	20000350 	.word	0x20000350

08001680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <ADC1_2_IRQHandler>
	...

08001684 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_Init+0x28>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_Init+0x28>)
 800168e:	f043 0310 	orr.w	r3, r3, #16
 8001692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f001 f8a5 	bl	80027e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	2000      	movs	r0, #0
 800169c:	f000 f808 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a0:	f7ff fde6 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40022000 	.word	0x40022000

080016b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 f8af 	bl	8002832 <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f001 f885 	bl	80027fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000008 	.word	0x20000008
 8001708:	20000010 	.word	0x20000010
 800170c:	2000000c 	.word	0x2000000c

08001710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000010 	.word	0x20000010
 8001734:	2000033c 	.word	0x2000033c

08001738 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;  
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	2000033c 	.word	0x2000033c

08001750 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff ffee 	bl	8001738 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffde 	bl	8001738 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000010 	.word	0x20000010

08001798 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b09a      	sub	sp, #104	; 0x68
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e172      	b.n	8001a9e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d176      	bne.n	80018b8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d152      	bne.n	8001878 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fd63 	bl	80012b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d13b      	bne.n	8001878 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 fed7 	bl	80025b4 <ADC_Disable>
 8001806:	4603      	mov	r3, r0
 8001808:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b00      	cmp	r3, #0
 8001816:	d12f      	bne.n	8001878 <HAL_ADC_Init+0xe0>
 8001818:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800181c:	2b00      	cmp	r3, #0
 800181e:	d12b      	bne.n	8001878 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001828:	f023 0302 	bic.w	r3, r3, #2
 800182c:	f043 0202 	orr.w	r2, r3, #2
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001842:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001852:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001854:	4b94      	ldr	r3, [pc, #592]	; (8001aa8 <HAL_ADC_Init+0x310>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a94      	ldr	r2, [pc, #592]	; (8001aac <HAL_ADC_Init+0x314>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0c9a      	lsrs	r2, r3, #18
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800186a:	e002      	b.n	8001872 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	3b01      	subs	r3, #1
 8001870:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f9      	bne.n	800186c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001894:	d110      	bne.n	80018b8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f023 0312 	bic.w	r3, r3, #18
 800189e:	f043 0210 	orr.w	r2, r3, #16
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f043 0201 	orr.w	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 80df 	bne.w	8001a84 <HAL_ADC_Init+0x2ec>
 80018c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 80da 	bne.w	8001a84 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f040 80d2 	bne.w	8001a84 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018e8:	f043 0202 	orr.w	r2, r3, #2
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018f0:	4b6f      	ldr	r3, [pc, #444]	; (8001ab0 <HAL_ADC_Init+0x318>)
 80018f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018fc:	d102      	bne.n	8001904 <HAL_ADC_Init+0x16c>
 80018fe:	4b6d      	ldr	r3, [pc, #436]	; (8001ab4 <HAL_ADC_Init+0x31c>)
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	e002      	b.n	800190a <HAL_ADC_Init+0x172>
 8001904:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001908:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d108      	bne.n	800192a <HAL_ADC_Init+0x192>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_ADC_Init+0x192>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_ADC_Init+0x194>
 800192a:	2300      	movs	r3, #0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d11c      	bne.n	800196a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001930:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001932:	2b00      	cmp	r3, #0
 8001934:	d010      	beq.n	8001958 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d107      	bne.n	8001952 <HAL_ADC_Init+0x1ba>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_ADC_Init+0x1ba>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_ADC_Init+0x1bc>
 8001952:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001954:	2b00      	cmp	r3, #0
 8001956:	d108      	bne.n	800196a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	431a      	orrs	r2, r3
 8001966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001968:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7e5b      	ldrb	r3, [r3, #25]
 800196e:	035b      	lsls	r3, r3, #13
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001974:	2a01      	cmp	r2, #1
 8001976:	d002      	beq.n	800197e <HAL_ADC_Init+0x1e6>
 8001978:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800197c:	e000      	b.n	8001980 <HAL_ADC_Init+0x1e8>
 800197e:	2200      	movs	r2, #0
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4313      	orrs	r3, r2
 800198e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001990:	4313      	orrs	r3, r2
 8001992:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d11b      	bne.n	80019d6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7e5b      	ldrb	r3, [r3, #25]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	3b01      	subs	r3, #1
 80019ac:	045a      	lsls	r2, r3, #17
 80019ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019b0:	4313      	orrs	r3, r2
 80019b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b6:	663b      	str	r3, [r7, #96]	; 0x60
 80019b8:	e00d      	b.n	80019d6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80019c2:	f043 0220 	orr.w	r2, r3, #32
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f043 0201 	orr.w	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d007      	beq.n	80019ee <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	4313      	orrs	r3, r2
 80019e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019ea:	4313      	orrs	r3, r2
 80019ec:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d114      	bne.n	8001a26 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a0a:	f023 0302 	bic.w	r3, r3, #2
 8001a0e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7e1b      	ldrb	r3, [r3, #24]
 8001a14:	039a      	lsls	r2, r3, #14
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a22:	4313      	orrs	r3, r2
 8001a24:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <HAL_ADC_Init+0x320>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a36:	430b      	orrs	r3, r1
 8001a38:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10c      	bne.n	8001a5c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	f023 010f 	bic.w	r1, r3, #15
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	1e5a      	subs	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	631a      	str	r2, [r3, #48]	; 0x30
 8001a5a:	e007      	b.n	8001a6c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 020f 	bic.w	r2, r2, #15
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f023 0303 	bic.w	r3, r3, #3
 8001a7a:	f043 0201 	orr.w	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
 8001a82:	e00a      	b.n	8001a9a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f023 0312 	bic.w	r3, r3, #18
 8001a8c:	f043 0210 	orr.w	r2, r3, #16
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001a94:	2301      	movs	r3, #1
 8001a96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3768      	adds	r7, #104	; 0x68
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	431bde83 	.word	0x431bde83
 8001ab0:	50000300 	.word	0x50000300
 8001ab4:	50000100 	.word	0x50000100
 8001ab8:	fff0c007 	.word	0xfff0c007

08001abc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 809c 	bne.w	8001c10 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Start+0x2a>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e097      	b.n	8001c16 <HAL_ADC_Start+0x15a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 fcfc 	bl	80024ec <ADC_Enable>
 8001af4:	4603      	mov	r3, r0
 8001af6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 8083 	bne.w	8001c06 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b08:	f023 0301 	bic.w	r3, r3, #1
 8001b0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b14:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <HAL_ADC_Start+0x164>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <HAL_ADC_Start+0x6e>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b28:	d115      	bne.n	8001b56 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d027      	beq.n	8001b94 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b54:	e01e      	b.n	8001b94 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b6a:	d004      	beq.n	8001b76 <HAL_ADC_Start+0xba>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2c      	ldr	r2, [pc, #176]	; (8001c24 <HAL_ADC_Start+0x168>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d10e      	bne.n	8001b94 <HAL_ADC_Start+0xd8>
 8001b76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba0:	d106      	bne.n	8001bb0 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f023 0206 	bic.w	r2, r3, #6
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	645a      	str	r2, [r3, #68]	; 0x44
 8001bae:	e002      	b.n	8001bb6 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	221c      	movs	r2, #28
 8001bc4:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <HAL_ADC_Start+0x164>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d010      	beq.n	8001bf4 <HAL_ADC_Start+0x138>
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_ADC_Start+0x164>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d00a      	beq.n	8001bf4 <HAL_ADC_Start+0x138>
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_ADC_Start+0x164>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	2b09      	cmp	r3, #9
 8001be8:	d004      	beq.n	8001bf4 <HAL_ADC_Start+0x138>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf2:	d10f      	bne.n	8001c14 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0204 	orr.w	r2, r2, #4
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	e006      	b.n	8001c14 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c0e:	e001      	b.n	8001c14 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c10:	2302      	movs	r3, #2
 8001c12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	50000300 	.word	0x50000300
 8001c24:	50000100 	.word	0x50000100

08001c28 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d102      	bne.n	8001c44 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001c3e:	2308      	movs	r3, #8
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e02e      	b.n	8001ca2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c44:	4b5e      	ldr	r3, [pc, #376]	; (8001dc0 <HAL_ADC_PollForConversion+0x198>)
 8001c46:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d112      	bne.n	8001c7a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d11d      	bne.n	8001c9e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f043 0220 	orr.w	r2, r3, #32
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e09d      	b.n	8001db6 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f043 0220 	orr.w	r2, r3, #32
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e08b      	b.n	8001db6 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001c9e:	230c      	movs	r3, #12
 8001ca0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_ADC_PollForConversion+0x198>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d004      	beq.n	8001cb8 <HAL_ADC_PollForConversion+0x90>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cb6:	d104      	bne.n	8001cc2 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	e003      	b.n	8001cca <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001cc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001cca:	f7ff fd35 	bl	8001738 <HAL_GetTick>
 8001cce:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001cd0:	e021      	b.n	8001d16 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d01d      	beq.n	8001d16 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <HAL_ADC_PollForConversion+0xc8>
 8001ce0:	f7ff fd2a 	bl	8001738 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d212      	bcs.n	8001d16 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10b      	bne.n	8001d16 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f043 0204 	orr.w	r2, r3, #4
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e04f      	b.n	8001db6 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0d6      	beq.n	8001cd2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d131      	bne.n	8001da2 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d12c      	bne.n	8001da2 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d125      	bne.n	8001da2 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d112      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d112      	bne.n	8001da2 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f043 0201 	orr.w	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40
 8001d88:	e00b      	b.n	8001da2 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f043 0220 	orr.w	r2, r3, #32
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f043 0201 	orr.w	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d103      	bne.n	8001db4 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	50000300 	.word	0x50000300

08001dc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b09b      	sub	sp, #108	; 0x6c
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x22>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e2a4      	b.n	800234c <HAL_ADC_ConfigChannel+0x56c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f040 8288 	bne.w	800232a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d81c      	bhi.n	8001e5c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	461a      	mov	r2, r3
 8001e36:	231f      	movs	r3, #31
 8001e38:	4093      	lsls	r3, r2
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	4019      	ands	r1, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
 8001e5a:	e063      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b09      	cmp	r3, #9
 8001e62:	d81e      	bhi.n	8001ea2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	3b1e      	subs	r3, #30
 8001e78:	221f      	movs	r2, #31
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	4019      	ands	r1, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	3b1e      	subs	r3, #30
 8001e94:	fa00 f203 	lsl.w	r2, r0, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea0:	e040      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b0e      	cmp	r3, #14
 8001ea8:	d81e      	bhi.n	8001ee8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	3b3c      	subs	r3, #60	; 0x3c
 8001ebe:	221f      	movs	r2, #31
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	4019      	ands	r1, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	3b3c      	subs	r3, #60	; 0x3c
 8001eda:	fa00 f203 	lsl.w	r2, r0, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ee6:	e01d      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	3b5a      	subs	r3, #90	; 0x5a
 8001efc:	221f      	movs	r2, #31
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	4019      	ands	r1, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	3b5a      	subs	r3, #90	; 0x5a
 8001f18:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 80e5 	bne.w	80020fe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	d91c      	bls.n	8001f76 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6999      	ldr	r1, [r3, #24]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3b1e      	subs	r3, #30
 8001f4e:	2207      	movs	r2, #7
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	4019      	ands	r1, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6898      	ldr	r0, [r3, #8]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	3b1e      	subs	r3, #30
 8001f68:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	619a      	str	r2, [r3, #24]
 8001f74:	e019      	b.n	8001faa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6959      	ldr	r1, [r3, #20]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	2207      	movs	r2, #7
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4019      	ands	r1, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6898      	ldr	r0, [r3, #8]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	08db      	lsrs	r3, r3, #3
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d84f      	bhi.n	800206c <HAL_ADC_ConfigChannel+0x28c>
 8001fcc:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <HAL_ADC_ConfigChannel+0x1f4>)
 8001fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd2:	bf00      	nop
 8001fd4:	08001fe5 	.word	0x08001fe5
 8001fd8:	08002007 	.word	0x08002007
 8001fdc:	08002029 	.word	0x08002029
 8001fe0:	0800204b 	.word	0x0800204b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fea:	4b94      	ldr	r3, [pc, #592]	; (800223c <HAL_ADC_ConfigChannel+0x45c>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	0691      	lsls	r1, r2, #26
 8001ff4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002002:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002004:	e07e      	b.n	8002104 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800200c:	4b8b      	ldr	r3, [pc, #556]	; (800223c <HAL_ADC_ConfigChannel+0x45c>)
 800200e:	4013      	ands	r3, r2
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	0691      	lsls	r1, r2, #26
 8002016:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002018:	430a      	orrs	r2, r1
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002024:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002026:	e06d      	b.n	8002104 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800202e:	4b83      	ldr	r3, [pc, #524]	; (800223c <HAL_ADC_ConfigChannel+0x45c>)
 8002030:	4013      	ands	r3, r2
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	0691      	lsls	r1, r2, #26
 8002038:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800203a:	430a      	orrs	r2, r1
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002046:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002048:	e05c      	b.n	8002104 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002050:	4b7a      	ldr	r3, [pc, #488]	; (800223c <HAL_ADC_ConfigChannel+0x45c>)
 8002052:	4013      	ands	r3, r2
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	0691      	lsls	r1, r2, #26
 800205a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800205c:	430a      	orrs	r2, r1
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002068:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800206a:	e04b      	b.n	8002104 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002072:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	069b      	lsls	r3, r3, #26
 800207c:	429a      	cmp	r2, r3
 800207e:	d107      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800208e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002096:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	069b      	lsls	r3, r3, #26
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d107      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020b2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	069b      	lsls	r3, r3, #26
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d107      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020d6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	069b      	lsls	r3, r3, #26
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d10a      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020fa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80020fc:	e001      	b.n	8002102 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80020fe:	bf00      	nop
 8002100:	e000      	b.n	8002104 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002102:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d108      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x344>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x344>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_ADC_ConfigChannel+0x346>
 8002124:	2300      	movs	r3, #0
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 810a 	bne.w	8002340 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d00f      	beq.n	8002154 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2201      	movs	r2, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	400a      	ands	r2, r1
 800214e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002152:	e049      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2201      	movs	r2, #1
 8002162:	409a      	lsls	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b09      	cmp	r3, #9
 8002174:	d91c      	bls.n	80021b0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6999      	ldr	r1, [r3, #24]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	3b1b      	subs	r3, #27
 8002188:	2207      	movs	r2, #7
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	4019      	ands	r1, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6898      	ldr	r0, [r3, #8]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	3b1b      	subs	r3, #27
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	619a      	str	r2, [r3, #24]
 80021ae:	e01b      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6959      	ldr	r1, [r3, #20]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	2207      	movs	r2, #7
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4019      	ands	r1, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6898      	ldr	r0, [r3, #8]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	4613      	mov	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	fa00 f203 	lsl.w	r2, r0, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_ADC_ConfigChannel+0x460>)
 80021ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b10      	cmp	r3, #16
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d015      	beq.n	800222c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002204:	2b11      	cmp	r3, #17
 8002206:	d105      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002218:	2b12      	cmp	r3, #18
 800221a:	f040 8091 	bne.w	8002340 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800221e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002226:	2b00      	cmp	r3, #0
 8002228:	f040 808a 	bne.w	8002340 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002234:	d108      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x468>
 8002236:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_ADC_ConfigChannel+0x464>)
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	e008      	b.n	800224e <HAL_ADC_ConfigChannel+0x46e>
 800223c:	83fff000 	.word	0x83fff000
 8002240:	50000300 	.word	0x50000300
 8002244:	50000100 	.word	0x50000100
 8002248:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800224c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d108      	bne.n	800226e <HAL_ADC_ConfigChannel+0x48e>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_ADC_ConfigChannel+0x48e>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_ADC_ConfigChannel+0x490>
 800226e:	2300      	movs	r3, #0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d150      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002274:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002276:	2b00      	cmp	r3, #0
 8002278:	d010      	beq.n	800229c <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x4b6>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x4b6>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_ADC_ConfigChannel+0x4b8>
 8002296:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002298:	2b00      	cmp	r3, #0
 800229a:	d13c      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b10      	cmp	r3, #16
 80022a2:	d11d      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x500>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ac:	d118      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80022ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022ba:	4b27      	ldr	r3, [pc, #156]	; (8002358 <HAL_ADC_ConfigChannel+0x578>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a27      	ldr	r2, [pc, #156]	; (800235c <HAL_ADC_ConfigChannel+0x57c>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	0c9a      	lsrs	r2, r3, #18
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022d0:	e002      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f9      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022de:	e02e      	b.n	800233e <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b11      	cmp	r3, #17
 80022e6:	d10b      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x520>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022f0:	d106      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80022f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80022fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022fc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022fe:	e01e      	b.n	800233e <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b12      	cmp	r3, #18
 8002306:	d11a      	bne.n	800233e <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002312:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002314:	e013      	b.n	800233e <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f043 0220 	orr.w	r2, r3, #32
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002328:	e00a      	b.n	8002340 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f043 0220 	orr.w	r2, r3, #32
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800233c:	e000      	b.n	8002340 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800233e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002348:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800234c:	4618      	mov	r0, r3
 800234e:	376c      	adds	r7, #108	; 0x6c
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	20000008 	.word	0x20000008
 800235c:	431bde83 	.word	0x431bde83

08002360 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002360:	b480      	push	{r7}
 8002362:	b099      	sub	sp, #100	; 0x64
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002378:	d102      	bne.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800237a:	4b5a      	ldr	r3, [pc, #360]	; (80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	e002      	b.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002380:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002384:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0a2      	b.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800239a:	2302      	movs	r3, #2
 800239c:	e09b      	b.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d17f      	bne.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d179      	bne.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c0:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80023c2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d040      	beq.n	800244e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80023cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023de:	035b      	lsls	r3, r3, #13
 80023e0:	430b      	orrs	r3, r1
 80023e2:	431a      	orrs	r2, r3
 80023e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d108      	bne.n	8002408 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002408:	2300      	movs	r3, #0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d15c      	bne.n	80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800242a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800242c:	2b00      	cmp	r3, #0
 800242e:	d14b      	bne.n	80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002438:	f023 030f 	bic.w	r3, r3, #15
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	6811      	ldr	r1, [r2, #0]
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	6892      	ldr	r2, [r2, #8]
 8002444:	430a      	orrs	r2, r1
 8002446:	431a      	orrs	r2, r3
 8002448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800244a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800244c:	e03c      	b.n	80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800244e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002458:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d108      	bne.n	800247a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800247a:	2300      	movs	r3, #0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d123      	bne.n	80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d107      	bne.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800249c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d112      	bne.n	80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80024a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024aa:	f023 030f 	bic.w	r3, r3, #15
 80024ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024b0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024b2:	e009      	b.n	80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f043 0220 	orr.w	r2, r3, #32
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80024c6:	e000      	b.n	80024ca <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024c8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80024d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80024d6:	4618      	mov	r0, r3
 80024d8:	3764      	adds	r7, #100	; 0x64
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	50000100 	.word	0x50000100
 80024e8:	50000300 	.word	0x50000300

080024ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d108      	bne.n	8002518 <ADC_Enable+0x2c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <ADC_Enable+0x2c>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <ADC_Enable+0x2e>
 8002518:	2300      	movs	r3, #0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d143      	bne.n	80025a6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <ADC_Enable+0xc4>)
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00d      	beq.n	8002548 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f043 0210 	orr.w	r2, r3, #16
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	f043 0201 	orr.w	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e02f      	b.n	80025a8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002558:	f7ff f8ee 	bl	8001738 <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800255e:	e01b      	b.n	8002598 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002560:	f7ff f8ea 	bl	8001738 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d914      	bls.n	8002598 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d00d      	beq.n	8002598 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f043 0210 	orr.w	r2, r3, #16
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	f043 0201 	orr.w	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e007      	b.n	80025a8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d1dc      	bne.n	8002560 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	8000003f 	.word	0x8000003f

080025b4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d108      	bne.n	80025e0 <ADC_Disable+0x2c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <ADC_Disable+0x2c>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <ADC_Disable+0x2e>
 80025e0:	2300      	movs	r3, #0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d047      	beq.n	8002676 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 030d 	and.w	r3, r3, #13
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d10f      	bne.n	8002614 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0202 	orr.w	r2, r2, #2
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2203      	movs	r2, #3
 800260a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800260c:	f7ff f894 	bl	8001738 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002612:	e029      	b.n	8002668 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f043 0210 	orr.w	r2, r3, #16
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e023      	b.n	8002678 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002630:	f7ff f882 	bl	8001738 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d914      	bls.n	8002668 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d10d      	bne.n	8002668 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f043 0210 	orr.w	r2, r3, #16
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e007      	b.n	8002678 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b01      	cmp	r3, #1
 8002674:	d0dc      	beq.n	8002630 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b2:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db0a      	blt.n	800270e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	490c      	ldr	r1, [pc, #48]	; (8002730 <__NVIC_SetPriority+0x4c>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	440b      	add	r3, r1
 8002708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800270c:	e00a      	b.n	8002724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4908      	ldr	r1, [pc, #32]	; (8002734 <__NVIC_SetPriority+0x50>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3b04      	subs	r3, #4
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	440b      	add	r3, r1
 8002722:	761a      	strb	r2, [r3, #24]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f1c3 0307 	rsb	r3, r3, #7
 8002752:	2b04      	cmp	r3, #4
 8002754:	bf28      	it	cs
 8002756:	2304      	movcs	r3, #4
 8002758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3304      	adds	r3, #4
 800275e:	2b06      	cmp	r3, #6
 8002760:	d902      	bls.n	8002768 <NVIC_EncodePriority+0x30>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3b03      	subs	r3, #3
 8002766:	e000      	b.n	800276a <NVIC_EncodePriority+0x32>
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	401a      	ands	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43d9      	mvns	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	4313      	orrs	r3, r2
         );
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b0:	d301      	bcc.n	80027b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b2:	2301      	movs	r3, #1
 80027b4:	e00f      	b.n	80027d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <SysTick_Config+0x40>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027be:	210f      	movs	r1, #15
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	f7ff ff8e 	bl	80026e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <SysTick_Config+0x40>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ce:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <SysTick_Config+0x40>)
 80027d0:	2207      	movs	r2, #7
 80027d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	e000e010 	.word	0xe000e010

080027e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff47 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800280c:	f7ff ff5c 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 8002810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	6978      	ldr	r0, [r7, #20]
 8002818:	f7ff ff8e 	bl	8002738 <NVIC_EncodePriority>
 800281c:	4602      	mov	r2, r0
 800281e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff5d 	bl	80026e4 <__NVIC_SetPriority>
}
 800282a:	bf00      	nop
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ffb0 	bl	80027a0 <SysTick_Config>
 8002840:	4603      	mov	r3, r0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800285a:	e14e      	b.n	8002afa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	2101      	movs	r1, #1
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	4013      	ands	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8140 	beq.w	8002af4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d005      	beq.n	800288c <HAL_GPIO_Init+0x40>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d130      	bne.n	80028ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c2:	2201      	movs	r2, #1
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	091b      	lsrs	r3, r3, #4
 80028d8:	f003 0201 	and.w	r2, r3, #1
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d017      	beq.n	800292a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	2203      	movs	r2, #3
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d123      	bne.n	800297e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	08da      	lsrs	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3208      	adds	r2, #8
 800293e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	220f      	movs	r2, #15
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	08da      	lsrs	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3208      	adds	r2, #8
 8002978:	6939      	ldr	r1, [r7, #16]
 800297a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	2203      	movs	r2, #3
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0203 	and.w	r2, r3, #3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 809a 	beq.w	8002af4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c0:	4b55      	ldr	r3, [pc, #340]	; (8002b18 <HAL_GPIO_Init+0x2cc>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	4a54      	ldr	r2, [pc, #336]	; (8002b18 <HAL_GPIO_Init+0x2cc>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6193      	str	r3, [r2, #24]
 80029cc:	4b52      	ldr	r3, [pc, #328]	; (8002b18 <HAL_GPIO_Init+0x2cc>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029d8:	4a50      	ldr	r2, [pc, #320]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	3302      	adds	r3, #2
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	220f      	movs	r2, #15
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a02:	d013      	beq.n	8002a2c <HAL_GPIO_Init+0x1e0>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a46      	ldr	r2, [pc, #280]	; (8002b20 <HAL_GPIO_Init+0x2d4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00d      	beq.n	8002a28 <HAL_GPIO_Init+0x1dc>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a45      	ldr	r2, [pc, #276]	; (8002b24 <HAL_GPIO_Init+0x2d8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <HAL_GPIO_Init+0x1d8>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a44      	ldr	r2, [pc, #272]	; (8002b28 <HAL_GPIO_Init+0x2dc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_GPIO_Init+0x1d4>
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e006      	b.n	8002a2e <HAL_GPIO_Init+0x1e2>
 8002a20:	2305      	movs	r3, #5
 8002a22:	e004      	b.n	8002a2e <HAL_GPIO_Init+0x1e2>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e002      	b.n	8002a2e <HAL_GPIO_Init+0x1e2>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_GPIO_Init+0x1e2>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	f002 0203 	and.w	r2, r2, #3
 8002a34:	0092      	lsls	r2, r2, #2
 8002a36:	4093      	lsls	r3, r2
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a3e:	4937      	ldr	r1, [pc, #220]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a4c:	4b37      	ldr	r3, [pc, #220]	; (8002b2c <HAL_GPIO_Init+0x2e0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a70:	4a2e      	ldr	r2, [pc, #184]	; (8002b2c <HAL_GPIO_Init+0x2e0>)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a76:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_GPIO_Init+0x2e0>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a9a:	4a24      	ldr	r2, [pc, #144]	; (8002b2c <HAL_GPIO_Init+0x2e0>)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aa0:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <HAL_GPIO_Init+0x2e0>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ac4:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <HAL_GPIO_Init+0x2e0>)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aca:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <HAL_GPIO_Init+0x2e0>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002aee:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <HAL_GPIO_Init+0x2e0>)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	3301      	adds	r3, #1
 8002af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f47f aea9 	bne.w	800285c <HAL_GPIO_Init+0x10>
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	bf00      	nop
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40010000 	.word	0x40010000
 8002b20:	48000400 	.word	0x48000400
 8002b24:	48000800 	.word	0x48000800
 8002b28:	48000c00 	.word	0x48000c00
 8002b2c:	40010400 	.word	0x40010400

08002b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	887b      	ldrh	r3, [r7, #2]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	e001      	b.n	8002b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b70:	787b      	ldrb	r3, [r7, #1]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b7c:	e002      	b.n	8002b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f001 b823 	b.w	8003bfc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 817d 	beq.w	8002ec6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bcc:	4bbc      	ldr	r3, [pc, #752]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd8:	4bb9      	ldr	r3, [pc, #740]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d15c      	bne.n	8002c9e <HAL_RCC_OscConfig+0x10e>
 8002be4:	4bb6      	ldr	r3, [pc, #728]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d155      	bne.n	8002c9e <HAL_RCC_OscConfig+0x10e>
 8002bf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d102      	bne.n	8002c24 <HAL_RCC_OscConfig+0x94>
 8002c1e:	4ba8      	ldr	r3, [pc, #672]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	e015      	b.n	8002c50 <HAL_RCC_OscConfig+0xc0>
 8002c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c28:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c3c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c40:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002c4c:	4b9c      	ldr	r3, [pc, #624]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c54:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002c58:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c5c:	fa92 f2a2 	rbit	r2, r2
 8002c60:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c64:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c68:	fab2 f282 	clz	r2, r2
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	f042 0220 	orr.w	r2, r2, #32
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	f002 021f 	and.w	r2, r2, #31
 8002c78:	2101      	movs	r1, #1
 8002c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 811f 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x334>
 8002c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 8116 	bne.w	8002ec4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	f000 bfaf 	b.w	8003bfc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x12e>
 8002cb0:	4b83      	ldr	r3, [pc, #524]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a82      	ldr	r2, [pc, #520]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	e036      	b.n	8002d2c <HAL_RCC_OscConfig+0x19c>
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x158>
 8002cce:	4b7c      	ldr	r3, [pc, #496]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a7b      	ldr	r2, [pc, #492]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4b79      	ldr	r3, [pc, #484]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a78      	ldr	r2, [pc, #480]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e021      	b.n	8002d2c <HAL_RCC_OscConfig+0x19c>
 8002ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x184>
 8002cfa:	4b71      	ldr	r3, [pc, #452]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a70      	ldr	r2, [pc, #448]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b6e      	ldr	r3, [pc, #440]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a6d      	ldr	r2, [pc, #436]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e00b      	b.n	8002d2c <HAL_RCC_OscConfig+0x19c>
 8002d14:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a69      	ldr	r2, [pc, #420]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a66      	ldr	r2, [pc, #408]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d2a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d2c:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	f023 020f 	bic.w	r2, r3, #15
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	495f      	ldr	r1, [pc, #380]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d059      	beq.n	8002e0a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d56:	f7fe fcef 	bl	8001738 <HAL_GetTick>
 8002d5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fe fcea 	bl	8001738 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b64      	cmp	r3, #100	; 0x64
 8002d6e:	d902      	bls.n	8002d76 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	f000 bf43 	b.w	8003bfc <HAL_RCC_OscConfig+0x106c>
 8002d76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d7a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d8a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d102      	bne.n	8002da8 <HAL_RCC_OscConfig+0x218>
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	e015      	b.n	8002dd4 <HAL_RCC_OscConfig+0x244>
 8002da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002dc4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dd8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ddc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002de0:	fa92 f2a2 	rbit	r2, r2
 8002de4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002de8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002dec:	fab2 f282 	clz	r2, r2
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	f042 0220 	orr.w	r2, r2, #32
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	f002 021f 	and.w	r2, r2, #31
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ab      	beq.n	8002d60 <HAL_RCC_OscConfig+0x1d0>
 8002e08:	e05d      	b.n	8002ec6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fe fc95 	bl	8001738 <HAL_GetTick>
 8002e0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e14:	f7fe fc90 	bl	8001738 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b64      	cmp	r3, #100	; 0x64
 8002e22:	d902      	bls.n	8002e2a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	f000 bee9 	b.w	8003bfc <HAL_RCC_OscConfig+0x106c>
 8002e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e2e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002e3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d102      	bne.n	8002e5c <HAL_RCC_OscConfig+0x2cc>
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	e015      	b.n	8002e88 <HAL_RCC_OscConfig+0x2f8>
 8002e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e60:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e74:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e78:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_RCC_OscConfig+0x330>)
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e8c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e90:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e94:	fa92 f2a2 	rbit	r2, r2
 8002e98:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e9c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ea0:	fab2 f282 	clz	r2, r2
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	f042 0220 	orr.w	r2, r2, #32
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	f002 021f 	and.w	r2, r2, #31
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1ab      	bne.n	8002e14 <HAL_RCC_OscConfig+0x284>
 8002ebc:	e003      	b.n	8002ec6 <HAL_RCC_OscConfig+0x336>
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 817d 	beq.w	80031d6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002edc:	4ba6      	ldr	r3, [pc, #664]	; (8003178 <HAL_RCC_OscConfig+0x5e8>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ee8:	4ba3      	ldr	r3, [pc, #652]	; (8003178 <HAL_RCC_OscConfig+0x5e8>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d172      	bne.n	8002fda <HAL_RCC_OscConfig+0x44a>
 8002ef4:	4ba0      	ldr	r3, [pc, #640]	; (8003178 <HAL_RCC_OscConfig+0x5e8>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d16c      	bne.n	8002fda <HAL_RCC_OscConfig+0x44a>
 8002f00:	2302      	movs	r3, #2
 8002f02:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002f12:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d102      	bne.n	8002f30 <HAL_RCC_OscConfig+0x3a0>
 8002f2a:	4b93      	ldr	r3, [pc, #588]	; (8003178 <HAL_RCC_OscConfig+0x5e8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	e013      	b.n	8002f58 <HAL_RCC_OscConfig+0x3c8>
 8002f30:	2302      	movs	r3, #2
 8002f32:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f42:	2302      	movs	r3, #2
 8002f44:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f54:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x5e8>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	2202      	movs	r2, #2
 8002f5a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f5e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f62:	fa92 f2a2 	rbit	r2, r2
 8002f66:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f6a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f6e:	fab2 f282 	clz	r2, r2
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	f042 0220 	orr.w	r2, r2, #32
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	f002 021f 	and.w	r2, r2, #31
 8002f7e:	2101      	movs	r1, #1
 8002f80:	fa01 f202 	lsl.w	r2, r1, r2
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x410>
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d002      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f000 be2e 	b.w	8003bfc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa0:	4b75      	ldr	r3, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x5e8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	21f8      	movs	r1, #248	; 0xf8
 8002fb6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002fbe:	fa91 f1a1 	rbit	r1, r1
 8002fc2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002fc6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002fca:	fab1 f181 	clz	r1, r1
 8002fce:	b2c9      	uxtb	r1, r1
 8002fd0:	408b      	lsls	r3, r1
 8002fd2:	4969      	ldr	r1, [pc, #420]	; (8003178 <HAL_RCC_OscConfig+0x5e8>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd8:	e0fd      	b.n	80031d6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8088 	beq.w	80030fc <HAL_RCC_OscConfig+0x56c>
 8002fec:	2301      	movs	r3, #1
 8002fee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002ffe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800300c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	461a      	mov	r2, r3
 8003014:	2301      	movs	r3, #1
 8003016:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe fb8e 	bl	8001738 <HAL_GetTick>
 800301c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003022:	f7fe fb89 	bl	8001738 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d902      	bls.n	8003038 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	f000 bde2 	b.w	8003bfc <HAL_RCC_OscConfig+0x106c>
 8003038:	2302      	movs	r3, #2
 800303a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800304a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b01      	cmp	r3, #1
 8003060:	d102      	bne.n	8003068 <HAL_RCC_OscConfig+0x4d8>
 8003062:	4b45      	ldr	r3, [pc, #276]	; (8003178 <HAL_RCC_OscConfig+0x5e8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	e013      	b.n	8003090 <HAL_RCC_OscConfig+0x500>
 8003068:	2302      	movs	r3, #2
 800306a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800307a:	2302      	movs	r3, #2
 800307c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003080:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800308c:	4b3a      	ldr	r3, [pc, #232]	; (8003178 <HAL_RCC_OscConfig+0x5e8>)
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2202      	movs	r2, #2
 8003092:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003096:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800309a:	fa92 f2a2 	rbit	r2, r2
 800309e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80030a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80030a6:	fab2 f282 	clz	r2, r2
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	f042 0220 	orr.w	r2, r2, #32
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	f002 021f 	and.w	r2, r2, #31
 80030b6:	2101      	movs	r1, #1
 80030b8:	fa01 f202 	lsl.w	r2, r1, r2
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0af      	beq.n	8003022 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c2:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <HAL_RCC_OscConfig+0x5e8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	21f8      	movs	r1, #248	; 0xf8
 80030d8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80030e0:	fa91 f1a1 	rbit	r1, r1
 80030e4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80030e8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80030ec:	fab1 f181 	clz	r1, r1
 80030f0:	b2c9      	uxtb	r1, r1
 80030f2:	408b      	lsls	r3, r1
 80030f4:	4920      	ldr	r1, [pc, #128]	; (8003178 <HAL_RCC_OscConfig+0x5e8>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]
 80030fa:	e06c      	b.n	80031d6 <HAL_RCC_OscConfig+0x646>
 80030fc:	2301      	movs	r3, #1
 80030fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800310e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800311c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	461a      	mov	r2, r3
 8003124:	2300      	movs	r3, #0
 8003126:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe fb06 	bl	8001738 <HAL_GetTick>
 800312c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003132:	f7fe fb01 	bl	8001738 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d902      	bls.n	8003148 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	f000 bd5a 	b.w	8003bfc <HAL_RCC_OscConfig+0x106c>
 8003148:	2302      	movs	r3, #2
 800314a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800315a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	d104      	bne.n	800317c <HAL_RCC_OscConfig+0x5ec>
 8003172:	4b01      	ldr	r3, [pc, #4]	; (8003178 <HAL_RCC_OscConfig+0x5e8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	e015      	b.n	80031a4 <HAL_RCC_OscConfig+0x614>
 8003178:	40021000 	.word	0x40021000
 800317c:	2302      	movs	r3, #2
 800317e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800318e:	2302      	movs	r3, #2
 8003190:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003194:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80031a0:	4bc8      	ldr	r3, [pc, #800]	; (80034c4 <HAL_RCC_OscConfig+0x934>)
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	2202      	movs	r2, #2
 80031a6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80031aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80031ae:	fa92 f2a2 	rbit	r2, r2
 80031b2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80031b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80031ba:	fab2 f282 	clz	r2, r2
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	f042 0220 	orr.w	r2, r2, #32
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	f002 021f 	and.w	r2, r2, #31
 80031ca:	2101      	movs	r1, #1
 80031cc:	fa01 f202 	lsl.w	r2, r1, r2
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ad      	bne.n	8003132 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8110 	beq.w	800340c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d079      	beq.n	80032f0 <HAL_RCC_OscConfig+0x760>
 80031fc:	2301      	movs	r3, #1
 80031fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800320e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	4bab      	ldr	r3, [pc, #684]	; (80034c8 <HAL_RCC_OscConfig+0x938>)
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	461a      	mov	r2, r3
 8003222:	2301      	movs	r3, #1
 8003224:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003226:	f7fe fa87 	bl	8001738 <HAL_GetTick>
 800322a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003230:	f7fe fa82 	bl	8001738 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d902      	bls.n	8003246 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	f000 bcdb 	b.w	8003bfc <HAL_RCC_OscConfig+0x106c>
 8003246:	2302      	movs	r3, #2
 8003248:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003260:	2202      	movs	r2, #2
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003268:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	fa93 f2a3 	rbit	r2, r3
 8003272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003276:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003284:	2202      	movs	r2, #2
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	fa93 f2a3 	rbit	r2, r3
 8003296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800329e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a0:	4b88      	ldr	r3, [pc, #544]	; (80034c4 <HAL_RCC_OscConfig+0x934>)
 80032a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80032ac:	2102      	movs	r1, #2
 80032ae:	6019      	str	r1, [r3, #0]
 80032b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	fa93 f1a3 	rbit	r1, r3
 80032be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032c6:	6019      	str	r1, [r3, #0]
  return result;
 80032c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	2101      	movs	r1, #1
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0a0      	beq.n	8003230 <HAL_RCC_OscConfig+0x6a0>
 80032ee:	e08d      	b.n	800340c <HAL_RCC_OscConfig+0x87c>
 80032f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003300:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	fa93 f2a3 	rbit	r2, r3
 800330a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003312:	601a      	str	r2, [r3, #0]
  return result;
 8003314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003318:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800331c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800331e:	fab3 f383 	clz	r3, r3
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	4b68      	ldr	r3, [pc, #416]	; (80034c8 <HAL_RCC_OscConfig+0x938>)
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	461a      	mov	r2, r3
 800332e:	2300      	movs	r3, #0
 8003330:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003332:	f7fe fa01 	bl	8001738 <HAL_GetTick>
 8003336:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333c:	f7fe f9fc 	bl	8001738 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d902      	bls.n	8003352 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	f000 bc55 	b.w	8003bfc <HAL_RCC_OscConfig+0x106c>
 8003352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003356:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800335a:	2202      	movs	r2, #2
 800335c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	fa93 f2a3 	rbit	r2, r3
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800337e:	2202      	movs	r2, #2
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003386:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	fa93 f2a3 	rbit	r2, r3
 8003390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003394:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80033a2:	2202      	movs	r2, #2
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	fa93 f2a3 	rbit	r2, r3
 80033b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033be:	4b41      	ldr	r3, [pc, #260]	; (80034c4 <HAL_RCC_OscConfig+0x934>)
 80033c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80033ca:	2102      	movs	r1, #2
 80033cc:	6019      	str	r1, [r3, #0]
 80033ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f1a3 	rbit	r1, r3
 80033dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033e4:	6019      	str	r1, [r3, #0]
  return result;
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	2101      	movs	r1, #1
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d197      	bne.n	800333c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003410:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 81a1 	beq.w	8003764 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003428:	4b26      	ldr	r3, [pc, #152]	; (80034c4 <HAL_RCC_OscConfig+0x934>)
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d116      	bne.n	8003462 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003434:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <HAL_RCC_OscConfig+0x934>)
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <HAL_RCC_OscConfig+0x934>)
 800343a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343e:	61d3      	str	r3, [r2, #28]
 8003440:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_RCC_OscConfig+0x934>)
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003456:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800345a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003462:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <HAL_RCC_OscConfig+0x93c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d11a      	bne.n	80034a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346e:	4b17      	ldr	r3, [pc, #92]	; (80034cc <HAL_RCC_OscConfig+0x93c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a16      	ldr	r2, [pc, #88]	; (80034cc <HAL_RCC_OscConfig+0x93c>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003478:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347a:	f7fe f95d 	bl	8001738 <HAL_GetTick>
 800347e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	e009      	b.n	8003498 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003484:	f7fe f958 	bl	8001738 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b64      	cmp	r3, #100	; 0x64
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e3b1      	b.n	8003bfc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <HAL_RCC_OscConfig+0x93c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0ef      	beq.n	8003484 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d10d      	bne.n	80034d0 <HAL_RCC_OscConfig+0x940>
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <HAL_RCC_OscConfig+0x934>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4a02      	ldr	r2, [pc, #8]	; (80034c4 <HAL_RCC_OscConfig+0x934>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6213      	str	r3, [r2, #32]
 80034c0:	e03c      	b.n	800353c <HAL_RCC_OscConfig+0x9ac>
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000
 80034c8:	10908120 	.word	0x10908120
 80034cc:	40007000 	.word	0x40007000
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10c      	bne.n	80034fa <HAL_RCC_OscConfig+0x96a>
 80034e0:	4bc1      	ldr	r3, [pc, #772]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4ac0      	ldr	r2, [pc, #768]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	6213      	str	r3, [r2, #32]
 80034ec:	4bbe      	ldr	r3, [pc, #760]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4abd      	ldr	r2, [pc, #756]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 80034f2:	f023 0304 	bic.w	r3, r3, #4
 80034f6:	6213      	str	r3, [r2, #32]
 80034f8:	e020      	b.n	800353c <HAL_RCC_OscConfig+0x9ac>
 80034fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b05      	cmp	r3, #5
 8003508:	d10c      	bne.n	8003524 <HAL_RCC_OscConfig+0x994>
 800350a:	4bb7      	ldr	r3, [pc, #732]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	4ab6      	ldr	r2, [pc, #728]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	6213      	str	r3, [r2, #32]
 8003516:	4bb4      	ldr	r3, [pc, #720]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	4ab3      	ldr	r2, [pc, #716]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6213      	str	r3, [r2, #32]
 8003522:	e00b      	b.n	800353c <HAL_RCC_OscConfig+0x9ac>
 8003524:	4bb0      	ldr	r3, [pc, #704]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4aaf      	ldr	r2, [pc, #700]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	4bad      	ldr	r3, [pc, #692]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4aac      	ldr	r2, [pc, #688]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 8003536:	f023 0304 	bic.w	r3, r3, #4
 800353a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800353c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003540:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8081 	beq.w	8003650 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354e:	f7fe f8f3 	bl	8001738 <HAL_GetTick>
 8003552:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7fe f8ee 	bl	8001738 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e345      	b.n	8003bfc <HAL_RCC_OscConfig+0x106c>
 8003570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003574:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003578:	2202      	movs	r2, #2
 800357a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003580:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	fa93 f2a3 	rbit	r2, r3
 800358a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003598:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800359c:	2202      	movs	r2, #2
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	fa93 f2a3 	rbit	r2, r3
 80035ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80035b6:	601a      	str	r2, [r3, #0]
  return result;
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80035c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d102      	bne.n	80035dc <HAL_RCC_OscConfig+0xa4c>
 80035d6:	4b84      	ldr	r3, [pc, #528]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	e013      	b.n	8003604 <HAL_RCC_OscConfig+0xa74>
 80035dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035e4:	2202      	movs	r2, #2
 80035e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	fa93 f2a3 	rbit	r2, r3
 80035f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	4b79      	ldr	r3, [pc, #484]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003608:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800360c:	2102      	movs	r1, #2
 800360e:	6011      	str	r1, [r2, #0]
 8003610:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003614:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	fa92 f1a2 	rbit	r1, r2
 800361e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003622:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003626:	6011      	str	r1, [r2, #0]
  return result;
 8003628:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800362c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	fab2 f282 	clz	r2, r2
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	f002 021f 	and.w	r2, r2, #31
 8003642:	2101      	movs	r1, #1
 8003644:	fa01 f202 	lsl.w	r2, r1, r2
 8003648:	4013      	ands	r3, r2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d084      	beq.n	8003558 <HAL_RCC_OscConfig+0x9c8>
 800364e:	e07f      	b.n	8003750 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003650:	f7fe f872 	bl	8001738 <HAL_GetTick>
 8003654:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003658:	e00b      	b.n	8003672 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fe f86d 	bl	8001738 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e2c4      	b.n	8003bfc <HAL_RCC_OscConfig+0x106c>
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800367a:	2202      	movs	r2, #2
 800367c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	fa93 f2a3 	rbit	r2, r3
 800368c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003690:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800369e:	2202      	movs	r2, #2
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	fa93 f2a3 	rbit	r2, r3
 80036b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80036b8:	601a      	str	r2, [r3, #0]
  return result;
 80036ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036be:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80036c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c4:	fab3 f383 	clz	r3, r3
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f043 0302 	orr.w	r3, r3, #2
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d102      	bne.n	80036de <HAL_RCC_OscConfig+0xb4e>
 80036d8:	4b43      	ldr	r3, [pc, #268]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	e013      	b.n	8003706 <HAL_RCC_OscConfig+0xb76>
 80036de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036e6:	2202      	movs	r2, #2
 80036e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	fa93 f2a3 	rbit	r2, r3
 80036f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800370a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800370e:	2102      	movs	r1, #2
 8003710:	6011      	str	r1, [r2, #0]
 8003712:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003716:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	fa92 f1a2 	rbit	r1, r2
 8003720:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003724:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003728:	6011      	str	r1, [r2, #0]
  return result;
 800372a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800372e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	fab2 f282 	clz	r2, r2
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	f002 021f 	and.w	r2, r2, #31
 8003744:	2101      	movs	r1, #1
 8003746:	fa01 f202 	lsl.w	r2, r1, r2
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d184      	bne.n	800365a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003750:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003758:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	4a22      	ldr	r2, [pc, #136]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 800375e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003762:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003768:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8242 	beq.w	8003bfa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003776:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <HAL_RCC_OscConfig+0xc58>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b08      	cmp	r3, #8
 8003780:	f000 8213 	beq.w	8003baa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003788:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	2b02      	cmp	r3, #2
 8003792:	f040 8162 	bne.w	8003a5a <HAL_RCC_OscConfig+0xeca>
 8003796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800379e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	fa93 f2a3 	rbit	r2, r3
 80037b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80037ba:	601a      	str	r2, [r3, #0]
  return result;
 80037bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80037c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	461a      	mov	r2, r3
 80037d8:	2300      	movs	r3, #0
 80037da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fd ffac 	bl	8001738 <HAL_GetTick>
 80037e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e4:	e00c      	b.n	8003800 <HAL_RCC_OscConfig+0xc70>
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fd ffa4 	bl	8001738 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e1fd      	b.n	8003bfc <HAL_RCC_OscConfig+0x106c>
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800380c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003812:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	fa93 f2a3 	rbit	r2, r3
 800381c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003820:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003824:	601a      	str	r2, [r3, #0]
  return result;
 8003826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800382e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003830:	fab3 f383 	clz	r3, r3
 8003834:	b2db      	uxtb	r3, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	d102      	bne.n	800384a <HAL_RCC_OscConfig+0xcba>
 8003844:	4bb0      	ldr	r3, [pc, #704]	; (8003b08 <HAL_RCC_OscConfig+0xf78>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	e027      	b.n	800389a <HAL_RCC_OscConfig+0xd0a>
 800384a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003852:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	fa93 f2a3 	rbit	r2, r3
 8003866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003874:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003878:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003882:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	fa93 f2a3 	rbit	r2, r3
 800388c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003890:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	4b9c      	ldr	r3, [pc, #624]	; (8003b08 <HAL_RCC_OscConfig+0xf78>)
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800389e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80038a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038a6:	6011      	str	r1, [r2, #0]
 80038a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038ac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	fa92 f1a2 	rbit	r1, r2
 80038b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038ba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80038be:	6011      	str	r1, [r2, #0]
  return result;
 80038c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038c4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80038c8:	6812      	ldr	r2, [r2, #0]
 80038ca:	fab2 f282 	clz	r2, r2
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	f042 0220 	orr.w	r2, r2, #32
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	f002 021f 	and.w	r2, r2, #31
 80038da:	2101      	movs	r1, #1
 80038dc:	fa01 f202 	lsl.w	r2, r1, r2
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d182      	bne.n	80037ec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038e6:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <HAL_RCC_OscConfig+0xf78>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	430b      	orrs	r3, r1
 8003908:	497f      	ldr	r1, [pc, #508]	; (8003b08 <HAL_RCC_OscConfig+0xf78>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]
 800390e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003912:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003916:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800391a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003920:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	fa93 f2a3 	rbit	r2, r3
 800392a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003932:	601a      	str	r2, [r3, #0]
  return result;
 8003934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003938:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800393c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800393e:	fab3 f383 	clz	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003948:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	461a      	mov	r2, r3
 8003950:	2301      	movs	r3, #1
 8003952:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fd fef0 	bl	8001738 <HAL_GetTick>
 8003958:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800395c:	e009      	b.n	8003972 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395e:	f7fd feeb 	bl	8001738 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e144      	b.n	8003bfc <HAL_RCC_OscConfig+0x106c>
 8003972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003976:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800397a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800397e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003984:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	fa93 f2a3 	rbit	r2, r3
 800398e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003992:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003996:	601a      	str	r2, [r3, #0]
  return result;
 8003998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80039a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <HAL_RCC_OscConfig+0xe2c>
 80039b6:	4b54      	ldr	r3, [pc, #336]	; (8003b08 <HAL_RCC_OscConfig+0xf78>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	e027      	b.n	8003a0c <HAL_RCC_OscConfig+0xe7c>
 80039bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80039c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	fa93 f2a3 	rbit	r2, r3
 80039d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039dc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80039ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	fa93 f2a3 	rbit	r2, r3
 80039fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a02:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	4b3f      	ldr	r3, [pc, #252]	; (8003b08 <HAL_RCC_OscConfig+0xf78>)
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a10:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003a14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a18:	6011      	str	r1, [r2, #0]
 8003a1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a1e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	fa92 f1a2 	rbit	r1, r2
 8003a28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a2c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a30:	6011      	str	r1, [r2, #0]
  return result;
 8003a32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a36:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	fab2 f282 	clz	r2, r2
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	f042 0220 	orr.w	r2, r2, #32
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	f002 021f 	and.w	r2, r2, #31
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d082      	beq.n	800395e <HAL_RCC_OscConfig+0xdce>
 8003a58:	e0cf      	b.n	8003bfa <HAL_RCC_OscConfig+0x106a>
 8003a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	fa93 f2a3 	rbit	r2, r3
 8003a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a7e:	601a      	str	r2, [r3, #0]
  return result;
 8003a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a84:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a88:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fd fe4a 	bl	8001738 <HAL_GetTick>
 8003aa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa8:	e009      	b.n	8003abe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aaa:	f7fd fe45 	bl	8001738 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e09e      	b.n	8003bfc <HAL_RCC_OscConfig+0x106c>
 8003abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ac6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	fa93 f2a3 	rbit	r2, r3
 8003ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ade:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ae2:	601a      	str	r2, [r3, #0]
  return result;
 8003ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003aec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	095b      	lsrs	r3, r3, #5
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d104      	bne.n	8003b0c <HAL_RCC_OscConfig+0xf7c>
 8003b02:	4b01      	ldr	r3, [pc, #4]	; (8003b08 <HAL_RCC_OscConfig+0xf78>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	e029      	b.n	8003b5c <HAL_RCC_OscConfig+0xfcc>
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b10:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	fa93 f2a3 	rbit	r2, r3
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b36:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b44:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	fa93 f2a3 	rbit	r2, r3
 8003b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b52:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <HAL_RCC_OscConfig+0x1078>)
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b60:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b68:	6011      	str	r1, [r2, #0]
 8003b6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b6e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	fa92 f1a2 	rbit	r1, r2
 8003b78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b7c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b80:	6011      	str	r1, [r2, #0]
  return result;
 8003b82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b86:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	fab2 f282 	clz	r2, r2
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	f042 0220 	orr.w	r2, r2, #32
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f002 021f 	and.w	r2, r2, #31
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d180      	bne.n	8003aaa <HAL_RCC_OscConfig+0xf1a>
 8003ba8:	e027      	b.n	8003bfa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e01e      	b.n	8003bfc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCC_OscConfig+0x1078>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bc6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003bca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d10b      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003bde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003be2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d001      	beq.n	8003bfa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000

08003c0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b09e      	sub	sp, #120	; 0x78
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e162      	b.n	8003eea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c24:	4b90      	ldr	r3, [pc, #576]	; (8003e68 <HAL_RCC_ClockConfig+0x25c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d910      	bls.n	8003c54 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b8d      	ldr	r3, [pc, #564]	; (8003e68 <HAL_RCC_ClockConfig+0x25c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 0207 	bic.w	r2, r3, #7
 8003c3a:	498b      	ldr	r1, [pc, #556]	; (8003e68 <HAL_RCC_ClockConfig+0x25c>)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b89      	ldr	r3, [pc, #548]	; (8003e68 <HAL_RCC_ClockConfig+0x25c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e14a      	b.n	8003eea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c60:	4b82      	ldr	r3, [pc, #520]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	497f      	ldr	r1, [pc, #508]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80dc 	beq.w	8003e38 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d13c      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xf6>
 8003c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c8c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c90:	fa93 f3a3 	rbit	r3, r3
 8003c94:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c98:	fab3 f383 	clz	r3, r3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d102      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xa6>
 8003cac:	4b6f      	ldr	r3, [pc, #444]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	e00f      	b.n	8003cd2 <HAL_RCC_ClockConfig+0xc6>
 8003cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	667b      	str	r3, [r7, #100]	; 0x64
 8003cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cc8:	fa93 f3a3 	rbit	r3, r3
 8003ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cce:	4b67      	ldr	r3, [pc, #412]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cd6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cda:	fa92 f2a2 	rbit	r2, r2
 8003cde:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ce0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ce2:	fab2 f282 	clz	r2, r2
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	f042 0220 	orr.w	r2, r2, #32
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	f002 021f 	and.w	r2, r2, #31
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d17b      	bne.n	8003df6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e0f3      	b.n	8003eea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d13c      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x178>
 8003d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	fab3 f383 	clz	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d102      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x128>
 8003d2e:	4b4f      	ldr	r3, [pc, #316]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	e00f      	b.n	8003d54 <HAL_RCC_ClockConfig+0x148>
 8003d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	647b      	str	r3, [r7, #68]	; 0x44
 8003d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d46:	643b      	str	r3, [r7, #64]	; 0x40
 8003d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4a:	fa93 f3a3 	rbit	r3, r3
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d50:	4b46      	ldr	r3, [pc, #280]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d58:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d5c:	fa92 f2a2 	rbit	r2, r2
 8003d60:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d64:	fab2 f282 	clz	r2, r2
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	f042 0220 	orr.w	r2, r2, #32
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	f002 021f 	and.w	r2, r2, #31
 8003d74:	2101      	movs	r1, #1
 8003d76:	fa01 f202 	lsl.w	r2, r1, r2
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d13a      	bne.n	8003df6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0b2      	b.n	8003eea <HAL_RCC_ClockConfig+0x2de>
 8003d84:	2302      	movs	r3, #2
 8003d86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	fa93 f3a3 	rbit	r3, r3
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d102      	bne.n	8003dac <HAL_RCC_ClockConfig+0x1a0>
 8003da6:	4b31      	ldr	r3, [pc, #196]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	e00d      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1bc>
 8003dac:	2302      	movs	r3, #2
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
 8003db8:	2302      	movs	r3, #2
 8003dba:	623b      	str	r3, [r7, #32]
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	2202      	movs	r2, #2
 8003dca:	61ba      	str	r2, [r7, #24]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	fa92 f2a2 	rbit	r2, r2
 8003dd2:	617a      	str	r2, [r7, #20]
  return result;
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	fab2 f282 	clz	r2, r2
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	f042 0220 	orr.w	r2, r2, #32
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	f002 021f 	and.w	r2, r2, #31
 8003de6:	2101      	movs	r1, #1
 8003de8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e079      	b.n	8003eea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df6:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	491a      	ldr	r1, [pc, #104]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e08:	f7fd fc96 	bl	8001738 <HAL_GetTick>
 8003e0c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e10:	f7fd fc92 	bl	8001738 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e061      	b.n	8003eea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 020c 	and.w	r2, r3, #12
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1eb      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_ClockConfig+0x25c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d214      	bcs.n	8003e70 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <HAL_RCC_ClockConfig+0x25c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 0207 	bic.w	r2, r3, #7
 8003e4e:	4906      	ldr	r1, [pc, #24]	; (8003e68 <HAL_RCC_ClockConfig+0x25c>)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <HAL_RCC_ClockConfig+0x25c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e040      	b.n	8003eea <HAL_RCC_ClockConfig+0x2de>
 8003e68:	40022000 	.word	0x40022000
 8003e6c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	491a      	ldr	r1, [pc, #104]	; (8003ef4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e9a:	4b16      	ldr	r3, [pc, #88]	; (8003ef4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4912      	ldr	r1, [pc, #72]	; (8003ef4 <HAL_RCC_ClockConfig+0x2e8>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003eae:	f000 f829 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003eb2:	4601      	mov	r1, r0
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <HAL_RCC_ClockConfig+0x2e8>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ebc:	22f0      	movs	r2, #240	; 0xf0
 8003ebe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	fa92 f2a2 	rbit	r2, r2
 8003ec6:	60fa      	str	r2, [r7, #12]
  return result;
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	fab2 f282 	clz	r2, r2
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	40d3      	lsrs	r3, r2
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <HAL_RCC_ClockConfig+0x2ec>)
 8003ed4:	5cd3      	ldrb	r3, [r2, r3]
 8003ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8003eda:	4a08      	ldr	r2, [pc, #32]	; (8003efc <HAL_RCC_ClockConfig+0x2f0>)
 8003edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ede:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <HAL_RCC_ClockConfig+0x2f4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fd fbe4 	bl	80016b0 <HAL_InitTick>
  
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3778      	adds	r7, #120	; 0x78
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	08008620 	.word	0x08008620
 8003efc:	20000008 	.word	0x20000008
 8003f00:	2000000c 	.word	0x2000000c

08003f04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b08b      	sub	sp, #44	; 0x2c
 8003f08:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	2300      	movs	r3, #0
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003f1e:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d002      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x30>
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d003      	beq.n	8003f3a <HAL_RCC_GetSysClockFreq+0x36>
 8003f32:	e03c      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f34:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f36:	623b      	str	r3, [r7, #32]
      break;
 8003f38:	e03c      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f40:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f44:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	fa92 f2a2 	rbit	r2, r2
 8003f4c:	607a      	str	r2, [r7, #4]
  return result;
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	fab2 f282 	clz	r2, r2
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	40d3      	lsrs	r3, r2
 8003f58:	4a1c      	ldr	r2, [pc, #112]	; (8003fcc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
 8003f5c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f5e:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	220f      	movs	r2, #15
 8003f68:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	fa92 f2a2 	rbit	r2, r2
 8003f70:	60fa      	str	r2, [r7, #12]
  return result;
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	fab2 f282 	clz	r2, r2
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	40d3      	lsrs	r3, r2
 8003f7c:	4a14      	ldr	r2, [pc, #80]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f7e:	5cd3      	ldrb	r3, [r2, r3]
 8003f80:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f8c:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	fb02 f303 	mul.w	r3, r2, r3
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9c:	e004      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	4a0c      	ldr	r2, [pc, #48]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	623b      	str	r3, [r7, #32]
      break;
 8003fac:	e002      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fae:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fb0:	623b      	str	r3, [r7, #32]
      break;
 8003fb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	372c      	adds	r7, #44	; 0x2c
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	007a1200 	.word	0x007a1200
 8003fcc:	08008638 	.word	0x08008638
 8003fd0:	08008648 	.word	0x08008648
 8003fd4:	003d0900 	.word	0x003d0900

08003fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fdc:	4b03      	ldr	r3, [pc, #12]	; (8003fec <HAL_RCC_GetHCLKFreq+0x14>)
 8003fde:	681b      	ldr	r3, [r3, #0]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000008 	.word	0x20000008

08003ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ff6:	f7ff ffef 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8003ffa:	4601      	mov	r1, r0
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004004:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004008:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	fa92 f2a2 	rbit	r2, r2
 8004010:	603a      	str	r2, [r7, #0]
  return result;
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	fab2 f282 	clz	r2, r2
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	40d3      	lsrs	r3, r2
 800401c:	4a04      	ldr	r2, [pc, #16]	; (8004030 <HAL_RCC_GetPCLK1Freq+0x40>)
 800401e:	5cd3      	ldrb	r3, [r2, r3]
 8004020:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40021000 	.word	0x40021000
 8004030:	08008630 	.word	0x08008630

08004034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800403a:	f7ff ffcd 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 800403e:	4601      	mov	r1, r0
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004048:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800404c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	fa92 f2a2 	rbit	r2, r2
 8004054:	603a      	str	r2, [r7, #0]
  return result;
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	fab2 f282 	clz	r2, r2
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	40d3      	lsrs	r3, r2
 8004060:	4a04      	ldr	r2, [pc, #16]	; (8004074 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004062:	5cd3      	ldrb	r3, [r2, r3]
 8004064:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40021000 	.word	0x40021000
 8004074:	08008630 	.word	0x08008630

08004078 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b092      	sub	sp, #72	; 0x48
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004088:	2300      	movs	r3, #0
 800408a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80cd 	beq.w	8004236 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409c:	4b8e      	ldr	r3, [pc, #568]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10e      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a8:	4b8b      	ldr	r3, [pc, #556]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	4a8a      	ldr	r2, [pc, #552]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b2:	61d3      	str	r3, [r2, #28]
 80040b4:	4b88      	ldr	r3, [pc, #544]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c6:	4b85      	ldr	r3, [pc, #532]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d118      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d2:	4b82      	ldr	r3, [pc, #520]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a81      	ldr	r2, [pc, #516]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040de:	f7fd fb2b 	bl	8001738 <HAL_GetTick>
 80040e2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	e008      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e6:	f7fd fb27 	bl	8001738 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b64      	cmp	r3, #100	; 0x64
 80040f2:	d901      	bls.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e0ea      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f8:	4b78      	ldr	r3, [pc, #480]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004104:	4b74      	ldr	r3, [pc, #464]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800410e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d07d      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800411e:	429a      	cmp	r2, r3
 8004120:	d076      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004122:	4b6d      	ldr	r3, [pc, #436]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800412c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004130:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800413c:	fab3 f383 	clz	r3, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	4b66      	ldr	r3, [pc, #408]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	461a      	mov	r2, r3
 800414c:	2301      	movs	r3, #1
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004154:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004158:	fa93 f3a3 	rbit	r3, r3
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800415e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004160:	fab3 f383 	clz	r3, r3
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	4b5d      	ldr	r3, [pc, #372]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	461a      	mov	r2, r3
 8004170:	2300      	movs	r3, #0
 8004172:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004174:	4a58      	ldr	r2, [pc, #352]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004178:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800417a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d045      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fd fad8 	bl	8001738 <HAL_GetTick>
 8004188:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418a:	e00a      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418c:	f7fd fad4 	bl	8001738 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	; 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e095      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x256>
 80041a2:	2302      	movs	r3, #2
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	fa93 f3a3 	rbit	r3, r3
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
 80041ae:	2302      	movs	r3, #2
 80041b0:	623b      	str	r3, [r7, #32]
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	61fb      	str	r3, [r7, #28]
  return result;
 80041ba:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	f043 0302 	orr.w	r3, r3, #2
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d102      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80041d0:	4b41      	ldr	r3, [pc, #260]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	e007      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80041d6:	2302      	movs	r3, #2
 80041d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	fa93 f3a3 	rbit	r3, r3
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	2202      	movs	r2, #2
 80041e8:	613a      	str	r2, [r7, #16]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	fa92 f2a2 	rbit	r2, r2
 80041f0:	60fa      	str	r2, [r7, #12]
  return result;
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	fab2 f282 	clz	r2, r2
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	f002 021f 	and.w	r2, r2, #31
 8004204:	2101      	movs	r1, #1
 8004206:	fa01 f202 	lsl.w	r2, r1, r2
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0bd      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004210:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	492e      	ldr	r1, [pc, #184]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421e:	4313      	orrs	r3, r2
 8004220:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004222:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004226:	2b01      	cmp	r3, #1
 8004228:	d105      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800422a:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	4a2a      	ldr	r2, [pc, #168]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004234:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004242:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	4922      	ldr	r1, [pc, #136]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004250:	4313      	orrs	r3, r2
 8004252:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004260:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	f023 0210 	bic.w	r2, r3, #16
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	491a      	ldr	r1, [pc, #104]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426e:	4313      	orrs	r3, r2
 8004270:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800427e:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	4913      	ldr	r1, [pc, #76]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428c:	4313      	orrs	r3, r2
 800428e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800429c:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	490b      	ldr	r1, [pc, #44]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d008      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80042ba:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	4904      	ldr	r1, [pc, #16]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3748      	adds	r7, #72	; 0x48
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40007000 	.word	0x40007000
 80042e0:	10908100 	.word	0x10908100

080042e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e049      	b.n	800438a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fd f810 	bl	8001330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f000 fb60 	bl	80049e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e049      	b.n	8004438 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d106      	bne.n	80043be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f841 	bl	8004440 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f000 fb09 	bl	80049e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_TIM_PWM_Start+0x24>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b01      	cmp	r3, #1
 800446e:	bf14      	ite	ne
 8004470:	2301      	movne	r3, #1
 8004472:	2300      	moveq	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	e03c      	b.n	80044f2 <HAL_TIM_PWM_Start+0x9e>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b04      	cmp	r3, #4
 800447c:	d109      	bne.n	8004492 <HAL_TIM_PWM_Start+0x3e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	bf14      	ite	ne
 800448a:	2301      	movne	r3, #1
 800448c:	2300      	moveq	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	e02f      	b.n	80044f2 <HAL_TIM_PWM_Start+0x9e>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d109      	bne.n	80044ac <HAL_TIM_PWM_Start+0x58>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	bf14      	ite	ne
 80044a4:	2301      	movne	r3, #1
 80044a6:	2300      	moveq	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	e022      	b.n	80044f2 <HAL_TIM_PWM_Start+0x9e>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b0c      	cmp	r3, #12
 80044b0:	d109      	bne.n	80044c6 <HAL_TIM_PWM_Start+0x72>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	bf14      	ite	ne
 80044be:	2301      	movne	r3, #1
 80044c0:	2300      	moveq	r3, #0
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	e015      	b.n	80044f2 <HAL_TIM_PWM_Start+0x9e>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d109      	bne.n	80044e0 <HAL_TIM_PWM_Start+0x8c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	bf14      	ite	ne
 80044d8:	2301      	movne	r3, #1
 80044da:	2300      	moveq	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	e008      	b.n	80044f2 <HAL_TIM_PWM_Start+0x9e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	bf14      	ite	ne
 80044ec:	2301      	movne	r3, #1
 80044ee:	2300      	moveq	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e088      	b.n	800460c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d104      	bne.n	800450a <HAL_TIM_PWM_Start+0xb6>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004508:	e023      	b.n	8004552 <HAL_TIM_PWM_Start+0xfe>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b04      	cmp	r3, #4
 800450e:	d104      	bne.n	800451a <HAL_TIM_PWM_Start+0xc6>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004518:	e01b      	b.n	8004552 <HAL_TIM_PWM_Start+0xfe>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d104      	bne.n	800452a <HAL_TIM_PWM_Start+0xd6>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004528:	e013      	b.n	8004552 <HAL_TIM_PWM_Start+0xfe>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b0c      	cmp	r3, #12
 800452e:	d104      	bne.n	800453a <HAL_TIM_PWM_Start+0xe6>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004538:	e00b      	b.n	8004552 <HAL_TIM_PWM_Start+0xfe>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b10      	cmp	r3, #16
 800453e:	d104      	bne.n	800454a <HAL_TIM_PWM_Start+0xf6>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004548:	e003      	b.n	8004552 <HAL_TIM_PWM_Start+0xfe>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2201      	movs	r2, #1
 8004558:	6839      	ldr	r1, [r7, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fdfc 	bl	8005158 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a2b      	ldr	r2, [pc, #172]	; (8004614 <HAL_TIM_PWM_Start+0x1c0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <HAL_TIM_PWM_Start+0x134>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <HAL_TIM_PWM_Start+0x1c4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_TIM_PWM_Start+0x134>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a28      	ldr	r2, [pc, #160]	; (800461c <HAL_TIM_PWM_Start+0x1c8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_TIM_PWM_Start+0x134>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a27      	ldr	r2, [pc, #156]	; (8004620 <HAL_TIM_PWM_Start+0x1cc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d101      	bne.n	800458c <HAL_TIM_PWM_Start+0x138>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_TIM_PWM_Start+0x13a>
 800458c:	2300      	movs	r3, #0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d007      	beq.n	80045a2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <HAL_TIM_PWM_Start+0x1c0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <HAL_TIM_PWM_Start+0x176>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b4:	d009      	beq.n	80045ca <HAL_TIM_PWM_Start+0x176>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1a      	ldr	r2, [pc, #104]	; (8004624 <HAL_TIM_PWM_Start+0x1d0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_TIM_PWM_Start+0x176>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a14      	ldr	r2, [pc, #80]	; (8004618 <HAL_TIM_PWM_Start+0x1c4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d115      	bne.n	80045f6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	4b15      	ldr	r3, [pc, #84]	; (8004628 <HAL_TIM_PWM_Start+0x1d4>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b06      	cmp	r3, #6
 80045da:	d015      	beq.n	8004608 <HAL_TIM_PWM_Start+0x1b4>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e2:	d011      	beq.n	8004608 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f4:	e008      	b.n	8004608 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e000      	b.n	800460a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004608:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40014000 	.word	0x40014000
 800461c:	40014400 	.word	0x40014400
 8004620:	40014800 	.word	0x40014800
 8004624:	40000400 	.word	0x40000400
 8004628:	00010007 	.word	0x00010007

0800462c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004646:	2302      	movs	r3, #2
 8004648:	e0ff      	b.n	800484a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b14      	cmp	r3, #20
 8004656:	f200 80f0 	bhi.w	800483a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800465a:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800465c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004660:	080046b5 	.word	0x080046b5
 8004664:	0800483b 	.word	0x0800483b
 8004668:	0800483b 	.word	0x0800483b
 800466c:	0800483b 	.word	0x0800483b
 8004670:	080046f5 	.word	0x080046f5
 8004674:	0800483b 	.word	0x0800483b
 8004678:	0800483b 	.word	0x0800483b
 800467c:	0800483b 	.word	0x0800483b
 8004680:	08004737 	.word	0x08004737
 8004684:	0800483b 	.word	0x0800483b
 8004688:	0800483b 	.word	0x0800483b
 800468c:	0800483b 	.word	0x0800483b
 8004690:	08004777 	.word	0x08004777
 8004694:	0800483b 	.word	0x0800483b
 8004698:	0800483b 	.word	0x0800483b
 800469c:	0800483b 	.word	0x0800483b
 80046a0:	080047b9 	.word	0x080047b9
 80046a4:	0800483b 	.word	0x0800483b
 80046a8:	0800483b 	.word	0x0800483b
 80046ac:	0800483b 	.word	0x0800483b
 80046b0:	080047f9 	.word	0x080047f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fa0c 	bl	8004ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0208 	orr.w	r2, r2, #8
 80046ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0204 	bic.w	r2, r2, #4
 80046de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6999      	ldr	r1, [r3, #24]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	619a      	str	r2, [r3, #24]
      break;
 80046f2:	e0a5      	b.n	8004840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fa72 	bl	8004be4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800470e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800471e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6999      	ldr	r1, [r3, #24]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	021a      	lsls	r2, r3, #8
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	619a      	str	r2, [r3, #24]
      break;
 8004734:	e084      	b.n	8004840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fad1 	bl	8004ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0208 	orr.w	r2, r2, #8
 8004750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0204 	bic.w	r2, r2, #4
 8004760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69d9      	ldr	r1, [r3, #28]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	61da      	str	r2, [r3, #28]
      break;
 8004774:	e064      	b.n	8004840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fb2f 	bl	8004de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69d9      	ldr	r1, [r3, #28]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	021a      	lsls	r2, r3, #8
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	61da      	str	r2, [r3, #28]
      break;
 80047b6:	e043      	b.n	8004840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fb72 	bl	8004ea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0208 	orr.w	r2, r2, #8
 80047d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0204 	bic.w	r2, r2, #4
 80047e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047f6:	e023      	b.n	8004840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fbb0 	bl	8004f64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004812:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004822:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	021a      	lsls	r2, r3, #8
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004838:	e002      	b.n	8004840 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	75fb      	strb	r3, [r7, #23]
      break;
 800483e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004848:	7dfb      	ldrb	r3, [r7, #23]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop

08004854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_TIM_ConfigClockSource+0x1c>
 800486c:	2302      	movs	r3, #2
 800486e:	e0b6      	b.n	80049de <HAL_TIM_ConfigClockSource+0x18a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800488e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800489a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ac:	d03e      	beq.n	800492c <HAL_TIM_ConfigClockSource+0xd8>
 80048ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b2:	f200 8087 	bhi.w	80049c4 <HAL_TIM_ConfigClockSource+0x170>
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	f000 8086 	beq.w	80049ca <HAL_TIM_ConfigClockSource+0x176>
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c2:	d87f      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x170>
 80048c4:	2b70      	cmp	r3, #112	; 0x70
 80048c6:	d01a      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0xaa>
 80048c8:	2b70      	cmp	r3, #112	; 0x70
 80048ca:	d87b      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x170>
 80048cc:	2b60      	cmp	r3, #96	; 0x60
 80048ce:	d050      	beq.n	8004972 <HAL_TIM_ConfigClockSource+0x11e>
 80048d0:	2b60      	cmp	r3, #96	; 0x60
 80048d2:	d877      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x170>
 80048d4:	2b50      	cmp	r3, #80	; 0x50
 80048d6:	d03c      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0xfe>
 80048d8:	2b50      	cmp	r3, #80	; 0x50
 80048da:	d873      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x170>
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d058      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x13e>
 80048e0:	2b40      	cmp	r3, #64	; 0x40
 80048e2:	d86f      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x170>
 80048e4:	2b30      	cmp	r3, #48	; 0x30
 80048e6:	d064      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x15e>
 80048e8:	2b30      	cmp	r3, #48	; 0x30
 80048ea:	d86b      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x170>
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d060      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x15e>
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	d867      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x170>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d05c      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x15e>
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d05a      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x15e>
 80048fc:	e062      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6899      	ldr	r1, [r3, #8]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f000 fc03 	bl	8005118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004920:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	609a      	str	r2, [r3, #8]
      break;
 800492a:	e04f      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	6899      	ldr	r1, [r3, #8]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f000 fbec 	bl	8005118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800494e:	609a      	str	r2, [r3, #8]
      break;
 8004950:	e03c      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6859      	ldr	r1, [r3, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	461a      	mov	r2, r3
 8004960:	f000 fb60 	bl	8005024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2150      	movs	r1, #80	; 0x50
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fbb9 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004970:	e02c      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6859      	ldr	r1, [r3, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	461a      	mov	r2, r3
 8004980:	f000 fb7f 	bl	8005082 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2160      	movs	r1, #96	; 0x60
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fba9 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004990:	e01c      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	6859      	ldr	r1, [r3, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	461a      	mov	r2, r3
 80049a0:	f000 fb40 	bl	8005024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2140      	movs	r1, #64	; 0x40
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fb99 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 80049b0:	e00c      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f000 fb90 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 80049c2:	e003      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      break;
 80049c8:	e000      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80049ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a32      	ldr	r2, [pc, #200]	; (8004ac4 <TIM_Base_SetConfig+0xdc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d007      	beq.n	8004a10 <TIM_Base_SetConfig+0x28>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a06:	d003      	beq.n	8004a10 <TIM_Base_SetConfig+0x28>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a2f      	ldr	r2, [pc, #188]	; (8004ac8 <TIM_Base_SetConfig+0xe0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d108      	bne.n	8004a22 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a27      	ldr	r2, [pc, #156]	; (8004ac4 <TIM_Base_SetConfig+0xdc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d013      	beq.n	8004a52 <TIM_Base_SetConfig+0x6a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a30:	d00f      	beq.n	8004a52 <TIM_Base_SetConfig+0x6a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a24      	ldr	r2, [pc, #144]	; (8004ac8 <TIM_Base_SetConfig+0xe0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00b      	beq.n	8004a52 <TIM_Base_SetConfig+0x6a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a23      	ldr	r2, [pc, #140]	; (8004acc <TIM_Base_SetConfig+0xe4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <TIM_Base_SetConfig+0x6a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a22      	ldr	r2, [pc, #136]	; (8004ad0 <TIM_Base_SetConfig+0xe8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d003      	beq.n	8004a52 <TIM_Base_SetConfig+0x6a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a21      	ldr	r2, [pc, #132]	; (8004ad4 <TIM_Base_SetConfig+0xec>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d108      	bne.n	8004a64 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a0e      	ldr	r2, [pc, #56]	; (8004ac4 <TIM_Base_SetConfig+0xdc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00b      	beq.n	8004aa8 <TIM_Base_SetConfig+0xc0>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a0e      	ldr	r2, [pc, #56]	; (8004acc <TIM_Base_SetConfig+0xe4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d007      	beq.n	8004aa8 <TIM_Base_SetConfig+0xc0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a0d      	ldr	r2, [pc, #52]	; (8004ad0 <TIM_Base_SetConfig+0xe8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d003      	beq.n	8004aa8 <TIM_Base_SetConfig+0xc0>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a0c      	ldr	r2, [pc, #48]	; (8004ad4 <TIM_Base_SetConfig+0xec>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d103      	bne.n	8004ab0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	615a      	str	r2, [r3, #20]
}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40014400 	.word	0x40014400
 8004ad4:	40014800 	.word	0x40014800

08004ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f023 0201 	bic.w	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f023 0302 	bic.w	r3, r3, #2
 8004b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a28      	ldr	r2, [pc, #160]	; (8004bd4 <TIM_OC1_SetConfig+0xfc>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00b      	beq.n	8004b50 <TIM_OC1_SetConfig+0x78>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a27      	ldr	r2, [pc, #156]	; (8004bd8 <TIM_OC1_SetConfig+0x100>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d007      	beq.n	8004b50 <TIM_OC1_SetConfig+0x78>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a26      	ldr	r2, [pc, #152]	; (8004bdc <TIM_OC1_SetConfig+0x104>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d003      	beq.n	8004b50 <TIM_OC1_SetConfig+0x78>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a25      	ldr	r2, [pc, #148]	; (8004be0 <TIM_OC1_SetConfig+0x108>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d10c      	bne.n	8004b6a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f023 0308 	bic.w	r3, r3, #8
 8004b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f023 0304 	bic.w	r3, r3, #4
 8004b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a19      	ldr	r2, [pc, #100]	; (8004bd4 <TIM_OC1_SetConfig+0xfc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00b      	beq.n	8004b8a <TIM_OC1_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <TIM_OC1_SetConfig+0x100>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d007      	beq.n	8004b8a <TIM_OC1_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <TIM_OC1_SetConfig+0x104>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d003      	beq.n	8004b8a <TIM_OC1_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <TIM_OC1_SetConfig+0x108>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d111      	bne.n	8004bae <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	621a      	str	r2, [r3, #32]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800

08004be4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	f023 0210 	bic.w	r2, r3, #16
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0320 	bic.w	r3, r3, #32
 8004c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a24      	ldr	r2, [pc, #144]	; (8004cd4 <TIM_OC2_SetConfig+0xf0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d10d      	bne.n	8004c64 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a1b      	ldr	r2, [pc, #108]	; (8004cd4 <TIM_OC2_SetConfig+0xf0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00b      	beq.n	8004c84 <TIM_OC2_SetConfig+0xa0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a1a      	ldr	r2, [pc, #104]	; (8004cd8 <TIM_OC2_SetConfig+0xf4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d007      	beq.n	8004c84 <TIM_OC2_SetConfig+0xa0>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <TIM_OC2_SetConfig+0xf8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d003      	beq.n	8004c84 <TIM_OC2_SetConfig+0xa0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <TIM_OC2_SetConfig+0xfc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d113      	bne.n	8004cac <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c8a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c92:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40014400 	.word	0x40014400
 8004ce0:	40014800 	.word	0x40014800

08004ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0303 	bic.w	r3, r3, #3
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a23      	ldr	r2, [pc, #140]	; (8004dd0 <TIM_OC3_SetConfig+0xec>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d10d      	bne.n	8004d62 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d60:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1a      	ldr	r2, [pc, #104]	; (8004dd0 <TIM_OC3_SetConfig+0xec>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <TIM_OC3_SetConfig+0x9e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a19      	ldr	r2, [pc, #100]	; (8004dd4 <TIM_OC3_SetConfig+0xf0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <TIM_OC3_SetConfig+0x9e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a18      	ldr	r2, [pc, #96]	; (8004dd8 <TIM_OC3_SetConfig+0xf4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_OC3_SetConfig+0x9e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <TIM_OC3_SetConfig+0xf8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d113      	bne.n	8004daa <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	621a      	str	r2, [r3, #32]
}
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	40014000 	.word	0x40014000
 8004dd8:	40014400 	.word	0x40014400
 8004ddc:	40014800 	.word	0x40014800

08004de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	031b      	lsls	r3, r3, #12
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a16      	ldr	r2, [pc, #88]	; (8004e98 <TIM_OC4_SetConfig+0xb8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00b      	beq.n	8004e5c <TIM_OC4_SetConfig+0x7c>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a15      	ldr	r2, [pc, #84]	; (8004e9c <TIM_OC4_SetConfig+0xbc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d007      	beq.n	8004e5c <TIM_OC4_SetConfig+0x7c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a14      	ldr	r2, [pc, #80]	; (8004ea0 <TIM_OC4_SetConfig+0xc0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_OC4_SetConfig+0x7c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a13      	ldr	r2, [pc, #76]	; (8004ea4 <TIM_OC4_SetConfig+0xc4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d109      	bne.n	8004e70 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	019b      	lsls	r3, r3, #6
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40014400 	.word	0x40014400
 8004ea4:	40014800 	.word	0x40014800

08004ea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004eec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	041b      	lsls	r3, r3, #16
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <TIM_OC5_SetConfig+0xac>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00b      	beq.n	8004f1a <TIM_OC5_SetConfig+0x72>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <TIM_OC5_SetConfig+0xb0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <TIM_OC5_SetConfig+0x72>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <TIM_OC5_SetConfig+0xb4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <TIM_OC5_SetConfig+0x72>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a12      	ldr	r2, [pc, #72]	; (8004f60 <TIM_OC5_SetConfig+0xb8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d109      	bne.n	8004f2e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40014000 	.word	0x40014000
 8004f5c:	40014400 	.word	0x40014400
 8004f60:	40014800 	.word	0x40014800

08004f64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	051b      	lsls	r3, r3, #20
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a16      	ldr	r2, [pc, #88]	; (8005014 <TIM_OC6_SetConfig+0xb0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00b      	beq.n	8004fd8 <TIM_OC6_SetConfig+0x74>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a15      	ldr	r2, [pc, #84]	; (8005018 <TIM_OC6_SetConfig+0xb4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d007      	beq.n	8004fd8 <TIM_OC6_SetConfig+0x74>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a14      	ldr	r2, [pc, #80]	; (800501c <TIM_OC6_SetConfig+0xb8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_OC6_SetConfig+0x74>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a13      	ldr	r2, [pc, #76]	; (8005020 <TIM_OC6_SetConfig+0xbc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d109      	bne.n	8004fec <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	029b      	lsls	r3, r3, #10
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	621a      	str	r2, [r3, #32]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40012c00 	.word	0x40012c00
 8005018:	40014000 	.word	0x40014000
 800501c:	40014400 	.word	0x40014400
 8005020:	40014800 	.word	0x40014800

08005024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	f023 0201 	bic.w	r2, r3, #1
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f023 030a 	bic.w	r3, r3, #10
 8005060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005082:	b480      	push	{r7}
 8005084:	b087      	sub	sp, #28
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0210 	bic.w	r2, r3, #16
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	031b      	lsls	r3, r3, #12
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	f043 0307 	orr.w	r3, r3, #7
 8005104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	609a      	str	r2, [r3, #8]
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	021a      	lsls	r2, r3, #8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	431a      	orrs	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4313      	orrs	r3, r2
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	609a      	str	r2, [r3, #8]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	2201      	movs	r2, #1
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a1a      	ldr	r2, [r3, #32]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	43db      	mvns	r3, r3
 800517a:	401a      	ands	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a1a      	ldr	r2, [r3, #32]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	fa01 f303 	lsl.w	r3, r1, r3
 8005190:	431a      	orrs	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e054      	b.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a24      	ldr	r2, [pc, #144]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d108      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a17      	ldr	r2, [pc, #92]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005224:	d009      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a13      	ldr	r2, [pc, #76]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a11      	ldr	r2, [pc, #68]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d10c      	bne.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	4313      	orrs	r3, r2
 800524a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40012c00 	.word	0x40012c00
 8005278:	40000400 	.word	0x40000400
 800527c:	40014000 	.word	0x40014000

08005280 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005298:	2302      	movs	r3, #2
 800529a:	e060      	b.n	800535e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	041b      	lsls	r3, r3, #16
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a14      	ldr	r2, [pc, #80]	; (800536c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d115      	bne.n	800534c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	051b      	lsls	r3, r3, #20
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40012c00 	.word	0x40012c00

08005370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e040      	b.n	8005404 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fc f824 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2224      	movs	r2, #36	; 0x24
 800539c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f8c0 	bl	8005534 <UART_SetConfig>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e022      	b.n	8005404 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f9ea 	bl	80057a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fa71 	bl	80058e4 <UART_CheckIdleState>
 8005402:	4603      	mov	r3, r0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	4613      	mov	r3, r2
 800541a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005420:	2b20      	cmp	r3, #32
 8005422:	f040 8082 	bne.w	800552a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <HAL_UART_Transmit+0x26>
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e07a      	b.n	800552c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_UART_Transmit+0x38>
 8005440:	2302      	movs	r3, #2
 8005442:	e073      	b.n	800552c <HAL_UART_Transmit+0x120>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2221      	movs	r2, #33	; 0x21
 8005458:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800545a:	f7fc f96d 	bl	8001738 <HAL_GetTick>
 800545e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	88fa      	ldrh	r2, [r7, #6]
 8005464:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	88fa      	ldrh	r2, [r7, #6]
 800546c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005478:	d108      	bne.n	800548c <HAL_UART_Transmit+0x80>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	61bb      	str	r3, [r7, #24]
 800548a:	e003      	b.n	8005494 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005490:	2300      	movs	r3, #0
 8005492:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800549c:	e02d      	b.n	80054fa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2200      	movs	r2, #0
 80054a6:	2180      	movs	r1, #128	; 0x80
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fa64 	bl	8005976 <UART_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e039      	b.n	800552c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10b      	bne.n	80054d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	881a      	ldrh	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054ca:	b292      	uxth	r2, r2
 80054cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	3302      	adds	r3, #2
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	e008      	b.n	80054e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	781a      	ldrb	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	b292      	uxth	r2, r2
 80054e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	3301      	adds	r3, #1
 80054e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1cb      	bne.n	800549e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2200      	movs	r2, #0
 800550e:	2140      	movs	r1, #64	; 0x40
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 fa30 	bl	8005976 <UART_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e005      	b.n	800552c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	e000      	b.n	800552c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800552a:	2302      	movs	r3, #2
  }
}
 800552c:	4618      	mov	r0, r3
 800552e:	3720      	adds	r7, #32
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	4b8a      	ldr	r3, [pc, #552]	; (8005788 <UART_SetConfig+0x254>)
 8005560:	4013      	ands	r3, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	6979      	ldr	r1, [r7, #20]
 8005568:	430b      	orrs	r3, r1
 800556a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a78      	ldr	r2, [pc, #480]	; (800578c <UART_SetConfig+0x258>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d120      	bne.n	80055f2 <UART_SetConfig+0xbe>
 80055b0:	4b77      	ldr	r3, [pc, #476]	; (8005790 <UART_SetConfig+0x25c>)
 80055b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d817      	bhi.n	80055ec <UART_SetConfig+0xb8>
 80055bc:	a201      	add	r2, pc, #4	; (adr r2, 80055c4 <UART_SetConfig+0x90>)
 80055be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c2:	bf00      	nop
 80055c4:	080055d5 	.word	0x080055d5
 80055c8:	080055e1 	.word	0x080055e1
 80055cc:	080055e7 	.word	0x080055e7
 80055d0:	080055db 	.word	0x080055db
 80055d4:	2300      	movs	r3, #0
 80055d6:	77fb      	strb	r3, [r7, #31]
 80055d8:	e01d      	b.n	8005616 <UART_SetConfig+0xe2>
 80055da:	2302      	movs	r3, #2
 80055dc:	77fb      	strb	r3, [r7, #31]
 80055de:	e01a      	b.n	8005616 <UART_SetConfig+0xe2>
 80055e0:	2304      	movs	r3, #4
 80055e2:	77fb      	strb	r3, [r7, #31]
 80055e4:	e017      	b.n	8005616 <UART_SetConfig+0xe2>
 80055e6:	2308      	movs	r3, #8
 80055e8:	77fb      	strb	r3, [r7, #31]
 80055ea:	e014      	b.n	8005616 <UART_SetConfig+0xe2>
 80055ec:	2310      	movs	r3, #16
 80055ee:	77fb      	strb	r3, [r7, #31]
 80055f0:	e011      	b.n	8005616 <UART_SetConfig+0xe2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a67      	ldr	r2, [pc, #412]	; (8005794 <UART_SetConfig+0x260>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d102      	bne.n	8005602 <UART_SetConfig+0xce>
 80055fc:	2300      	movs	r3, #0
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e009      	b.n	8005616 <UART_SetConfig+0xe2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a64      	ldr	r2, [pc, #400]	; (8005798 <UART_SetConfig+0x264>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d102      	bne.n	8005612 <UART_SetConfig+0xde>
 800560c:	2300      	movs	r3, #0
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e001      	b.n	8005616 <UART_SetConfig+0xe2>
 8005612:	2310      	movs	r3, #16
 8005614:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800561e:	d15b      	bne.n	80056d8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005620:	7ffb      	ldrb	r3, [r7, #31]
 8005622:	2b08      	cmp	r3, #8
 8005624:	d827      	bhi.n	8005676 <UART_SetConfig+0x142>
 8005626:	a201      	add	r2, pc, #4	; (adr r2, 800562c <UART_SetConfig+0xf8>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	08005651 	.word	0x08005651
 8005630:	08005659 	.word	0x08005659
 8005634:	08005661 	.word	0x08005661
 8005638:	08005677 	.word	0x08005677
 800563c:	08005667 	.word	0x08005667
 8005640:	08005677 	.word	0x08005677
 8005644:	08005677 	.word	0x08005677
 8005648:	08005677 	.word	0x08005677
 800564c:	0800566f 	.word	0x0800566f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005650:	f7fe fcce 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8005654:	61b8      	str	r0, [r7, #24]
        break;
 8005656:	e013      	b.n	8005680 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005658:	f7fe fcec 	bl	8004034 <HAL_RCC_GetPCLK2Freq>
 800565c:	61b8      	str	r0, [r7, #24]
        break;
 800565e:	e00f      	b.n	8005680 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005660:	4b4e      	ldr	r3, [pc, #312]	; (800579c <UART_SetConfig+0x268>)
 8005662:	61bb      	str	r3, [r7, #24]
        break;
 8005664:	e00c      	b.n	8005680 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005666:	f7fe fc4d 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 800566a:	61b8      	str	r0, [r7, #24]
        break;
 800566c:	e008      	b.n	8005680 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800566e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005672:	61bb      	str	r3, [r7, #24]
        break;
 8005674:	e004      	b.n	8005680 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	77bb      	strb	r3, [r7, #30]
        break;
 800567e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d074      	beq.n	8005770 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	005a      	lsls	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	085b      	lsrs	r3, r3, #1
 8005690:	441a      	add	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	fbb2 f3f3 	udiv	r3, r2, r3
 800569a:	b29b      	uxth	r3, r3
 800569c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b0f      	cmp	r3, #15
 80056a2:	d916      	bls.n	80056d2 <UART_SetConfig+0x19e>
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056aa:	d212      	bcs.n	80056d2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f023 030f 	bic.w	r3, r3, #15
 80056b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	085b      	lsrs	r3, r3, #1
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	89fb      	ldrh	r3, [r7, #14]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	89fa      	ldrh	r2, [r7, #14]
 80056ce:	60da      	str	r2, [r3, #12]
 80056d0:	e04e      	b.n	8005770 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	77bb      	strb	r3, [r7, #30]
 80056d6:	e04b      	b.n	8005770 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056d8:	7ffb      	ldrb	r3, [r7, #31]
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d827      	bhi.n	800572e <UART_SetConfig+0x1fa>
 80056de:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <UART_SetConfig+0x1b0>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	08005709 	.word	0x08005709
 80056e8:	08005711 	.word	0x08005711
 80056ec:	08005719 	.word	0x08005719
 80056f0:	0800572f 	.word	0x0800572f
 80056f4:	0800571f 	.word	0x0800571f
 80056f8:	0800572f 	.word	0x0800572f
 80056fc:	0800572f 	.word	0x0800572f
 8005700:	0800572f 	.word	0x0800572f
 8005704:	08005727 	.word	0x08005727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005708:	f7fe fc72 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 800570c:	61b8      	str	r0, [r7, #24]
        break;
 800570e:	e013      	b.n	8005738 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005710:	f7fe fc90 	bl	8004034 <HAL_RCC_GetPCLK2Freq>
 8005714:	61b8      	str	r0, [r7, #24]
        break;
 8005716:	e00f      	b.n	8005738 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005718:	4b20      	ldr	r3, [pc, #128]	; (800579c <UART_SetConfig+0x268>)
 800571a:	61bb      	str	r3, [r7, #24]
        break;
 800571c:	e00c      	b.n	8005738 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571e:	f7fe fbf1 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8005722:	61b8      	str	r0, [r7, #24]
        break;
 8005724:	e008      	b.n	8005738 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572a:	61bb      	str	r3, [r7, #24]
        break;
 800572c:	e004      	b.n	8005738 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	77bb      	strb	r3, [r7, #30]
        break;
 8005736:	bf00      	nop
    }

    if (pclk != 0U)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d018      	beq.n	8005770 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	085a      	lsrs	r2, r3, #1
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	441a      	add	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005750:	b29b      	uxth	r3, r3
 8005752:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	2b0f      	cmp	r3, #15
 8005758:	d908      	bls.n	800576c <UART_SetConfig+0x238>
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005760:	d204      	bcs.n	800576c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	60da      	str	r2, [r3, #12]
 800576a:	e001      	b.n	8005770 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800577c:	7fbb      	ldrb	r3, [r7, #30]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	efff69f3 	.word	0xefff69f3
 800578c:	40013800 	.word	0x40013800
 8005790:	40021000 	.word	0x40021000
 8005794:	40004400 	.word	0x40004400
 8005798:	40004800 	.word	0x40004800
 800579c:	007a1200 	.word	0x007a1200

080057a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00a      	beq.n	80057ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	f003 0310 	and.w	r3, r3, #16
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01a      	beq.n	80058b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800589e:	d10a      	bne.n	80058b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	605a      	str	r2, [r3, #4]
  }
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058f4:	f7fb ff20 	bl	8001738 <HAL_GetTick>
 80058f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b08      	cmp	r3, #8
 8005906:	d10e      	bne.n	8005926 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005908:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f82d 	bl	8005976 <UART_WaitOnFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e023      	b.n	800596e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b04      	cmp	r3, #4
 8005932:	d10e      	bne.n	8005952 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005934:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f817 	bl	8005976 <UART_WaitOnFlagUntilTimeout>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e00d      	b.n	800596e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b09c      	sub	sp, #112	; 0x70
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	603b      	str	r3, [r7, #0]
 8005982:	4613      	mov	r3, r2
 8005984:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005986:	e0a5      	b.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598e:	f000 80a1 	beq.w	8005ad4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005992:	f7fb fed1 	bl	8001738 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800599e:	429a      	cmp	r2, r3
 80059a0:	d302      	bcc.n	80059a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80059a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d13e      	bne.n	8005a26 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b0:	e853 3f00 	ldrex	r3, [r3]
 80059b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059bc:	667b      	str	r3, [r7, #100]	; 0x64
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e6      	bne.n	80059a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3308      	adds	r3, #8
 80059e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ec:	f023 0301 	bic.w	r3, r3, #1
 80059f0:	663b      	str	r3, [r7, #96]	; 0x60
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3308      	adds	r3, #8
 80059f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80059fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e5      	bne.n	80059da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2220      	movs	r2, #32
 8005a12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e067      	b.n	8005af6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d04f      	beq.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a42:	d147      	bne.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e6      	bne.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3308      	adds	r3, #8
 8005a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f023 0301 	bic.w	r3, r3, #1
 8005a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005aa0:	623a      	str	r2, [r7, #32]
 8005aa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	69f9      	ldr	r1, [r7, #28]
 8005aa6:	6a3a      	ldr	r2, [r7, #32]
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e5      	bne.n	8005a80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e010      	b.n	8005af6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69da      	ldr	r2, [r3, #28]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	4013      	ands	r3, r2
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	bf0c      	ite	eq
 8005ae4:	2301      	moveq	r3, #1
 8005ae6:	2300      	movne	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	79fb      	ldrb	r3, [r7, #7]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	f43f af4a 	beq.w	8005988 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3770      	adds	r7, #112	; 0x70
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <__errno>:
 8005b00:	4b01      	ldr	r3, [pc, #4]	; (8005b08 <__errno+0x8>)
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	20000014 	.word	0x20000014

08005b0c <__libc_init_array>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	4d0d      	ldr	r5, [pc, #52]	; (8005b44 <__libc_init_array+0x38>)
 8005b10:	4c0d      	ldr	r4, [pc, #52]	; (8005b48 <__libc_init_array+0x3c>)
 8005b12:	1b64      	subs	r4, r4, r5
 8005b14:	10a4      	asrs	r4, r4, #2
 8005b16:	2600      	movs	r6, #0
 8005b18:	42a6      	cmp	r6, r4
 8005b1a:	d109      	bne.n	8005b30 <__libc_init_array+0x24>
 8005b1c:	4d0b      	ldr	r5, [pc, #44]	; (8005b4c <__libc_init_array+0x40>)
 8005b1e:	4c0c      	ldr	r4, [pc, #48]	; (8005b50 <__libc_init_array+0x44>)
 8005b20:	f002 fd4e 	bl	80085c0 <_init>
 8005b24:	1b64      	subs	r4, r4, r5
 8005b26:	10a4      	asrs	r4, r4, #2
 8005b28:	2600      	movs	r6, #0
 8005b2a:	42a6      	cmp	r6, r4
 8005b2c:	d105      	bne.n	8005b3a <__libc_init_array+0x2e>
 8005b2e:	bd70      	pop	{r4, r5, r6, pc}
 8005b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b34:	4798      	blx	r3
 8005b36:	3601      	adds	r6, #1
 8005b38:	e7ee      	b.n	8005b18 <__libc_init_array+0xc>
 8005b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3e:	4798      	blx	r3
 8005b40:	3601      	adds	r6, #1
 8005b42:	e7f2      	b.n	8005b2a <__libc_init_array+0x1e>
 8005b44:	08008a34 	.word	0x08008a34
 8005b48:	08008a34 	.word	0x08008a34
 8005b4c:	08008a34 	.word	0x08008a34
 8005b50:	08008a38 	.word	0x08008a38

08005b54 <malloc>:
 8005b54:	4b02      	ldr	r3, [pc, #8]	; (8005b60 <malloc+0xc>)
 8005b56:	4601      	mov	r1, r0
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	f000 b877 	b.w	8005c4c <_malloc_r>
 8005b5e:	bf00      	nop
 8005b60:	20000014 	.word	0x20000014

08005b64 <memset>:
 8005b64:	4402      	add	r2, r0
 8005b66:	4603      	mov	r3, r0
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d100      	bne.n	8005b6e <memset+0xa>
 8005b6c:	4770      	bx	lr
 8005b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b72:	e7f9      	b.n	8005b68 <memset+0x4>

08005b74 <_free_r>:
 8005b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b76:	2900      	cmp	r1, #0
 8005b78:	d044      	beq.n	8005c04 <_free_r+0x90>
 8005b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b7e:	9001      	str	r0, [sp, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f1a1 0404 	sub.w	r4, r1, #4
 8005b86:	bfb8      	it	lt
 8005b88:	18e4      	addlt	r4, r4, r3
 8005b8a:	f001 fceb 	bl	8007564 <__malloc_lock>
 8005b8e:	4a1e      	ldr	r2, [pc, #120]	; (8005c08 <_free_r+0x94>)
 8005b90:	9801      	ldr	r0, [sp, #4]
 8005b92:	6813      	ldr	r3, [r2, #0]
 8005b94:	b933      	cbnz	r3, 8005ba4 <_free_r+0x30>
 8005b96:	6063      	str	r3, [r4, #4]
 8005b98:	6014      	str	r4, [r2, #0]
 8005b9a:	b003      	add	sp, #12
 8005b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ba0:	f001 bce6 	b.w	8007570 <__malloc_unlock>
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	d908      	bls.n	8005bba <_free_r+0x46>
 8005ba8:	6825      	ldr	r5, [r4, #0]
 8005baa:	1961      	adds	r1, r4, r5
 8005bac:	428b      	cmp	r3, r1
 8005bae:	bf01      	itttt	eq
 8005bb0:	6819      	ldreq	r1, [r3, #0]
 8005bb2:	685b      	ldreq	r3, [r3, #4]
 8005bb4:	1949      	addeq	r1, r1, r5
 8005bb6:	6021      	streq	r1, [r4, #0]
 8005bb8:	e7ed      	b.n	8005b96 <_free_r+0x22>
 8005bba:	461a      	mov	r2, r3
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	b10b      	cbz	r3, 8005bc4 <_free_r+0x50>
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	d9fa      	bls.n	8005bba <_free_r+0x46>
 8005bc4:	6811      	ldr	r1, [r2, #0]
 8005bc6:	1855      	adds	r5, r2, r1
 8005bc8:	42a5      	cmp	r5, r4
 8005bca:	d10b      	bne.n	8005be4 <_free_r+0x70>
 8005bcc:	6824      	ldr	r4, [r4, #0]
 8005bce:	4421      	add	r1, r4
 8005bd0:	1854      	adds	r4, r2, r1
 8005bd2:	42a3      	cmp	r3, r4
 8005bd4:	6011      	str	r1, [r2, #0]
 8005bd6:	d1e0      	bne.n	8005b9a <_free_r+0x26>
 8005bd8:	681c      	ldr	r4, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	6053      	str	r3, [r2, #4]
 8005bde:	4421      	add	r1, r4
 8005be0:	6011      	str	r1, [r2, #0]
 8005be2:	e7da      	b.n	8005b9a <_free_r+0x26>
 8005be4:	d902      	bls.n	8005bec <_free_r+0x78>
 8005be6:	230c      	movs	r3, #12
 8005be8:	6003      	str	r3, [r0, #0]
 8005bea:	e7d6      	b.n	8005b9a <_free_r+0x26>
 8005bec:	6825      	ldr	r5, [r4, #0]
 8005bee:	1961      	adds	r1, r4, r5
 8005bf0:	428b      	cmp	r3, r1
 8005bf2:	bf04      	itt	eq
 8005bf4:	6819      	ldreq	r1, [r3, #0]
 8005bf6:	685b      	ldreq	r3, [r3, #4]
 8005bf8:	6063      	str	r3, [r4, #4]
 8005bfa:	bf04      	itt	eq
 8005bfc:	1949      	addeq	r1, r1, r5
 8005bfe:	6021      	streq	r1, [r4, #0]
 8005c00:	6054      	str	r4, [r2, #4]
 8005c02:	e7ca      	b.n	8005b9a <_free_r+0x26>
 8005c04:	b003      	add	sp, #12
 8005c06:	bd30      	pop	{r4, r5, pc}
 8005c08:	20000340 	.word	0x20000340

08005c0c <sbrk_aligned>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4e0e      	ldr	r6, [pc, #56]	; (8005c48 <sbrk_aligned+0x3c>)
 8005c10:	460c      	mov	r4, r1
 8005c12:	6831      	ldr	r1, [r6, #0]
 8005c14:	4605      	mov	r5, r0
 8005c16:	b911      	cbnz	r1, 8005c1e <sbrk_aligned+0x12>
 8005c18:	f000 fd0e 	bl	8006638 <_sbrk_r>
 8005c1c:	6030      	str	r0, [r6, #0]
 8005c1e:	4621      	mov	r1, r4
 8005c20:	4628      	mov	r0, r5
 8005c22:	f000 fd09 	bl	8006638 <_sbrk_r>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	d00a      	beq.n	8005c40 <sbrk_aligned+0x34>
 8005c2a:	1cc4      	adds	r4, r0, #3
 8005c2c:	f024 0403 	bic.w	r4, r4, #3
 8005c30:	42a0      	cmp	r0, r4
 8005c32:	d007      	beq.n	8005c44 <sbrk_aligned+0x38>
 8005c34:	1a21      	subs	r1, r4, r0
 8005c36:	4628      	mov	r0, r5
 8005c38:	f000 fcfe 	bl	8006638 <_sbrk_r>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d101      	bne.n	8005c44 <sbrk_aligned+0x38>
 8005c40:	f04f 34ff 	mov.w	r4, #4294967295
 8005c44:	4620      	mov	r0, r4
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
 8005c48:	20000344 	.word	0x20000344

08005c4c <_malloc_r>:
 8005c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c50:	1ccd      	adds	r5, r1, #3
 8005c52:	f025 0503 	bic.w	r5, r5, #3
 8005c56:	3508      	adds	r5, #8
 8005c58:	2d0c      	cmp	r5, #12
 8005c5a:	bf38      	it	cc
 8005c5c:	250c      	movcc	r5, #12
 8005c5e:	2d00      	cmp	r5, #0
 8005c60:	4607      	mov	r7, r0
 8005c62:	db01      	blt.n	8005c68 <_malloc_r+0x1c>
 8005c64:	42a9      	cmp	r1, r5
 8005c66:	d905      	bls.n	8005c74 <_malloc_r+0x28>
 8005c68:	230c      	movs	r3, #12
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	2600      	movs	r6, #0
 8005c6e:	4630      	mov	r0, r6
 8005c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c74:	4e2e      	ldr	r6, [pc, #184]	; (8005d30 <_malloc_r+0xe4>)
 8005c76:	f001 fc75 	bl	8007564 <__malloc_lock>
 8005c7a:	6833      	ldr	r3, [r6, #0]
 8005c7c:	461c      	mov	r4, r3
 8005c7e:	bb34      	cbnz	r4, 8005cce <_malloc_r+0x82>
 8005c80:	4629      	mov	r1, r5
 8005c82:	4638      	mov	r0, r7
 8005c84:	f7ff ffc2 	bl	8005c0c <sbrk_aligned>
 8005c88:	1c43      	adds	r3, r0, #1
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	d14d      	bne.n	8005d2a <_malloc_r+0xde>
 8005c8e:	6834      	ldr	r4, [r6, #0]
 8005c90:	4626      	mov	r6, r4
 8005c92:	2e00      	cmp	r6, #0
 8005c94:	d140      	bne.n	8005d18 <_malloc_r+0xcc>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	4631      	mov	r1, r6
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	eb04 0803 	add.w	r8, r4, r3
 8005ca0:	f000 fcca 	bl	8006638 <_sbrk_r>
 8005ca4:	4580      	cmp	r8, r0
 8005ca6:	d13a      	bne.n	8005d1e <_malloc_r+0xd2>
 8005ca8:	6821      	ldr	r1, [r4, #0]
 8005caa:	3503      	adds	r5, #3
 8005cac:	1a6d      	subs	r5, r5, r1
 8005cae:	f025 0503 	bic.w	r5, r5, #3
 8005cb2:	3508      	adds	r5, #8
 8005cb4:	2d0c      	cmp	r5, #12
 8005cb6:	bf38      	it	cc
 8005cb8:	250c      	movcc	r5, #12
 8005cba:	4629      	mov	r1, r5
 8005cbc:	4638      	mov	r0, r7
 8005cbe:	f7ff ffa5 	bl	8005c0c <sbrk_aligned>
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d02b      	beq.n	8005d1e <_malloc_r+0xd2>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	442b      	add	r3, r5
 8005cca:	6023      	str	r3, [r4, #0]
 8005ccc:	e00e      	b.n	8005cec <_malloc_r+0xa0>
 8005cce:	6822      	ldr	r2, [r4, #0]
 8005cd0:	1b52      	subs	r2, r2, r5
 8005cd2:	d41e      	bmi.n	8005d12 <_malloc_r+0xc6>
 8005cd4:	2a0b      	cmp	r2, #11
 8005cd6:	d916      	bls.n	8005d06 <_malloc_r+0xba>
 8005cd8:	1961      	adds	r1, r4, r5
 8005cda:	42a3      	cmp	r3, r4
 8005cdc:	6025      	str	r5, [r4, #0]
 8005cde:	bf18      	it	ne
 8005ce0:	6059      	strne	r1, [r3, #4]
 8005ce2:	6863      	ldr	r3, [r4, #4]
 8005ce4:	bf08      	it	eq
 8005ce6:	6031      	streq	r1, [r6, #0]
 8005ce8:	5162      	str	r2, [r4, r5]
 8005cea:	604b      	str	r3, [r1, #4]
 8005cec:	4638      	mov	r0, r7
 8005cee:	f104 060b 	add.w	r6, r4, #11
 8005cf2:	f001 fc3d 	bl	8007570 <__malloc_unlock>
 8005cf6:	f026 0607 	bic.w	r6, r6, #7
 8005cfa:	1d23      	adds	r3, r4, #4
 8005cfc:	1af2      	subs	r2, r6, r3
 8005cfe:	d0b6      	beq.n	8005c6e <_malloc_r+0x22>
 8005d00:	1b9b      	subs	r3, r3, r6
 8005d02:	50a3      	str	r3, [r4, r2]
 8005d04:	e7b3      	b.n	8005c6e <_malloc_r+0x22>
 8005d06:	6862      	ldr	r2, [r4, #4]
 8005d08:	42a3      	cmp	r3, r4
 8005d0a:	bf0c      	ite	eq
 8005d0c:	6032      	streq	r2, [r6, #0]
 8005d0e:	605a      	strne	r2, [r3, #4]
 8005d10:	e7ec      	b.n	8005cec <_malloc_r+0xa0>
 8005d12:	4623      	mov	r3, r4
 8005d14:	6864      	ldr	r4, [r4, #4]
 8005d16:	e7b2      	b.n	8005c7e <_malloc_r+0x32>
 8005d18:	4634      	mov	r4, r6
 8005d1a:	6876      	ldr	r6, [r6, #4]
 8005d1c:	e7b9      	b.n	8005c92 <_malloc_r+0x46>
 8005d1e:	230c      	movs	r3, #12
 8005d20:	603b      	str	r3, [r7, #0]
 8005d22:	4638      	mov	r0, r7
 8005d24:	f001 fc24 	bl	8007570 <__malloc_unlock>
 8005d28:	e7a1      	b.n	8005c6e <_malloc_r+0x22>
 8005d2a:	6025      	str	r5, [r4, #0]
 8005d2c:	e7de      	b.n	8005cec <_malloc_r+0xa0>
 8005d2e:	bf00      	nop
 8005d30:	20000340 	.word	0x20000340

08005d34 <__cvt>:
 8005d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d38:	ec55 4b10 	vmov	r4, r5, d0
 8005d3c:	2d00      	cmp	r5, #0
 8005d3e:	460e      	mov	r6, r1
 8005d40:	4619      	mov	r1, r3
 8005d42:	462b      	mov	r3, r5
 8005d44:	bfbb      	ittet	lt
 8005d46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d4a:	461d      	movlt	r5, r3
 8005d4c:	2300      	movge	r3, #0
 8005d4e:	232d      	movlt	r3, #45	; 0x2d
 8005d50:	700b      	strb	r3, [r1, #0]
 8005d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d58:	4691      	mov	r9, r2
 8005d5a:	f023 0820 	bic.w	r8, r3, #32
 8005d5e:	bfbc      	itt	lt
 8005d60:	4622      	movlt	r2, r4
 8005d62:	4614      	movlt	r4, r2
 8005d64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d68:	d005      	beq.n	8005d76 <__cvt+0x42>
 8005d6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d6e:	d100      	bne.n	8005d72 <__cvt+0x3e>
 8005d70:	3601      	adds	r6, #1
 8005d72:	2102      	movs	r1, #2
 8005d74:	e000      	b.n	8005d78 <__cvt+0x44>
 8005d76:	2103      	movs	r1, #3
 8005d78:	ab03      	add	r3, sp, #12
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	ab02      	add	r3, sp, #8
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	ec45 4b10 	vmov	d0, r4, r5
 8005d84:	4653      	mov	r3, sl
 8005d86:	4632      	mov	r2, r6
 8005d88:	f000 fcf2 	bl	8006770 <_dtoa_r>
 8005d8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d90:	4607      	mov	r7, r0
 8005d92:	d102      	bne.n	8005d9a <__cvt+0x66>
 8005d94:	f019 0f01 	tst.w	r9, #1
 8005d98:	d022      	beq.n	8005de0 <__cvt+0xac>
 8005d9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d9e:	eb07 0906 	add.w	r9, r7, r6
 8005da2:	d110      	bne.n	8005dc6 <__cvt+0x92>
 8005da4:	783b      	ldrb	r3, [r7, #0]
 8005da6:	2b30      	cmp	r3, #48	; 0x30
 8005da8:	d10a      	bne.n	8005dc0 <__cvt+0x8c>
 8005daa:	2200      	movs	r2, #0
 8005dac:	2300      	movs	r3, #0
 8005dae:	4620      	mov	r0, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	f7fa fe89 	bl	8000ac8 <__aeabi_dcmpeq>
 8005db6:	b918      	cbnz	r0, 8005dc0 <__cvt+0x8c>
 8005db8:	f1c6 0601 	rsb	r6, r6, #1
 8005dbc:	f8ca 6000 	str.w	r6, [sl]
 8005dc0:	f8da 3000 	ldr.w	r3, [sl]
 8005dc4:	4499      	add	r9, r3
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4620      	mov	r0, r4
 8005dcc:	4629      	mov	r1, r5
 8005dce:	f7fa fe7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dd2:	b108      	cbz	r0, 8005dd8 <__cvt+0xa4>
 8005dd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005dd8:	2230      	movs	r2, #48	; 0x30
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	454b      	cmp	r3, r9
 8005dde:	d307      	bcc.n	8005df0 <__cvt+0xbc>
 8005de0:	9b03      	ldr	r3, [sp, #12]
 8005de2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005de4:	1bdb      	subs	r3, r3, r7
 8005de6:	4638      	mov	r0, r7
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	b004      	add	sp, #16
 8005dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df0:	1c59      	adds	r1, r3, #1
 8005df2:	9103      	str	r1, [sp, #12]
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	e7f0      	b.n	8005dda <__cvt+0xa6>

08005df8 <__exponent>:
 8005df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2900      	cmp	r1, #0
 8005dfe:	bfb8      	it	lt
 8005e00:	4249      	neglt	r1, r1
 8005e02:	f803 2b02 	strb.w	r2, [r3], #2
 8005e06:	bfb4      	ite	lt
 8005e08:	222d      	movlt	r2, #45	; 0x2d
 8005e0a:	222b      	movge	r2, #43	; 0x2b
 8005e0c:	2909      	cmp	r1, #9
 8005e0e:	7042      	strb	r2, [r0, #1]
 8005e10:	dd2a      	ble.n	8005e68 <__exponent+0x70>
 8005e12:	f10d 0407 	add.w	r4, sp, #7
 8005e16:	46a4      	mov	ip, r4
 8005e18:	270a      	movs	r7, #10
 8005e1a:	46a6      	mov	lr, r4
 8005e1c:	460a      	mov	r2, r1
 8005e1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005e22:	fb07 1516 	mls	r5, r7, r6, r1
 8005e26:	3530      	adds	r5, #48	; 0x30
 8005e28:	2a63      	cmp	r2, #99	; 0x63
 8005e2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005e2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e32:	4631      	mov	r1, r6
 8005e34:	dcf1      	bgt.n	8005e1a <__exponent+0x22>
 8005e36:	3130      	adds	r1, #48	; 0x30
 8005e38:	f1ae 0502 	sub.w	r5, lr, #2
 8005e3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e40:	1c44      	adds	r4, r0, #1
 8005e42:	4629      	mov	r1, r5
 8005e44:	4561      	cmp	r1, ip
 8005e46:	d30a      	bcc.n	8005e5e <__exponent+0x66>
 8005e48:	f10d 0209 	add.w	r2, sp, #9
 8005e4c:	eba2 020e 	sub.w	r2, r2, lr
 8005e50:	4565      	cmp	r5, ip
 8005e52:	bf88      	it	hi
 8005e54:	2200      	movhi	r2, #0
 8005e56:	4413      	add	r3, r2
 8005e58:	1a18      	subs	r0, r3, r0
 8005e5a:	b003      	add	sp, #12
 8005e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e62:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e66:	e7ed      	b.n	8005e44 <__exponent+0x4c>
 8005e68:	2330      	movs	r3, #48	; 0x30
 8005e6a:	3130      	adds	r1, #48	; 0x30
 8005e6c:	7083      	strb	r3, [r0, #2]
 8005e6e:	70c1      	strb	r1, [r0, #3]
 8005e70:	1d03      	adds	r3, r0, #4
 8005e72:	e7f1      	b.n	8005e58 <__exponent+0x60>

08005e74 <_printf_float>:
 8005e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e78:	ed2d 8b02 	vpush	{d8}
 8005e7c:	b08d      	sub	sp, #52	; 0x34
 8005e7e:	460c      	mov	r4, r1
 8005e80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e84:	4616      	mov	r6, r2
 8005e86:	461f      	mov	r7, r3
 8005e88:	4605      	mov	r5, r0
 8005e8a:	f001 fb55 	bl	8007538 <_localeconv_r>
 8005e8e:	f8d0 a000 	ldr.w	sl, [r0]
 8005e92:	4650      	mov	r0, sl
 8005e94:	f7fa f99c 	bl	80001d0 <strlen>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	9305      	str	r3, [sp, #20]
 8005ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ea8:	3307      	adds	r3, #7
 8005eaa:	f023 0307 	bic.w	r3, r3, #7
 8005eae:	f103 0208 	add.w	r2, r3, #8
 8005eb2:	f8c8 2000 	str.w	r2, [r8]
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ebe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005ec2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ec6:	9307      	str	r3, [sp, #28]
 8005ec8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ecc:	ee08 0a10 	vmov	s16, r0
 8005ed0:	4b9f      	ldr	r3, [pc, #636]	; (8006150 <_printf_float+0x2dc>)
 8005ed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eda:	f7fa fe27 	bl	8000b2c <__aeabi_dcmpun>
 8005ede:	bb88      	cbnz	r0, 8005f44 <_printf_float+0xd0>
 8005ee0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ee4:	4b9a      	ldr	r3, [pc, #616]	; (8006150 <_printf_float+0x2dc>)
 8005ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eea:	f7fa fe01 	bl	8000af0 <__aeabi_dcmple>
 8005eee:	bb48      	cbnz	r0, 8005f44 <_printf_float+0xd0>
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	f7fa fdf0 	bl	8000adc <__aeabi_dcmplt>
 8005efc:	b110      	cbz	r0, 8005f04 <_printf_float+0x90>
 8005efe:	232d      	movs	r3, #45	; 0x2d
 8005f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f04:	4b93      	ldr	r3, [pc, #588]	; (8006154 <_printf_float+0x2e0>)
 8005f06:	4894      	ldr	r0, [pc, #592]	; (8006158 <_printf_float+0x2e4>)
 8005f08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f0c:	bf94      	ite	ls
 8005f0e:	4698      	movls	r8, r3
 8005f10:	4680      	movhi	r8, r0
 8005f12:	2303      	movs	r3, #3
 8005f14:	6123      	str	r3, [r4, #16]
 8005f16:	9b05      	ldr	r3, [sp, #20]
 8005f18:	f023 0204 	bic.w	r2, r3, #4
 8005f1c:	6022      	str	r2, [r4, #0]
 8005f1e:	f04f 0900 	mov.w	r9, #0
 8005f22:	9700      	str	r7, [sp, #0]
 8005f24:	4633      	mov	r3, r6
 8005f26:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f28:	4621      	mov	r1, r4
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f000 f9d8 	bl	80062e0 <_printf_common>
 8005f30:	3001      	adds	r0, #1
 8005f32:	f040 8090 	bne.w	8006056 <_printf_float+0x1e2>
 8005f36:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3a:	b00d      	add	sp, #52	; 0x34
 8005f3c:	ecbd 8b02 	vpop	{d8}
 8005f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f44:	4642      	mov	r2, r8
 8005f46:	464b      	mov	r3, r9
 8005f48:	4640      	mov	r0, r8
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	f7fa fdee 	bl	8000b2c <__aeabi_dcmpun>
 8005f50:	b140      	cbz	r0, 8005f64 <_printf_float+0xf0>
 8005f52:	464b      	mov	r3, r9
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bfbc      	itt	lt
 8005f58:	232d      	movlt	r3, #45	; 0x2d
 8005f5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f5e:	487f      	ldr	r0, [pc, #508]	; (800615c <_printf_float+0x2e8>)
 8005f60:	4b7f      	ldr	r3, [pc, #508]	; (8006160 <_printf_float+0x2ec>)
 8005f62:	e7d1      	b.n	8005f08 <_printf_float+0x94>
 8005f64:	6863      	ldr	r3, [r4, #4]
 8005f66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f6a:	9206      	str	r2, [sp, #24]
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	d13f      	bne.n	8005ff0 <_printf_float+0x17c>
 8005f70:	2306      	movs	r3, #6
 8005f72:	6063      	str	r3, [r4, #4]
 8005f74:	9b05      	ldr	r3, [sp, #20]
 8005f76:	6861      	ldr	r1, [r4, #4]
 8005f78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9303      	str	r3, [sp, #12]
 8005f80:	ab0a      	add	r3, sp, #40	; 0x28
 8005f82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f86:	ab09      	add	r3, sp, #36	; 0x24
 8005f88:	ec49 8b10 	vmov	d0, r8, r9
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	6022      	str	r2, [r4, #0]
 8005f90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f94:	4628      	mov	r0, r5
 8005f96:	f7ff fecd 	bl	8005d34 <__cvt>
 8005f9a:	9b06      	ldr	r3, [sp, #24]
 8005f9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f9e:	2b47      	cmp	r3, #71	; 0x47
 8005fa0:	4680      	mov	r8, r0
 8005fa2:	d108      	bne.n	8005fb6 <_printf_float+0x142>
 8005fa4:	1cc8      	adds	r0, r1, #3
 8005fa6:	db02      	blt.n	8005fae <_printf_float+0x13a>
 8005fa8:	6863      	ldr	r3, [r4, #4]
 8005faa:	4299      	cmp	r1, r3
 8005fac:	dd41      	ble.n	8006032 <_printf_float+0x1be>
 8005fae:	f1ab 0b02 	sub.w	fp, fp, #2
 8005fb2:	fa5f fb8b 	uxtb.w	fp, fp
 8005fb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fba:	d820      	bhi.n	8005ffe <_printf_float+0x18a>
 8005fbc:	3901      	subs	r1, #1
 8005fbe:	465a      	mov	r2, fp
 8005fc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fc4:	9109      	str	r1, [sp, #36]	; 0x24
 8005fc6:	f7ff ff17 	bl	8005df8 <__exponent>
 8005fca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fcc:	1813      	adds	r3, r2, r0
 8005fce:	2a01      	cmp	r2, #1
 8005fd0:	4681      	mov	r9, r0
 8005fd2:	6123      	str	r3, [r4, #16]
 8005fd4:	dc02      	bgt.n	8005fdc <_printf_float+0x168>
 8005fd6:	6822      	ldr	r2, [r4, #0]
 8005fd8:	07d2      	lsls	r2, r2, #31
 8005fda:	d501      	bpl.n	8005fe0 <_printf_float+0x16c>
 8005fdc:	3301      	adds	r3, #1
 8005fde:	6123      	str	r3, [r4, #16]
 8005fe0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d09c      	beq.n	8005f22 <_printf_float+0xae>
 8005fe8:	232d      	movs	r3, #45	; 0x2d
 8005fea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fee:	e798      	b.n	8005f22 <_printf_float+0xae>
 8005ff0:	9a06      	ldr	r2, [sp, #24]
 8005ff2:	2a47      	cmp	r2, #71	; 0x47
 8005ff4:	d1be      	bne.n	8005f74 <_printf_float+0x100>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1bc      	bne.n	8005f74 <_printf_float+0x100>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e7b9      	b.n	8005f72 <_printf_float+0xfe>
 8005ffe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006002:	d118      	bne.n	8006036 <_printf_float+0x1c2>
 8006004:	2900      	cmp	r1, #0
 8006006:	6863      	ldr	r3, [r4, #4]
 8006008:	dd0b      	ble.n	8006022 <_printf_float+0x1ae>
 800600a:	6121      	str	r1, [r4, #16]
 800600c:	b913      	cbnz	r3, 8006014 <_printf_float+0x1a0>
 800600e:	6822      	ldr	r2, [r4, #0]
 8006010:	07d0      	lsls	r0, r2, #31
 8006012:	d502      	bpl.n	800601a <_printf_float+0x1a6>
 8006014:	3301      	adds	r3, #1
 8006016:	440b      	add	r3, r1
 8006018:	6123      	str	r3, [r4, #16]
 800601a:	65a1      	str	r1, [r4, #88]	; 0x58
 800601c:	f04f 0900 	mov.w	r9, #0
 8006020:	e7de      	b.n	8005fe0 <_printf_float+0x16c>
 8006022:	b913      	cbnz	r3, 800602a <_printf_float+0x1b6>
 8006024:	6822      	ldr	r2, [r4, #0]
 8006026:	07d2      	lsls	r2, r2, #31
 8006028:	d501      	bpl.n	800602e <_printf_float+0x1ba>
 800602a:	3302      	adds	r3, #2
 800602c:	e7f4      	b.n	8006018 <_printf_float+0x1a4>
 800602e:	2301      	movs	r3, #1
 8006030:	e7f2      	b.n	8006018 <_printf_float+0x1a4>
 8006032:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006038:	4299      	cmp	r1, r3
 800603a:	db05      	blt.n	8006048 <_printf_float+0x1d4>
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	6121      	str	r1, [r4, #16]
 8006040:	07d8      	lsls	r0, r3, #31
 8006042:	d5ea      	bpl.n	800601a <_printf_float+0x1a6>
 8006044:	1c4b      	adds	r3, r1, #1
 8006046:	e7e7      	b.n	8006018 <_printf_float+0x1a4>
 8006048:	2900      	cmp	r1, #0
 800604a:	bfd4      	ite	le
 800604c:	f1c1 0202 	rsble	r2, r1, #2
 8006050:	2201      	movgt	r2, #1
 8006052:	4413      	add	r3, r2
 8006054:	e7e0      	b.n	8006018 <_printf_float+0x1a4>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	055a      	lsls	r2, r3, #21
 800605a:	d407      	bmi.n	800606c <_printf_float+0x1f8>
 800605c:	6923      	ldr	r3, [r4, #16]
 800605e:	4642      	mov	r2, r8
 8006060:	4631      	mov	r1, r6
 8006062:	4628      	mov	r0, r5
 8006064:	47b8      	blx	r7
 8006066:	3001      	adds	r0, #1
 8006068:	d12c      	bne.n	80060c4 <_printf_float+0x250>
 800606a:	e764      	b.n	8005f36 <_printf_float+0xc2>
 800606c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006070:	f240 80e0 	bls.w	8006234 <_printf_float+0x3c0>
 8006074:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006078:	2200      	movs	r2, #0
 800607a:	2300      	movs	r3, #0
 800607c:	f7fa fd24 	bl	8000ac8 <__aeabi_dcmpeq>
 8006080:	2800      	cmp	r0, #0
 8006082:	d034      	beq.n	80060ee <_printf_float+0x27a>
 8006084:	4a37      	ldr	r2, [pc, #220]	; (8006164 <_printf_float+0x2f0>)
 8006086:	2301      	movs	r3, #1
 8006088:	4631      	mov	r1, r6
 800608a:	4628      	mov	r0, r5
 800608c:	47b8      	blx	r7
 800608e:	3001      	adds	r0, #1
 8006090:	f43f af51 	beq.w	8005f36 <_printf_float+0xc2>
 8006094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006098:	429a      	cmp	r2, r3
 800609a:	db02      	blt.n	80060a2 <_printf_float+0x22e>
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	07d8      	lsls	r0, r3, #31
 80060a0:	d510      	bpl.n	80060c4 <_printf_float+0x250>
 80060a2:	ee18 3a10 	vmov	r3, s16
 80060a6:	4652      	mov	r2, sl
 80060a8:	4631      	mov	r1, r6
 80060aa:	4628      	mov	r0, r5
 80060ac:	47b8      	blx	r7
 80060ae:	3001      	adds	r0, #1
 80060b0:	f43f af41 	beq.w	8005f36 <_printf_float+0xc2>
 80060b4:	f04f 0800 	mov.w	r8, #0
 80060b8:	f104 091a 	add.w	r9, r4, #26
 80060bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060be:	3b01      	subs	r3, #1
 80060c0:	4543      	cmp	r3, r8
 80060c2:	dc09      	bgt.n	80060d8 <_printf_float+0x264>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	079b      	lsls	r3, r3, #30
 80060c8:	f100 8105 	bmi.w	80062d6 <_printf_float+0x462>
 80060cc:	68e0      	ldr	r0, [r4, #12]
 80060ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060d0:	4298      	cmp	r0, r3
 80060d2:	bfb8      	it	lt
 80060d4:	4618      	movlt	r0, r3
 80060d6:	e730      	b.n	8005f3a <_printf_float+0xc6>
 80060d8:	2301      	movs	r3, #1
 80060da:	464a      	mov	r2, r9
 80060dc:	4631      	mov	r1, r6
 80060de:	4628      	mov	r0, r5
 80060e0:	47b8      	blx	r7
 80060e2:	3001      	adds	r0, #1
 80060e4:	f43f af27 	beq.w	8005f36 <_printf_float+0xc2>
 80060e8:	f108 0801 	add.w	r8, r8, #1
 80060ec:	e7e6      	b.n	80060bc <_printf_float+0x248>
 80060ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	dc39      	bgt.n	8006168 <_printf_float+0x2f4>
 80060f4:	4a1b      	ldr	r2, [pc, #108]	; (8006164 <_printf_float+0x2f0>)
 80060f6:	2301      	movs	r3, #1
 80060f8:	4631      	mov	r1, r6
 80060fa:	4628      	mov	r0, r5
 80060fc:	47b8      	blx	r7
 80060fe:	3001      	adds	r0, #1
 8006100:	f43f af19 	beq.w	8005f36 <_printf_float+0xc2>
 8006104:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006108:	4313      	orrs	r3, r2
 800610a:	d102      	bne.n	8006112 <_printf_float+0x29e>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	07d9      	lsls	r1, r3, #31
 8006110:	d5d8      	bpl.n	80060c4 <_printf_float+0x250>
 8006112:	ee18 3a10 	vmov	r3, s16
 8006116:	4652      	mov	r2, sl
 8006118:	4631      	mov	r1, r6
 800611a:	4628      	mov	r0, r5
 800611c:	47b8      	blx	r7
 800611e:	3001      	adds	r0, #1
 8006120:	f43f af09 	beq.w	8005f36 <_printf_float+0xc2>
 8006124:	f04f 0900 	mov.w	r9, #0
 8006128:	f104 0a1a 	add.w	sl, r4, #26
 800612c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800612e:	425b      	negs	r3, r3
 8006130:	454b      	cmp	r3, r9
 8006132:	dc01      	bgt.n	8006138 <_printf_float+0x2c4>
 8006134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006136:	e792      	b.n	800605e <_printf_float+0x1ea>
 8006138:	2301      	movs	r3, #1
 800613a:	4652      	mov	r2, sl
 800613c:	4631      	mov	r1, r6
 800613e:	4628      	mov	r0, r5
 8006140:	47b8      	blx	r7
 8006142:	3001      	adds	r0, #1
 8006144:	f43f aef7 	beq.w	8005f36 <_printf_float+0xc2>
 8006148:	f109 0901 	add.w	r9, r9, #1
 800614c:	e7ee      	b.n	800612c <_printf_float+0x2b8>
 800614e:	bf00      	nop
 8006150:	7fefffff 	.word	0x7fefffff
 8006154:	0800865c 	.word	0x0800865c
 8006158:	08008660 	.word	0x08008660
 800615c:	08008668 	.word	0x08008668
 8006160:	08008664 	.word	0x08008664
 8006164:	0800866c 	.word	0x0800866c
 8006168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800616a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800616c:	429a      	cmp	r2, r3
 800616e:	bfa8      	it	ge
 8006170:	461a      	movge	r2, r3
 8006172:	2a00      	cmp	r2, #0
 8006174:	4691      	mov	r9, r2
 8006176:	dc37      	bgt.n	80061e8 <_printf_float+0x374>
 8006178:	f04f 0b00 	mov.w	fp, #0
 800617c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006180:	f104 021a 	add.w	r2, r4, #26
 8006184:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006186:	9305      	str	r3, [sp, #20]
 8006188:	eba3 0309 	sub.w	r3, r3, r9
 800618c:	455b      	cmp	r3, fp
 800618e:	dc33      	bgt.n	80061f8 <_printf_float+0x384>
 8006190:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006194:	429a      	cmp	r2, r3
 8006196:	db3b      	blt.n	8006210 <_printf_float+0x39c>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	07da      	lsls	r2, r3, #31
 800619c:	d438      	bmi.n	8006210 <_printf_float+0x39c>
 800619e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a0:	9a05      	ldr	r2, [sp, #20]
 80061a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061a4:	1a9a      	subs	r2, r3, r2
 80061a6:	eba3 0901 	sub.w	r9, r3, r1
 80061aa:	4591      	cmp	r9, r2
 80061ac:	bfa8      	it	ge
 80061ae:	4691      	movge	r9, r2
 80061b0:	f1b9 0f00 	cmp.w	r9, #0
 80061b4:	dc35      	bgt.n	8006222 <_printf_float+0x3ae>
 80061b6:	f04f 0800 	mov.w	r8, #0
 80061ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061be:	f104 0a1a 	add.w	sl, r4, #26
 80061c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061c6:	1a9b      	subs	r3, r3, r2
 80061c8:	eba3 0309 	sub.w	r3, r3, r9
 80061cc:	4543      	cmp	r3, r8
 80061ce:	f77f af79 	ble.w	80060c4 <_printf_float+0x250>
 80061d2:	2301      	movs	r3, #1
 80061d4:	4652      	mov	r2, sl
 80061d6:	4631      	mov	r1, r6
 80061d8:	4628      	mov	r0, r5
 80061da:	47b8      	blx	r7
 80061dc:	3001      	adds	r0, #1
 80061de:	f43f aeaa 	beq.w	8005f36 <_printf_float+0xc2>
 80061e2:	f108 0801 	add.w	r8, r8, #1
 80061e6:	e7ec      	b.n	80061c2 <_printf_float+0x34e>
 80061e8:	4613      	mov	r3, r2
 80061ea:	4631      	mov	r1, r6
 80061ec:	4642      	mov	r2, r8
 80061ee:	4628      	mov	r0, r5
 80061f0:	47b8      	blx	r7
 80061f2:	3001      	adds	r0, #1
 80061f4:	d1c0      	bne.n	8006178 <_printf_float+0x304>
 80061f6:	e69e      	b.n	8005f36 <_printf_float+0xc2>
 80061f8:	2301      	movs	r3, #1
 80061fa:	4631      	mov	r1, r6
 80061fc:	4628      	mov	r0, r5
 80061fe:	9205      	str	r2, [sp, #20]
 8006200:	47b8      	blx	r7
 8006202:	3001      	adds	r0, #1
 8006204:	f43f ae97 	beq.w	8005f36 <_printf_float+0xc2>
 8006208:	9a05      	ldr	r2, [sp, #20]
 800620a:	f10b 0b01 	add.w	fp, fp, #1
 800620e:	e7b9      	b.n	8006184 <_printf_float+0x310>
 8006210:	ee18 3a10 	vmov	r3, s16
 8006214:	4652      	mov	r2, sl
 8006216:	4631      	mov	r1, r6
 8006218:	4628      	mov	r0, r5
 800621a:	47b8      	blx	r7
 800621c:	3001      	adds	r0, #1
 800621e:	d1be      	bne.n	800619e <_printf_float+0x32a>
 8006220:	e689      	b.n	8005f36 <_printf_float+0xc2>
 8006222:	9a05      	ldr	r2, [sp, #20]
 8006224:	464b      	mov	r3, r9
 8006226:	4442      	add	r2, r8
 8006228:	4631      	mov	r1, r6
 800622a:	4628      	mov	r0, r5
 800622c:	47b8      	blx	r7
 800622e:	3001      	adds	r0, #1
 8006230:	d1c1      	bne.n	80061b6 <_printf_float+0x342>
 8006232:	e680      	b.n	8005f36 <_printf_float+0xc2>
 8006234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006236:	2a01      	cmp	r2, #1
 8006238:	dc01      	bgt.n	800623e <_printf_float+0x3ca>
 800623a:	07db      	lsls	r3, r3, #31
 800623c:	d538      	bpl.n	80062b0 <_printf_float+0x43c>
 800623e:	2301      	movs	r3, #1
 8006240:	4642      	mov	r2, r8
 8006242:	4631      	mov	r1, r6
 8006244:	4628      	mov	r0, r5
 8006246:	47b8      	blx	r7
 8006248:	3001      	adds	r0, #1
 800624a:	f43f ae74 	beq.w	8005f36 <_printf_float+0xc2>
 800624e:	ee18 3a10 	vmov	r3, s16
 8006252:	4652      	mov	r2, sl
 8006254:	4631      	mov	r1, r6
 8006256:	4628      	mov	r0, r5
 8006258:	47b8      	blx	r7
 800625a:	3001      	adds	r0, #1
 800625c:	f43f ae6b 	beq.w	8005f36 <_printf_float+0xc2>
 8006260:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006264:	2200      	movs	r2, #0
 8006266:	2300      	movs	r3, #0
 8006268:	f7fa fc2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800626c:	b9d8      	cbnz	r0, 80062a6 <_printf_float+0x432>
 800626e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006270:	f108 0201 	add.w	r2, r8, #1
 8006274:	3b01      	subs	r3, #1
 8006276:	4631      	mov	r1, r6
 8006278:	4628      	mov	r0, r5
 800627a:	47b8      	blx	r7
 800627c:	3001      	adds	r0, #1
 800627e:	d10e      	bne.n	800629e <_printf_float+0x42a>
 8006280:	e659      	b.n	8005f36 <_printf_float+0xc2>
 8006282:	2301      	movs	r3, #1
 8006284:	4652      	mov	r2, sl
 8006286:	4631      	mov	r1, r6
 8006288:	4628      	mov	r0, r5
 800628a:	47b8      	blx	r7
 800628c:	3001      	adds	r0, #1
 800628e:	f43f ae52 	beq.w	8005f36 <_printf_float+0xc2>
 8006292:	f108 0801 	add.w	r8, r8, #1
 8006296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006298:	3b01      	subs	r3, #1
 800629a:	4543      	cmp	r3, r8
 800629c:	dcf1      	bgt.n	8006282 <_printf_float+0x40e>
 800629e:	464b      	mov	r3, r9
 80062a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062a4:	e6dc      	b.n	8006060 <_printf_float+0x1ec>
 80062a6:	f04f 0800 	mov.w	r8, #0
 80062aa:	f104 0a1a 	add.w	sl, r4, #26
 80062ae:	e7f2      	b.n	8006296 <_printf_float+0x422>
 80062b0:	2301      	movs	r3, #1
 80062b2:	4642      	mov	r2, r8
 80062b4:	e7df      	b.n	8006276 <_printf_float+0x402>
 80062b6:	2301      	movs	r3, #1
 80062b8:	464a      	mov	r2, r9
 80062ba:	4631      	mov	r1, r6
 80062bc:	4628      	mov	r0, r5
 80062be:	47b8      	blx	r7
 80062c0:	3001      	adds	r0, #1
 80062c2:	f43f ae38 	beq.w	8005f36 <_printf_float+0xc2>
 80062c6:	f108 0801 	add.w	r8, r8, #1
 80062ca:	68e3      	ldr	r3, [r4, #12]
 80062cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062ce:	1a5b      	subs	r3, r3, r1
 80062d0:	4543      	cmp	r3, r8
 80062d2:	dcf0      	bgt.n	80062b6 <_printf_float+0x442>
 80062d4:	e6fa      	b.n	80060cc <_printf_float+0x258>
 80062d6:	f04f 0800 	mov.w	r8, #0
 80062da:	f104 0919 	add.w	r9, r4, #25
 80062de:	e7f4      	b.n	80062ca <_printf_float+0x456>

080062e0 <_printf_common>:
 80062e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062e4:	4616      	mov	r6, r2
 80062e6:	4699      	mov	r9, r3
 80062e8:	688a      	ldr	r2, [r1, #8]
 80062ea:	690b      	ldr	r3, [r1, #16]
 80062ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062f0:	4293      	cmp	r3, r2
 80062f2:	bfb8      	it	lt
 80062f4:	4613      	movlt	r3, r2
 80062f6:	6033      	str	r3, [r6, #0]
 80062f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062fc:	4607      	mov	r7, r0
 80062fe:	460c      	mov	r4, r1
 8006300:	b10a      	cbz	r2, 8006306 <_printf_common+0x26>
 8006302:	3301      	adds	r3, #1
 8006304:	6033      	str	r3, [r6, #0]
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	0699      	lsls	r1, r3, #26
 800630a:	bf42      	ittt	mi
 800630c:	6833      	ldrmi	r3, [r6, #0]
 800630e:	3302      	addmi	r3, #2
 8006310:	6033      	strmi	r3, [r6, #0]
 8006312:	6825      	ldr	r5, [r4, #0]
 8006314:	f015 0506 	ands.w	r5, r5, #6
 8006318:	d106      	bne.n	8006328 <_printf_common+0x48>
 800631a:	f104 0a19 	add.w	sl, r4, #25
 800631e:	68e3      	ldr	r3, [r4, #12]
 8006320:	6832      	ldr	r2, [r6, #0]
 8006322:	1a9b      	subs	r3, r3, r2
 8006324:	42ab      	cmp	r3, r5
 8006326:	dc26      	bgt.n	8006376 <_printf_common+0x96>
 8006328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800632c:	1e13      	subs	r3, r2, #0
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	bf18      	it	ne
 8006332:	2301      	movne	r3, #1
 8006334:	0692      	lsls	r2, r2, #26
 8006336:	d42b      	bmi.n	8006390 <_printf_common+0xb0>
 8006338:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800633c:	4649      	mov	r1, r9
 800633e:	4638      	mov	r0, r7
 8006340:	47c0      	blx	r8
 8006342:	3001      	adds	r0, #1
 8006344:	d01e      	beq.n	8006384 <_printf_common+0xa4>
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	68e5      	ldr	r5, [r4, #12]
 800634a:	6832      	ldr	r2, [r6, #0]
 800634c:	f003 0306 	and.w	r3, r3, #6
 8006350:	2b04      	cmp	r3, #4
 8006352:	bf08      	it	eq
 8006354:	1aad      	subeq	r5, r5, r2
 8006356:	68a3      	ldr	r3, [r4, #8]
 8006358:	6922      	ldr	r2, [r4, #16]
 800635a:	bf0c      	ite	eq
 800635c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006360:	2500      	movne	r5, #0
 8006362:	4293      	cmp	r3, r2
 8006364:	bfc4      	itt	gt
 8006366:	1a9b      	subgt	r3, r3, r2
 8006368:	18ed      	addgt	r5, r5, r3
 800636a:	2600      	movs	r6, #0
 800636c:	341a      	adds	r4, #26
 800636e:	42b5      	cmp	r5, r6
 8006370:	d11a      	bne.n	80063a8 <_printf_common+0xc8>
 8006372:	2000      	movs	r0, #0
 8006374:	e008      	b.n	8006388 <_printf_common+0xa8>
 8006376:	2301      	movs	r3, #1
 8006378:	4652      	mov	r2, sl
 800637a:	4649      	mov	r1, r9
 800637c:	4638      	mov	r0, r7
 800637e:	47c0      	blx	r8
 8006380:	3001      	adds	r0, #1
 8006382:	d103      	bne.n	800638c <_printf_common+0xac>
 8006384:	f04f 30ff 	mov.w	r0, #4294967295
 8006388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800638c:	3501      	adds	r5, #1
 800638e:	e7c6      	b.n	800631e <_printf_common+0x3e>
 8006390:	18e1      	adds	r1, r4, r3
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	2030      	movs	r0, #48	; 0x30
 8006396:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800639a:	4422      	add	r2, r4
 800639c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063a4:	3302      	adds	r3, #2
 80063a6:	e7c7      	b.n	8006338 <_printf_common+0x58>
 80063a8:	2301      	movs	r3, #1
 80063aa:	4622      	mov	r2, r4
 80063ac:	4649      	mov	r1, r9
 80063ae:	4638      	mov	r0, r7
 80063b0:	47c0      	blx	r8
 80063b2:	3001      	adds	r0, #1
 80063b4:	d0e6      	beq.n	8006384 <_printf_common+0xa4>
 80063b6:	3601      	adds	r6, #1
 80063b8:	e7d9      	b.n	800636e <_printf_common+0x8e>
	...

080063bc <_printf_i>:
 80063bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	7e0f      	ldrb	r7, [r1, #24]
 80063c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063c4:	2f78      	cmp	r7, #120	; 0x78
 80063c6:	4691      	mov	r9, r2
 80063c8:	4680      	mov	r8, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	469a      	mov	sl, r3
 80063ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063d2:	d807      	bhi.n	80063e4 <_printf_i+0x28>
 80063d4:	2f62      	cmp	r7, #98	; 0x62
 80063d6:	d80a      	bhi.n	80063ee <_printf_i+0x32>
 80063d8:	2f00      	cmp	r7, #0
 80063da:	f000 80d8 	beq.w	800658e <_printf_i+0x1d2>
 80063de:	2f58      	cmp	r7, #88	; 0x58
 80063e0:	f000 80a3 	beq.w	800652a <_printf_i+0x16e>
 80063e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063ec:	e03a      	b.n	8006464 <_printf_i+0xa8>
 80063ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063f2:	2b15      	cmp	r3, #21
 80063f4:	d8f6      	bhi.n	80063e4 <_printf_i+0x28>
 80063f6:	a101      	add	r1, pc, #4	; (adr r1, 80063fc <_printf_i+0x40>)
 80063f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063fc:	08006455 	.word	0x08006455
 8006400:	08006469 	.word	0x08006469
 8006404:	080063e5 	.word	0x080063e5
 8006408:	080063e5 	.word	0x080063e5
 800640c:	080063e5 	.word	0x080063e5
 8006410:	080063e5 	.word	0x080063e5
 8006414:	08006469 	.word	0x08006469
 8006418:	080063e5 	.word	0x080063e5
 800641c:	080063e5 	.word	0x080063e5
 8006420:	080063e5 	.word	0x080063e5
 8006424:	080063e5 	.word	0x080063e5
 8006428:	08006575 	.word	0x08006575
 800642c:	08006499 	.word	0x08006499
 8006430:	08006557 	.word	0x08006557
 8006434:	080063e5 	.word	0x080063e5
 8006438:	080063e5 	.word	0x080063e5
 800643c:	08006597 	.word	0x08006597
 8006440:	080063e5 	.word	0x080063e5
 8006444:	08006499 	.word	0x08006499
 8006448:	080063e5 	.word	0x080063e5
 800644c:	080063e5 	.word	0x080063e5
 8006450:	0800655f 	.word	0x0800655f
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	1d1a      	adds	r2, r3, #4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	602a      	str	r2, [r5, #0]
 800645c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006464:	2301      	movs	r3, #1
 8006466:	e0a3      	b.n	80065b0 <_printf_i+0x1f4>
 8006468:	6820      	ldr	r0, [r4, #0]
 800646a:	6829      	ldr	r1, [r5, #0]
 800646c:	0606      	lsls	r6, r0, #24
 800646e:	f101 0304 	add.w	r3, r1, #4
 8006472:	d50a      	bpl.n	800648a <_printf_i+0xce>
 8006474:	680e      	ldr	r6, [r1, #0]
 8006476:	602b      	str	r3, [r5, #0]
 8006478:	2e00      	cmp	r6, #0
 800647a:	da03      	bge.n	8006484 <_printf_i+0xc8>
 800647c:	232d      	movs	r3, #45	; 0x2d
 800647e:	4276      	negs	r6, r6
 8006480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006484:	485e      	ldr	r0, [pc, #376]	; (8006600 <_printf_i+0x244>)
 8006486:	230a      	movs	r3, #10
 8006488:	e019      	b.n	80064be <_printf_i+0x102>
 800648a:	680e      	ldr	r6, [r1, #0]
 800648c:	602b      	str	r3, [r5, #0]
 800648e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006492:	bf18      	it	ne
 8006494:	b236      	sxthne	r6, r6
 8006496:	e7ef      	b.n	8006478 <_printf_i+0xbc>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	6820      	ldr	r0, [r4, #0]
 800649c:	1d19      	adds	r1, r3, #4
 800649e:	6029      	str	r1, [r5, #0]
 80064a0:	0601      	lsls	r1, r0, #24
 80064a2:	d501      	bpl.n	80064a8 <_printf_i+0xec>
 80064a4:	681e      	ldr	r6, [r3, #0]
 80064a6:	e002      	b.n	80064ae <_printf_i+0xf2>
 80064a8:	0646      	lsls	r6, r0, #25
 80064aa:	d5fb      	bpl.n	80064a4 <_printf_i+0xe8>
 80064ac:	881e      	ldrh	r6, [r3, #0]
 80064ae:	4854      	ldr	r0, [pc, #336]	; (8006600 <_printf_i+0x244>)
 80064b0:	2f6f      	cmp	r7, #111	; 0x6f
 80064b2:	bf0c      	ite	eq
 80064b4:	2308      	moveq	r3, #8
 80064b6:	230a      	movne	r3, #10
 80064b8:	2100      	movs	r1, #0
 80064ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064be:	6865      	ldr	r5, [r4, #4]
 80064c0:	60a5      	str	r5, [r4, #8]
 80064c2:	2d00      	cmp	r5, #0
 80064c4:	bfa2      	ittt	ge
 80064c6:	6821      	ldrge	r1, [r4, #0]
 80064c8:	f021 0104 	bicge.w	r1, r1, #4
 80064cc:	6021      	strge	r1, [r4, #0]
 80064ce:	b90e      	cbnz	r6, 80064d4 <_printf_i+0x118>
 80064d0:	2d00      	cmp	r5, #0
 80064d2:	d04d      	beq.n	8006570 <_printf_i+0x1b4>
 80064d4:	4615      	mov	r5, r2
 80064d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80064da:	fb03 6711 	mls	r7, r3, r1, r6
 80064de:	5dc7      	ldrb	r7, [r0, r7]
 80064e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064e4:	4637      	mov	r7, r6
 80064e6:	42bb      	cmp	r3, r7
 80064e8:	460e      	mov	r6, r1
 80064ea:	d9f4      	bls.n	80064d6 <_printf_i+0x11a>
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d10b      	bne.n	8006508 <_printf_i+0x14c>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	07de      	lsls	r6, r3, #31
 80064f4:	d508      	bpl.n	8006508 <_printf_i+0x14c>
 80064f6:	6923      	ldr	r3, [r4, #16]
 80064f8:	6861      	ldr	r1, [r4, #4]
 80064fa:	4299      	cmp	r1, r3
 80064fc:	bfde      	ittt	le
 80064fe:	2330      	movle	r3, #48	; 0x30
 8006500:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006504:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006508:	1b52      	subs	r2, r2, r5
 800650a:	6122      	str	r2, [r4, #16]
 800650c:	f8cd a000 	str.w	sl, [sp]
 8006510:	464b      	mov	r3, r9
 8006512:	aa03      	add	r2, sp, #12
 8006514:	4621      	mov	r1, r4
 8006516:	4640      	mov	r0, r8
 8006518:	f7ff fee2 	bl	80062e0 <_printf_common>
 800651c:	3001      	adds	r0, #1
 800651e:	d14c      	bne.n	80065ba <_printf_i+0x1fe>
 8006520:	f04f 30ff 	mov.w	r0, #4294967295
 8006524:	b004      	add	sp, #16
 8006526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652a:	4835      	ldr	r0, [pc, #212]	; (8006600 <_printf_i+0x244>)
 800652c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006530:	6829      	ldr	r1, [r5, #0]
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	f851 6b04 	ldr.w	r6, [r1], #4
 8006538:	6029      	str	r1, [r5, #0]
 800653a:	061d      	lsls	r5, r3, #24
 800653c:	d514      	bpl.n	8006568 <_printf_i+0x1ac>
 800653e:	07df      	lsls	r7, r3, #31
 8006540:	bf44      	itt	mi
 8006542:	f043 0320 	orrmi.w	r3, r3, #32
 8006546:	6023      	strmi	r3, [r4, #0]
 8006548:	b91e      	cbnz	r6, 8006552 <_printf_i+0x196>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	f023 0320 	bic.w	r3, r3, #32
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	2310      	movs	r3, #16
 8006554:	e7b0      	b.n	80064b8 <_printf_i+0xfc>
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	f043 0320 	orr.w	r3, r3, #32
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	2378      	movs	r3, #120	; 0x78
 8006560:	4828      	ldr	r0, [pc, #160]	; (8006604 <_printf_i+0x248>)
 8006562:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006566:	e7e3      	b.n	8006530 <_printf_i+0x174>
 8006568:	0659      	lsls	r1, r3, #25
 800656a:	bf48      	it	mi
 800656c:	b2b6      	uxthmi	r6, r6
 800656e:	e7e6      	b.n	800653e <_printf_i+0x182>
 8006570:	4615      	mov	r5, r2
 8006572:	e7bb      	b.n	80064ec <_printf_i+0x130>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	6826      	ldr	r6, [r4, #0]
 8006578:	6961      	ldr	r1, [r4, #20]
 800657a:	1d18      	adds	r0, r3, #4
 800657c:	6028      	str	r0, [r5, #0]
 800657e:	0635      	lsls	r5, r6, #24
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	d501      	bpl.n	8006588 <_printf_i+0x1cc>
 8006584:	6019      	str	r1, [r3, #0]
 8006586:	e002      	b.n	800658e <_printf_i+0x1d2>
 8006588:	0670      	lsls	r0, r6, #25
 800658a:	d5fb      	bpl.n	8006584 <_printf_i+0x1c8>
 800658c:	8019      	strh	r1, [r3, #0]
 800658e:	2300      	movs	r3, #0
 8006590:	6123      	str	r3, [r4, #16]
 8006592:	4615      	mov	r5, r2
 8006594:	e7ba      	b.n	800650c <_printf_i+0x150>
 8006596:	682b      	ldr	r3, [r5, #0]
 8006598:	1d1a      	adds	r2, r3, #4
 800659a:	602a      	str	r2, [r5, #0]
 800659c:	681d      	ldr	r5, [r3, #0]
 800659e:	6862      	ldr	r2, [r4, #4]
 80065a0:	2100      	movs	r1, #0
 80065a2:	4628      	mov	r0, r5
 80065a4:	f7f9 fe1c 	bl	80001e0 <memchr>
 80065a8:	b108      	cbz	r0, 80065ae <_printf_i+0x1f2>
 80065aa:	1b40      	subs	r0, r0, r5
 80065ac:	6060      	str	r0, [r4, #4]
 80065ae:	6863      	ldr	r3, [r4, #4]
 80065b0:	6123      	str	r3, [r4, #16]
 80065b2:	2300      	movs	r3, #0
 80065b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b8:	e7a8      	b.n	800650c <_printf_i+0x150>
 80065ba:	6923      	ldr	r3, [r4, #16]
 80065bc:	462a      	mov	r2, r5
 80065be:	4649      	mov	r1, r9
 80065c0:	4640      	mov	r0, r8
 80065c2:	47d0      	blx	sl
 80065c4:	3001      	adds	r0, #1
 80065c6:	d0ab      	beq.n	8006520 <_printf_i+0x164>
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	079b      	lsls	r3, r3, #30
 80065cc:	d413      	bmi.n	80065f6 <_printf_i+0x23a>
 80065ce:	68e0      	ldr	r0, [r4, #12]
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	4298      	cmp	r0, r3
 80065d4:	bfb8      	it	lt
 80065d6:	4618      	movlt	r0, r3
 80065d8:	e7a4      	b.n	8006524 <_printf_i+0x168>
 80065da:	2301      	movs	r3, #1
 80065dc:	4632      	mov	r2, r6
 80065de:	4649      	mov	r1, r9
 80065e0:	4640      	mov	r0, r8
 80065e2:	47d0      	blx	sl
 80065e4:	3001      	adds	r0, #1
 80065e6:	d09b      	beq.n	8006520 <_printf_i+0x164>
 80065e8:	3501      	adds	r5, #1
 80065ea:	68e3      	ldr	r3, [r4, #12]
 80065ec:	9903      	ldr	r1, [sp, #12]
 80065ee:	1a5b      	subs	r3, r3, r1
 80065f0:	42ab      	cmp	r3, r5
 80065f2:	dcf2      	bgt.n	80065da <_printf_i+0x21e>
 80065f4:	e7eb      	b.n	80065ce <_printf_i+0x212>
 80065f6:	2500      	movs	r5, #0
 80065f8:	f104 0619 	add.w	r6, r4, #25
 80065fc:	e7f5      	b.n	80065ea <_printf_i+0x22e>
 80065fe:	bf00      	nop
 8006600:	0800866e 	.word	0x0800866e
 8006604:	0800867f 	.word	0x0800867f

08006608 <iprintf>:
 8006608:	b40f      	push	{r0, r1, r2, r3}
 800660a:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <iprintf+0x2c>)
 800660c:	b513      	push	{r0, r1, r4, lr}
 800660e:	681c      	ldr	r4, [r3, #0]
 8006610:	b124      	cbz	r4, 800661c <iprintf+0x14>
 8006612:	69a3      	ldr	r3, [r4, #24]
 8006614:	b913      	cbnz	r3, 800661c <iprintf+0x14>
 8006616:	4620      	mov	r0, r4
 8006618:	f000 fef0 	bl	80073fc <__sinit>
 800661c:	ab05      	add	r3, sp, #20
 800661e:	9a04      	ldr	r2, [sp, #16]
 8006620:	68a1      	ldr	r1, [r4, #8]
 8006622:	9301      	str	r3, [sp, #4]
 8006624:	4620      	mov	r0, r4
 8006626:	f001 fb6d 	bl	8007d04 <_vfiprintf_r>
 800662a:	b002      	add	sp, #8
 800662c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006630:	b004      	add	sp, #16
 8006632:	4770      	bx	lr
 8006634:	20000014 	.word	0x20000014

08006638 <_sbrk_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4d06      	ldr	r5, [pc, #24]	; (8006654 <_sbrk_r+0x1c>)
 800663c:	2300      	movs	r3, #0
 800663e:	4604      	mov	r4, r0
 8006640:	4608      	mov	r0, r1
 8006642:	602b      	str	r3, [r5, #0]
 8006644:	f7fa ffac 	bl	80015a0 <_sbrk>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_sbrk_r+0x1a>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	b103      	cbz	r3, 8006652 <_sbrk_r+0x1a>
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	2000034c 	.word	0x2000034c

08006658 <quorem>:
 8006658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	6903      	ldr	r3, [r0, #16]
 800665e:	690c      	ldr	r4, [r1, #16]
 8006660:	42a3      	cmp	r3, r4
 8006662:	4607      	mov	r7, r0
 8006664:	f2c0 8081 	blt.w	800676a <quorem+0x112>
 8006668:	3c01      	subs	r4, #1
 800666a:	f101 0814 	add.w	r8, r1, #20
 800666e:	f100 0514 	add.w	r5, r0, #20
 8006672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800667c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006680:	3301      	adds	r3, #1
 8006682:	429a      	cmp	r2, r3
 8006684:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006688:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800668c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006690:	d331      	bcc.n	80066f6 <quorem+0x9e>
 8006692:	f04f 0e00 	mov.w	lr, #0
 8006696:	4640      	mov	r0, r8
 8006698:	46ac      	mov	ip, r5
 800669a:	46f2      	mov	sl, lr
 800669c:	f850 2b04 	ldr.w	r2, [r0], #4
 80066a0:	b293      	uxth	r3, r2
 80066a2:	fb06 e303 	mla	r3, r6, r3, lr
 80066a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	ebaa 0303 	sub.w	r3, sl, r3
 80066b0:	f8dc a000 	ldr.w	sl, [ip]
 80066b4:	0c12      	lsrs	r2, r2, #16
 80066b6:	fa13 f38a 	uxtah	r3, r3, sl
 80066ba:	fb06 e202 	mla	r2, r6, r2, lr
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	9b00      	ldr	r3, [sp, #0]
 80066c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066c6:	b292      	uxth	r2, r2
 80066c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80066d4:	4581      	cmp	r9, r0
 80066d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066da:	f84c 3b04 	str.w	r3, [ip], #4
 80066de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066e2:	d2db      	bcs.n	800669c <quorem+0x44>
 80066e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80066e8:	b92b      	cbnz	r3, 80066f6 <quorem+0x9e>
 80066ea:	9b01      	ldr	r3, [sp, #4]
 80066ec:	3b04      	subs	r3, #4
 80066ee:	429d      	cmp	r5, r3
 80066f0:	461a      	mov	r2, r3
 80066f2:	d32e      	bcc.n	8006752 <quorem+0xfa>
 80066f4:	613c      	str	r4, [r7, #16]
 80066f6:	4638      	mov	r0, r7
 80066f8:	f001 f9c2 	bl	8007a80 <__mcmp>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	db24      	blt.n	800674a <quorem+0xf2>
 8006700:	3601      	adds	r6, #1
 8006702:	4628      	mov	r0, r5
 8006704:	f04f 0c00 	mov.w	ip, #0
 8006708:	f858 2b04 	ldr.w	r2, [r8], #4
 800670c:	f8d0 e000 	ldr.w	lr, [r0]
 8006710:	b293      	uxth	r3, r2
 8006712:	ebac 0303 	sub.w	r3, ip, r3
 8006716:	0c12      	lsrs	r2, r2, #16
 8006718:	fa13 f38e 	uxtah	r3, r3, lr
 800671c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006720:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006724:	b29b      	uxth	r3, r3
 8006726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800672a:	45c1      	cmp	r9, r8
 800672c:	f840 3b04 	str.w	r3, [r0], #4
 8006730:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006734:	d2e8      	bcs.n	8006708 <quorem+0xb0>
 8006736:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800673a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800673e:	b922      	cbnz	r2, 800674a <quorem+0xf2>
 8006740:	3b04      	subs	r3, #4
 8006742:	429d      	cmp	r5, r3
 8006744:	461a      	mov	r2, r3
 8006746:	d30a      	bcc.n	800675e <quorem+0x106>
 8006748:	613c      	str	r4, [r7, #16]
 800674a:	4630      	mov	r0, r6
 800674c:	b003      	add	sp, #12
 800674e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006752:	6812      	ldr	r2, [r2, #0]
 8006754:	3b04      	subs	r3, #4
 8006756:	2a00      	cmp	r2, #0
 8006758:	d1cc      	bne.n	80066f4 <quorem+0x9c>
 800675a:	3c01      	subs	r4, #1
 800675c:	e7c7      	b.n	80066ee <quorem+0x96>
 800675e:	6812      	ldr	r2, [r2, #0]
 8006760:	3b04      	subs	r3, #4
 8006762:	2a00      	cmp	r2, #0
 8006764:	d1f0      	bne.n	8006748 <quorem+0xf0>
 8006766:	3c01      	subs	r4, #1
 8006768:	e7eb      	b.n	8006742 <quorem+0xea>
 800676a:	2000      	movs	r0, #0
 800676c:	e7ee      	b.n	800674c <quorem+0xf4>
	...

08006770 <_dtoa_r>:
 8006770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	ed2d 8b04 	vpush	{d8-d9}
 8006778:	ec57 6b10 	vmov	r6, r7, d0
 800677c:	b093      	sub	sp, #76	; 0x4c
 800677e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006780:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006784:	9106      	str	r1, [sp, #24]
 8006786:	ee10 aa10 	vmov	sl, s0
 800678a:	4604      	mov	r4, r0
 800678c:	9209      	str	r2, [sp, #36]	; 0x24
 800678e:	930c      	str	r3, [sp, #48]	; 0x30
 8006790:	46bb      	mov	fp, r7
 8006792:	b975      	cbnz	r5, 80067b2 <_dtoa_r+0x42>
 8006794:	2010      	movs	r0, #16
 8006796:	f7ff f9dd 	bl	8005b54 <malloc>
 800679a:	4602      	mov	r2, r0
 800679c:	6260      	str	r0, [r4, #36]	; 0x24
 800679e:	b920      	cbnz	r0, 80067aa <_dtoa_r+0x3a>
 80067a0:	4ba7      	ldr	r3, [pc, #668]	; (8006a40 <_dtoa_r+0x2d0>)
 80067a2:	21ea      	movs	r1, #234	; 0xea
 80067a4:	48a7      	ldr	r0, [pc, #668]	; (8006a44 <_dtoa_r+0x2d4>)
 80067a6:	f001 fcf3 	bl	8008190 <__assert_func>
 80067aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067ae:	6005      	str	r5, [r0, #0]
 80067b0:	60c5      	str	r5, [r0, #12]
 80067b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b4:	6819      	ldr	r1, [r3, #0]
 80067b6:	b151      	cbz	r1, 80067ce <_dtoa_r+0x5e>
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	604a      	str	r2, [r1, #4]
 80067bc:	2301      	movs	r3, #1
 80067be:	4093      	lsls	r3, r2
 80067c0:	608b      	str	r3, [r1, #8]
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 ff1a 	bl	80075fc <_Bfree>
 80067c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	1e3b      	subs	r3, r7, #0
 80067d0:	bfaa      	itet	ge
 80067d2:	2300      	movge	r3, #0
 80067d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80067d8:	f8c8 3000 	strge.w	r3, [r8]
 80067dc:	4b9a      	ldr	r3, [pc, #616]	; (8006a48 <_dtoa_r+0x2d8>)
 80067de:	bfbc      	itt	lt
 80067e0:	2201      	movlt	r2, #1
 80067e2:	f8c8 2000 	strlt.w	r2, [r8]
 80067e6:	ea33 030b 	bics.w	r3, r3, fp
 80067ea:	d11b      	bne.n	8006824 <_dtoa_r+0xb4>
 80067ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067f8:	4333      	orrs	r3, r6
 80067fa:	f000 8592 	beq.w	8007322 <_dtoa_r+0xbb2>
 80067fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006800:	b963      	cbnz	r3, 800681c <_dtoa_r+0xac>
 8006802:	4b92      	ldr	r3, [pc, #584]	; (8006a4c <_dtoa_r+0x2dc>)
 8006804:	e022      	b.n	800684c <_dtoa_r+0xdc>
 8006806:	4b92      	ldr	r3, [pc, #584]	; (8006a50 <_dtoa_r+0x2e0>)
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	3308      	adds	r3, #8
 800680c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	9801      	ldr	r0, [sp, #4]
 8006812:	b013      	add	sp, #76	; 0x4c
 8006814:	ecbd 8b04 	vpop	{d8-d9}
 8006818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681c:	4b8b      	ldr	r3, [pc, #556]	; (8006a4c <_dtoa_r+0x2dc>)
 800681e:	9301      	str	r3, [sp, #4]
 8006820:	3303      	adds	r3, #3
 8006822:	e7f3      	b.n	800680c <_dtoa_r+0x9c>
 8006824:	2200      	movs	r2, #0
 8006826:	2300      	movs	r3, #0
 8006828:	4650      	mov	r0, sl
 800682a:	4659      	mov	r1, fp
 800682c:	f7fa f94c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006830:	ec4b ab19 	vmov	d9, sl, fp
 8006834:	4680      	mov	r8, r0
 8006836:	b158      	cbz	r0, 8006850 <_dtoa_r+0xe0>
 8006838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800683a:	2301      	movs	r3, #1
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 856b 	beq.w	800731c <_dtoa_r+0xbac>
 8006846:	4883      	ldr	r0, [pc, #524]	; (8006a54 <_dtoa_r+0x2e4>)
 8006848:	6018      	str	r0, [r3, #0]
 800684a:	1e43      	subs	r3, r0, #1
 800684c:	9301      	str	r3, [sp, #4]
 800684e:	e7df      	b.n	8006810 <_dtoa_r+0xa0>
 8006850:	ec4b ab10 	vmov	d0, sl, fp
 8006854:	aa10      	add	r2, sp, #64	; 0x40
 8006856:	a911      	add	r1, sp, #68	; 0x44
 8006858:	4620      	mov	r0, r4
 800685a:	f001 f9b7 	bl	8007bcc <__d2b>
 800685e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006862:	ee08 0a10 	vmov	s16, r0
 8006866:	2d00      	cmp	r5, #0
 8006868:	f000 8084 	beq.w	8006974 <_dtoa_r+0x204>
 800686c:	ee19 3a90 	vmov	r3, s19
 8006870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006874:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006878:	4656      	mov	r6, sl
 800687a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800687e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006882:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006886:	4b74      	ldr	r3, [pc, #464]	; (8006a58 <_dtoa_r+0x2e8>)
 8006888:	2200      	movs	r2, #0
 800688a:	4630      	mov	r0, r6
 800688c:	4639      	mov	r1, r7
 800688e:	f7f9 fcfb 	bl	8000288 <__aeabi_dsub>
 8006892:	a365      	add	r3, pc, #404	; (adr r3, 8006a28 <_dtoa_r+0x2b8>)
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	f7f9 feae 	bl	80005f8 <__aeabi_dmul>
 800689c:	a364      	add	r3, pc, #400	; (adr r3, 8006a30 <_dtoa_r+0x2c0>)
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	f7f9 fcf3 	bl	800028c <__adddf3>
 80068a6:	4606      	mov	r6, r0
 80068a8:	4628      	mov	r0, r5
 80068aa:	460f      	mov	r7, r1
 80068ac:	f7f9 fe3a 	bl	8000524 <__aeabi_i2d>
 80068b0:	a361      	add	r3, pc, #388	; (adr r3, 8006a38 <_dtoa_r+0x2c8>)
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f7f9 fe9f 	bl	80005f8 <__aeabi_dmul>
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	4630      	mov	r0, r6
 80068c0:	4639      	mov	r1, r7
 80068c2:	f7f9 fce3 	bl	800028c <__adddf3>
 80068c6:	4606      	mov	r6, r0
 80068c8:	460f      	mov	r7, r1
 80068ca:	f7fa f945 	bl	8000b58 <__aeabi_d2iz>
 80068ce:	2200      	movs	r2, #0
 80068d0:	9000      	str	r0, [sp, #0]
 80068d2:	2300      	movs	r3, #0
 80068d4:	4630      	mov	r0, r6
 80068d6:	4639      	mov	r1, r7
 80068d8:	f7fa f900 	bl	8000adc <__aeabi_dcmplt>
 80068dc:	b150      	cbz	r0, 80068f4 <_dtoa_r+0x184>
 80068de:	9800      	ldr	r0, [sp, #0]
 80068e0:	f7f9 fe20 	bl	8000524 <__aeabi_i2d>
 80068e4:	4632      	mov	r2, r6
 80068e6:	463b      	mov	r3, r7
 80068e8:	f7fa f8ee 	bl	8000ac8 <__aeabi_dcmpeq>
 80068ec:	b910      	cbnz	r0, 80068f4 <_dtoa_r+0x184>
 80068ee:	9b00      	ldr	r3, [sp, #0]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	9b00      	ldr	r3, [sp, #0]
 80068f6:	2b16      	cmp	r3, #22
 80068f8:	d85a      	bhi.n	80069b0 <_dtoa_r+0x240>
 80068fa:	9a00      	ldr	r2, [sp, #0]
 80068fc:	4b57      	ldr	r3, [pc, #348]	; (8006a5c <_dtoa_r+0x2ec>)
 80068fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006906:	ec51 0b19 	vmov	r0, r1, d9
 800690a:	f7fa f8e7 	bl	8000adc <__aeabi_dcmplt>
 800690e:	2800      	cmp	r0, #0
 8006910:	d050      	beq.n	80069b4 <_dtoa_r+0x244>
 8006912:	9b00      	ldr	r3, [sp, #0]
 8006914:	3b01      	subs	r3, #1
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	2300      	movs	r3, #0
 800691a:	930b      	str	r3, [sp, #44]	; 0x2c
 800691c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800691e:	1b5d      	subs	r5, r3, r5
 8006920:	1e6b      	subs	r3, r5, #1
 8006922:	9305      	str	r3, [sp, #20]
 8006924:	bf45      	ittet	mi
 8006926:	f1c5 0301 	rsbmi	r3, r5, #1
 800692a:	9304      	strmi	r3, [sp, #16]
 800692c:	2300      	movpl	r3, #0
 800692e:	2300      	movmi	r3, #0
 8006930:	bf4c      	ite	mi
 8006932:	9305      	strmi	r3, [sp, #20]
 8006934:	9304      	strpl	r3, [sp, #16]
 8006936:	9b00      	ldr	r3, [sp, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	db3d      	blt.n	80069b8 <_dtoa_r+0x248>
 800693c:	9b05      	ldr	r3, [sp, #20]
 800693e:	9a00      	ldr	r2, [sp, #0]
 8006940:	920a      	str	r2, [sp, #40]	; 0x28
 8006942:	4413      	add	r3, r2
 8006944:	9305      	str	r3, [sp, #20]
 8006946:	2300      	movs	r3, #0
 8006948:	9307      	str	r3, [sp, #28]
 800694a:	9b06      	ldr	r3, [sp, #24]
 800694c:	2b09      	cmp	r3, #9
 800694e:	f200 8089 	bhi.w	8006a64 <_dtoa_r+0x2f4>
 8006952:	2b05      	cmp	r3, #5
 8006954:	bfc4      	itt	gt
 8006956:	3b04      	subgt	r3, #4
 8006958:	9306      	strgt	r3, [sp, #24]
 800695a:	9b06      	ldr	r3, [sp, #24]
 800695c:	f1a3 0302 	sub.w	r3, r3, #2
 8006960:	bfcc      	ite	gt
 8006962:	2500      	movgt	r5, #0
 8006964:	2501      	movle	r5, #1
 8006966:	2b03      	cmp	r3, #3
 8006968:	f200 8087 	bhi.w	8006a7a <_dtoa_r+0x30a>
 800696c:	e8df f003 	tbb	[pc, r3]
 8006970:	59383a2d 	.word	0x59383a2d
 8006974:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006978:	441d      	add	r5, r3
 800697a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800697e:	2b20      	cmp	r3, #32
 8006980:	bfc1      	itttt	gt
 8006982:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006986:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800698a:	fa0b f303 	lslgt.w	r3, fp, r3
 800698e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006992:	bfda      	itte	le
 8006994:	f1c3 0320 	rsble	r3, r3, #32
 8006998:	fa06 f003 	lslle.w	r0, r6, r3
 800699c:	4318      	orrgt	r0, r3
 800699e:	f7f9 fdb1 	bl	8000504 <__aeabi_ui2d>
 80069a2:	2301      	movs	r3, #1
 80069a4:	4606      	mov	r6, r0
 80069a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80069aa:	3d01      	subs	r5, #1
 80069ac:	930e      	str	r3, [sp, #56]	; 0x38
 80069ae:	e76a      	b.n	8006886 <_dtoa_r+0x116>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e7b2      	b.n	800691a <_dtoa_r+0x1aa>
 80069b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80069b6:	e7b1      	b.n	800691c <_dtoa_r+0x1ac>
 80069b8:	9b04      	ldr	r3, [sp, #16]
 80069ba:	9a00      	ldr	r2, [sp, #0]
 80069bc:	1a9b      	subs	r3, r3, r2
 80069be:	9304      	str	r3, [sp, #16]
 80069c0:	4253      	negs	r3, r2
 80069c2:	9307      	str	r3, [sp, #28]
 80069c4:	2300      	movs	r3, #0
 80069c6:	930a      	str	r3, [sp, #40]	; 0x28
 80069c8:	e7bf      	b.n	800694a <_dtoa_r+0x1da>
 80069ca:	2300      	movs	r3, #0
 80069cc:	9308      	str	r3, [sp, #32]
 80069ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	dc55      	bgt.n	8006a80 <_dtoa_r+0x310>
 80069d4:	2301      	movs	r3, #1
 80069d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80069da:	461a      	mov	r2, r3
 80069dc:	9209      	str	r2, [sp, #36]	; 0x24
 80069de:	e00c      	b.n	80069fa <_dtoa_r+0x28a>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e7f3      	b.n	80069cc <_dtoa_r+0x25c>
 80069e4:	2300      	movs	r3, #0
 80069e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069e8:	9308      	str	r3, [sp, #32]
 80069ea:	9b00      	ldr	r3, [sp, #0]
 80069ec:	4413      	add	r3, r2
 80069ee:	9302      	str	r3, [sp, #8]
 80069f0:	3301      	adds	r3, #1
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	9303      	str	r3, [sp, #12]
 80069f6:	bfb8      	it	lt
 80069f8:	2301      	movlt	r3, #1
 80069fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80069fc:	2200      	movs	r2, #0
 80069fe:	6042      	str	r2, [r0, #4]
 8006a00:	2204      	movs	r2, #4
 8006a02:	f102 0614 	add.w	r6, r2, #20
 8006a06:	429e      	cmp	r6, r3
 8006a08:	6841      	ldr	r1, [r0, #4]
 8006a0a:	d93d      	bls.n	8006a88 <_dtoa_r+0x318>
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 fdb5 	bl	800757c <_Balloc>
 8006a12:	9001      	str	r0, [sp, #4]
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d13b      	bne.n	8006a90 <_dtoa_r+0x320>
 8006a18:	4b11      	ldr	r3, [pc, #68]	; (8006a60 <_dtoa_r+0x2f0>)
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a20:	e6c0      	b.n	80067a4 <_dtoa_r+0x34>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e7df      	b.n	80069e6 <_dtoa_r+0x276>
 8006a26:	bf00      	nop
 8006a28:	636f4361 	.word	0x636f4361
 8006a2c:	3fd287a7 	.word	0x3fd287a7
 8006a30:	8b60c8b3 	.word	0x8b60c8b3
 8006a34:	3fc68a28 	.word	0x3fc68a28
 8006a38:	509f79fb 	.word	0x509f79fb
 8006a3c:	3fd34413 	.word	0x3fd34413
 8006a40:	0800869d 	.word	0x0800869d
 8006a44:	080086b4 	.word	0x080086b4
 8006a48:	7ff00000 	.word	0x7ff00000
 8006a4c:	08008699 	.word	0x08008699
 8006a50:	08008690 	.word	0x08008690
 8006a54:	0800866d 	.word	0x0800866d
 8006a58:	3ff80000 	.word	0x3ff80000
 8006a5c:	08008808 	.word	0x08008808
 8006a60:	0800870f 	.word	0x0800870f
 8006a64:	2501      	movs	r5, #1
 8006a66:	2300      	movs	r3, #0
 8006a68:	9306      	str	r3, [sp, #24]
 8006a6a:	9508      	str	r5, [sp, #32]
 8006a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a74:	2200      	movs	r2, #0
 8006a76:	2312      	movs	r3, #18
 8006a78:	e7b0      	b.n	80069dc <_dtoa_r+0x26c>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	9308      	str	r3, [sp, #32]
 8006a7e:	e7f5      	b.n	8006a6c <_dtoa_r+0x2fc>
 8006a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a86:	e7b8      	b.n	80069fa <_dtoa_r+0x28a>
 8006a88:	3101      	adds	r1, #1
 8006a8a:	6041      	str	r1, [r0, #4]
 8006a8c:	0052      	lsls	r2, r2, #1
 8006a8e:	e7b8      	b.n	8006a02 <_dtoa_r+0x292>
 8006a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a92:	9a01      	ldr	r2, [sp, #4]
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	9b03      	ldr	r3, [sp, #12]
 8006a98:	2b0e      	cmp	r3, #14
 8006a9a:	f200 809d 	bhi.w	8006bd8 <_dtoa_r+0x468>
 8006a9e:	2d00      	cmp	r5, #0
 8006aa0:	f000 809a 	beq.w	8006bd8 <_dtoa_r+0x468>
 8006aa4:	9b00      	ldr	r3, [sp, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	dd32      	ble.n	8006b10 <_dtoa_r+0x3a0>
 8006aaa:	4ab7      	ldr	r2, [pc, #732]	; (8006d88 <_dtoa_r+0x618>)
 8006aac:	f003 030f 	and.w	r3, r3, #15
 8006ab0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ab4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ab8:	9b00      	ldr	r3, [sp, #0]
 8006aba:	05d8      	lsls	r0, r3, #23
 8006abc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ac0:	d516      	bpl.n	8006af0 <_dtoa_r+0x380>
 8006ac2:	4bb2      	ldr	r3, [pc, #712]	; (8006d8c <_dtoa_r+0x61c>)
 8006ac4:	ec51 0b19 	vmov	r0, r1, d9
 8006ac8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006acc:	f7f9 febe 	bl	800084c <__aeabi_ddiv>
 8006ad0:	f007 070f 	and.w	r7, r7, #15
 8006ad4:	4682      	mov	sl, r0
 8006ad6:	468b      	mov	fp, r1
 8006ad8:	2503      	movs	r5, #3
 8006ada:	4eac      	ldr	r6, [pc, #688]	; (8006d8c <_dtoa_r+0x61c>)
 8006adc:	b957      	cbnz	r7, 8006af4 <_dtoa_r+0x384>
 8006ade:	4642      	mov	r2, r8
 8006ae0:	464b      	mov	r3, r9
 8006ae2:	4650      	mov	r0, sl
 8006ae4:	4659      	mov	r1, fp
 8006ae6:	f7f9 feb1 	bl	800084c <__aeabi_ddiv>
 8006aea:	4682      	mov	sl, r0
 8006aec:	468b      	mov	fp, r1
 8006aee:	e028      	b.n	8006b42 <_dtoa_r+0x3d2>
 8006af0:	2502      	movs	r5, #2
 8006af2:	e7f2      	b.n	8006ada <_dtoa_r+0x36a>
 8006af4:	07f9      	lsls	r1, r7, #31
 8006af6:	d508      	bpl.n	8006b0a <_dtoa_r+0x39a>
 8006af8:	4640      	mov	r0, r8
 8006afa:	4649      	mov	r1, r9
 8006afc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b00:	f7f9 fd7a 	bl	80005f8 <__aeabi_dmul>
 8006b04:	3501      	adds	r5, #1
 8006b06:	4680      	mov	r8, r0
 8006b08:	4689      	mov	r9, r1
 8006b0a:	107f      	asrs	r7, r7, #1
 8006b0c:	3608      	adds	r6, #8
 8006b0e:	e7e5      	b.n	8006adc <_dtoa_r+0x36c>
 8006b10:	f000 809b 	beq.w	8006c4a <_dtoa_r+0x4da>
 8006b14:	9b00      	ldr	r3, [sp, #0]
 8006b16:	4f9d      	ldr	r7, [pc, #628]	; (8006d8c <_dtoa_r+0x61c>)
 8006b18:	425e      	negs	r6, r3
 8006b1a:	4b9b      	ldr	r3, [pc, #620]	; (8006d88 <_dtoa_r+0x618>)
 8006b1c:	f006 020f 	and.w	r2, r6, #15
 8006b20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	ec51 0b19 	vmov	r0, r1, d9
 8006b2c:	f7f9 fd64 	bl	80005f8 <__aeabi_dmul>
 8006b30:	1136      	asrs	r6, r6, #4
 8006b32:	4682      	mov	sl, r0
 8006b34:	468b      	mov	fp, r1
 8006b36:	2300      	movs	r3, #0
 8006b38:	2502      	movs	r5, #2
 8006b3a:	2e00      	cmp	r6, #0
 8006b3c:	d17a      	bne.n	8006c34 <_dtoa_r+0x4c4>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1d3      	bne.n	8006aea <_dtoa_r+0x37a>
 8006b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8082 	beq.w	8006c4e <_dtoa_r+0x4de>
 8006b4a:	4b91      	ldr	r3, [pc, #580]	; (8006d90 <_dtoa_r+0x620>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4650      	mov	r0, sl
 8006b50:	4659      	mov	r1, fp
 8006b52:	f7f9 ffc3 	bl	8000adc <__aeabi_dcmplt>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d079      	beq.n	8006c4e <_dtoa_r+0x4de>
 8006b5a:	9b03      	ldr	r3, [sp, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d076      	beq.n	8006c4e <_dtoa_r+0x4de>
 8006b60:	9b02      	ldr	r3, [sp, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	dd36      	ble.n	8006bd4 <_dtoa_r+0x464>
 8006b66:	9b00      	ldr	r3, [sp, #0]
 8006b68:	4650      	mov	r0, sl
 8006b6a:	4659      	mov	r1, fp
 8006b6c:	1e5f      	subs	r7, r3, #1
 8006b6e:	2200      	movs	r2, #0
 8006b70:	4b88      	ldr	r3, [pc, #544]	; (8006d94 <_dtoa_r+0x624>)
 8006b72:	f7f9 fd41 	bl	80005f8 <__aeabi_dmul>
 8006b76:	9e02      	ldr	r6, [sp, #8]
 8006b78:	4682      	mov	sl, r0
 8006b7a:	468b      	mov	fp, r1
 8006b7c:	3501      	adds	r5, #1
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f7f9 fcd0 	bl	8000524 <__aeabi_i2d>
 8006b84:	4652      	mov	r2, sl
 8006b86:	465b      	mov	r3, fp
 8006b88:	f7f9 fd36 	bl	80005f8 <__aeabi_dmul>
 8006b8c:	4b82      	ldr	r3, [pc, #520]	; (8006d98 <_dtoa_r+0x628>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f7f9 fb7c 	bl	800028c <__adddf3>
 8006b94:	46d0      	mov	r8, sl
 8006b96:	46d9      	mov	r9, fp
 8006b98:	4682      	mov	sl, r0
 8006b9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006b9e:	2e00      	cmp	r6, #0
 8006ba0:	d158      	bne.n	8006c54 <_dtoa_r+0x4e4>
 8006ba2:	4b7e      	ldr	r3, [pc, #504]	; (8006d9c <_dtoa_r+0x62c>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	4649      	mov	r1, r9
 8006baa:	f7f9 fb6d 	bl	8000288 <__aeabi_dsub>
 8006bae:	4652      	mov	r2, sl
 8006bb0:	465b      	mov	r3, fp
 8006bb2:	4680      	mov	r8, r0
 8006bb4:	4689      	mov	r9, r1
 8006bb6:	f7f9 ffaf 	bl	8000b18 <__aeabi_dcmpgt>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	f040 8295 	bne.w	80070ea <_dtoa_r+0x97a>
 8006bc0:	4652      	mov	r2, sl
 8006bc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	4649      	mov	r1, r9
 8006bca:	f7f9 ff87 	bl	8000adc <__aeabi_dcmplt>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	f040 8289 	bne.w	80070e6 <_dtoa_r+0x976>
 8006bd4:	ec5b ab19 	vmov	sl, fp, d9
 8006bd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f2c0 8148 	blt.w	8006e70 <_dtoa_r+0x700>
 8006be0:	9a00      	ldr	r2, [sp, #0]
 8006be2:	2a0e      	cmp	r2, #14
 8006be4:	f300 8144 	bgt.w	8006e70 <_dtoa_r+0x700>
 8006be8:	4b67      	ldr	r3, [pc, #412]	; (8006d88 <_dtoa_r+0x618>)
 8006bea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f280 80d5 	bge.w	8006da4 <_dtoa_r+0x634>
 8006bfa:	9b03      	ldr	r3, [sp, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f300 80d1 	bgt.w	8006da4 <_dtoa_r+0x634>
 8006c02:	f040 826f 	bne.w	80070e4 <_dtoa_r+0x974>
 8006c06:	4b65      	ldr	r3, [pc, #404]	; (8006d9c <_dtoa_r+0x62c>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	f7f9 fcf3 	bl	80005f8 <__aeabi_dmul>
 8006c12:	4652      	mov	r2, sl
 8006c14:	465b      	mov	r3, fp
 8006c16:	f7f9 ff75 	bl	8000b04 <__aeabi_dcmpge>
 8006c1a:	9e03      	ldr	r6, [sp, #12]
 8006c1c:	4637      	mov	r7, r6
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f040 8245 	bne.w	80070ae <_dtoa_r+0x93e>
 8006c24:	9d01      	ldr	r5, [sp, #4]
 8006c26:	2331      	movs	r3, #49	; 0x31
 8006c28:	f805 3b01 	strb.w	r3, [r5], #1
 8006c2c:	9b00      	ldr	r3, [sp, #0]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	e240      	b.n	80070b6 <_dtoa_r+0x946>
 8006c34:	07f2      	lsls	r2, r6, #31
 8006c36:	d505      	bpl.n	8006c44 <_dtoa_r+0x4d4>
 8006c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c3c:	f7f9 fcdc 	bl	80005f8 <__aeabi_dmul>
 8006c40:	3501      	adds	r5, #1
 8006c42:	2301      	movs	r3, #1
 8006c44:	1076      	asrs	r6, r6, #1
 8006c46:	3708      	adds	r7, #8
 8006c48:	e777      	b.n	8006b3a <_dtoa_r+0x3ca>
 8006c4a:	2502      	movs	r5, #2
 8006c4c:	e779      	b.n	8006b42 <_dtoa_r+0x3d2>
 8006c4e:	9f00      	ldr	r7, [sp, #0]
 8006c50:	9e03      	ldr	r6, [sp, #12]
 8006c52:	e794      	b.n	8006b7e <_dtoa_r+0x40e>
 8006c54:	9901      	ldr	r1, [sp, #4]
 8006c56:	4b4c      	ldr	r3, [pc, #304]	; (8006d88 <_dtoa_r+0x618>)
 8006c58:	4431      	add	r1, r6
 8006c5a:	910d      	str	r1, [sp, #52]	; 0x34
 8006c5c:	9908      	ldr	r1, [sp, #32]
 8006c5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c66:	2900      	cmp	r1, #0
 8006c68:	d043      	beq.n	8006cf2 <_dtoa_r+0x582>
 8006c6a:	494d      	ldr	r1, [pc, #308]	; (8006da0 <_dtoa_r+0x630>)
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	f7f9 fded 	bl	800084c <__aeabi_ddiv>
 8006c72:	4652      	mov	r2, sl
 8006c74:	465b      	mov	r3, fp
 8006c76:	f7f9 fb07 	bl	8000288 <__aeabi_dsub>
 8006c7a:	9d01      	ldr	r5, [sp, #4]
 8006c7c:	4682      	mov	sl, r0
 8006c7e:	468b      	mov	fp, r1
 8006c80:	4649      	mov	r1, r9
 8006c82:	4640      	mov	r0, r8
 8006c84:	f7f9 ff68 	bl	8000b58 <__aeabi_d2iz>
 8006c88:	4606      	mov	r6, r0
 8006c8a:	f7f9 fc4b 	bl	8000524 <__aeabi_i2d>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4640      	mov	r0, r8
 8006c94:	4649      	mov	r1, r9
 8006c96:	f7f9 faf7 	bl	8000288 <__aeabi_dsub>
 8006c9a:	3630      	adds	r6, #48	; 0x30
 8006c9c:	f805 6b01 	strb.w	r6, [r5], #1
 8006ca0:	4652      	mov	r2, sl
 8006ca2:	465b      	mov	r3, fp
 8006ca4:	4680      	mov	r8, r0
 8006ca6:	4689      	mov	r9, r1
 8006ca8:	f7f9 ff18 	bl	8000adc <__aeabi_dcmplt>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d163      	bne.n	8006d78 <_dtoa_r+0x608>
 8006cb0:	4642      	mov	r2, r8
 8006cb2:	464b      	mov	r3, r9
 8006cb4:	4936      	ldr	r1, [pc, #216]	; (8006d90 <_dtoa_r+0x620>)
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	f7f9 fae6 	bl	8000288 <__aeabi_dsub>
 8006cbc:	4652      	mov	r2, sl
 8006cbe:	465b      	mov	r3, fp
 8006cc0:	f7f9 ff0c 	bl	8000adc <__aeabi_dcmplt>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	f040 80b5 	bne.w	8006e34 <_dtoa_r+0x6c4>
 8006cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ccc:	429d      	cmp	r5, r3
 8006cce:	d081      	beq.n	8006bd4 <_dtoa_r+0x464>
 8006cd0:	4b30      	ldr	r3, [pc, #192]	; (8006d94 <_dtoa_r+0x624>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	4650      	mov	r0, sl
 8006cd6:	4659      	mov	r1, fp
 8006cd8:	f7f9 fc8e 	bl	80005f8 <__aeabi_dmul>
 8006cdc:	4b2d      	ldr	r3, [pc, #180]	; (8006d94 <_dtoa_r+0x624>)
 8006cde:	4682      	mov	sl, r0
 8006ce0:	468b      	mov	fp, r1
 8006ce2:	4640      	mov	r0, r8
 8006ce4:	4649      	mov	r1, r9
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f7f9 fc86 	bl	80005f8 <__aeabi_dmul>
 8006cec:	4680      	mov	r8, r0
 8006cee:	4689      	mov	r9, r1
 8006cf0:	e7c6      	b.n	8006c80 <_dtoa_r+0x510>
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	4659      	mov	r1, fp
 8006cf6:	f7f9 fc7f 	bl	80005f8 <__aeabi_dmul>
 8006cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cfc:	9d01      	ldr	r5, [sp, #4]
 8006cfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d00:	4682      	mov	sl, r0
 8006d02:	468b      	mov	fp, r1
 8006d04:	4649      	mov	r1, r9
 8006d06:	4640      	mov	r0, r8
 8006d08:	f7f9 ff26 	bl	8000b58 <__aeabi_d2iz>
 8006d0c:	4606      	mov	r6, r0
 8006d0e:	f7f9 fc09 	bl	8000524 <__aeabi_i2d>
 8006d12:	3630      	adds	r6, #48	; 0x30
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4640      	mov	r0, r8
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	f7f9 fab4 	bl	8000288 <__aeabi_dsub>
 8006d20:	f805 6b01 	strb.w	r6, [r5], #1
 8006d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d26:	429d      	cmp	r5, r3
 8006d28:	4680      	mov	r8, r0
 8006d2a:	4689      	mov	r9, r1
 8006d2c:	f04f 0200 	mov.w	r2, #0
 8006d30:	d124      	bne.n	8006d7c <_dtoa_r+0x60c>
 8006d32:	4b1b      	ldr	r3, [pc, #108]	; (8006da0 <_dtoa_r+0x630>)
 8006d34:	4650      	mov	r0, sl
 8006d36:	4659      	mov	r1, fp
 8006d38:	f7f9 faa8 	bl	800028c <__adddf3>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4640      	mov	r0, r8
 8006d42:	4649      	mov	r1, r9
 8006d44:	f7f9 fee8 	bl	8000b18 <__aeabi_dcmpgt>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d173      	bne.n	8006e34 <_dtoa_r+0x6c4>
 8006d4c:	4652      	mov	r2, sl
 8006d4e:	465b      	mov	r3, fp
 8006d50:	4913      	ldr	r1, [pc, #76]	; (8006da0 <_dtoa_r+0x630>)
 8006d52:	2000      	movs	r0, #0
 8006d54:	f7f9 fa98 	bl	8000288 <__aeabi_dsub>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	4649      	mov	r1, r9
 8006d60:	f7f9 febc 	bl	8000adc <__aeabi_dcmplt>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	f43f af35 	beq.w	8006bd4 <_dtoa_r+0x464>
 8006d6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d6c:	1e6b      	subs	r3, r5, #1
 8006d6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d74:	2b30      	cmp	r3, #48	; 0x30
 8006d76:	d0f8      	beq.n	8006d6a <_dtoa_r+0x5fa>
 8006d78:	9700      	str	r7, [sp, #0]
 8006d7a:	e049      	b.n	8006e10 <_dtoa_r+0x6a0>
 8006d7c:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <_dtoa_r+0x624>)
 8006d7e:	f7f9 fc3b 	bl	80005f8 <__aeabi_dmul>
 8006d82:	4680      	mov	r8, r0
 8006d84:	4689      	mov	r9, r1
 8006d86:	e7bd      	b.n	8006d04 <_dtoa_r+0x594>
 8006d88:	08008808 	.word	0x08008808
 8006d8c:	080087e0 	.word	0x080087e0
 8006d90:	3ff00000 	.word	0x3ff00000
 8006d94:	40240000 	.word	0x40240000
 8006d98:	401c0000 	.word	0x401c0000
 8006d9c:	40140000 	.word	0x40140000
 8006da0:	3fe00000 	.word	0x3fe00000
 8006da4:	9d01      	ldr	r5, [sp, #4]
 8006da6:	4656      	mov	r6, sl
 8006da8:	465f      	mov	r7, fp
 8006daa:	4642      	mov	r2, r8
 8006dac:	464b      	mov	r3, r9
 8006dae:	4630      	mov	r0, r6
 8006db0:	4639      	mov	r1, r7
 8006db2:	f7f9 fd4b 	bl	800084c <__aeabi_ddiv>
 8006db6:	f7f9 fecf 	bl	8000b58 <__aeabi_d2iz>
 8006dba:	4682      	mov	sl, r0
 8006dbc:	f7f9 fbb2 	bl	8000524 <__aeabi_i2d>
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	f7f9 fc18 	bl	80005f8 <__aeabi_dmul>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4630      	mov	r0, r6
 8006dce:	4639      	mov	r1, r7
 8006dd0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006dd4:	f7f9 fa58 	bl	8000288 <__aeabi_dsub>
 8006dd8:	f805 6b01 	strb.w	r6, [r5], #1
 8006ddc:	9e01      	ldr	r6, [sp, #4]
 8006dde:	9f03      	ldr	r7, [sp, #12]
 8006de0:	1bae      	subs	r6, r5, r6
 8006de2:	42b7      	cmp	r7, r6
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	d135      	bne.n	8006e56 <_dtoa_r+0x6e6>
 8006dea:	f7f9 fa4f 	bl	800028c <__adddf3>
 8006dee:	4642      	mov	r2, r8
 8006df0:	464b      	mov	r3, r9
 8006df2:	4606      	mov	r6, r0
 8006df4:	460f      	mov	r7, r1
 8006df6:	f7f9 fe8f 	bl	8000b18 <__aeabi_dcmpgt>
 8006dfa:	b9d0      	cbnz	r0, 8006e32 <_dtoa_r+0x6c2>
 8006dfc:	4642      	mov	r2, r8
 8006dfe:	464b      	mov	r3, r9
 8006e00:	4630      	mov	r0, r6
 8006e02:	4639      	mov	r1, r7
 8006e04:	f7f9 fe60 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e08:	b110      	cbz	r0, 8006e10 <_dtoa_r+0x6a0>
 8006e0a:	f01a 0f01 	tst.w	sl, #1
 8006e0e:	d110      	bne.n	8006e32 <_dtoa_r+0x6c2>
 8006e10:	4620      	mov	r0, r4
 8006e12:	ee18 1a10 	vmov	r1, s16
 8006e16:	f000 fbf1 	bl	80075fc <_Bfree>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	9800      	ldr	r0, [sp, #0]
 8006e1e:	702b      	strb	r3, [r5, #0]
 8006e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e22:	3001      	adds	r0, #1
 8006e24:	6018      	str	r0, [r3, #0]
 8006e26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f43f acf1 	beq.w	8006810 <_dtoa_r+0xa0>
 8006e2e:	601d      	str	r5, [r3, #0]
 8006e30:	e4ee      	b.n	8006810 <_dtoa_r+0xa0>
 8006e32:	9f00      	ldr	r7, [sp, #0]
 8006e34:	462b      	mov	r3, r5
 8006e36:	461d      	mov	r5, r3
 8006e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e3c:	2a39      	cmp	r2, #57	; 0x39
 8006e3e:	d106      	bne.n	8006e4e <_dtoa_r+0x6de>
 8006e40:	9a01      	ldr	r2, [sp, #4]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d1f7      	bne.n	8006e36 <_dtoa_r+0x6c6>
 8006e46:	9901      	ldr	r1, [sp, #4]
 8006e48:	2230      	movs	r2, #48	; 0x30
 8006e4a:	3701      	adds	r7, #1
 8006e4c:	700a      	strb	r2, [r1, #0]
 8006e4e:	781a      	ldrb	r2, [r3, #0]
 8006e50:	3201      	adds	r2, #1
 8006e52:	701a      	strb	r2, [r3, #0]
 8006e54:	e790      	b.n	8006d78 <_dtoa_r+0x608>
 8006e56:	4ba6      	ldr	r3, [pc, #664]	; (80070f0 <_dtoa_r+0x980>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f7f9 fbcd 	bl	80005f8 <__aeabi_dmul>
 8006e5e:	2200      	movs	r2, #0
 8006e60:	2300      	movs	r3, #0
 8006e62:	4606      	mov	r6, r0
 8006e64:	460f      	mov	r7, r1
 8006e66:	f7f9 fe2f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d09d      	beq.n	8006daa <_dtoa_r+0x63a>
 8006e6e:	e7cf      	b.n	8006e10 <_dtoa_r+0x6a0>
 8006e70:	9a08      	ldr	r2, [sp, #32]
 8006e72:	2a00      	cmp	r2, #0
 8006e74:	f000 80d7 	beq.w	8007026 <_dtoa_r+0x8b6>
 8006e78:	9a06      	ldr	r2, [sp, #24]
 8006e7a:	2a01      	cmp	r2, #1
 8006e7c:	f300 80ba 	bgt.w	8006ff4 <_dtoa_r+0x884>
 8006e80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e82:	2a00      	cmp	r2, #0
 8006e84:	f000 80b2 	beq.w	8006fec <_dtoa_r+0x87c>
 8006e88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e8c:	9e07      	ldr	r6, [sp, #28]
 8006e8e:	9d04      	ldr	r5, [sp, #16]
 8006e90:	9a04      	ldr	r2, [sp, #16]
 8006e92:	441a      	add	r2, r3
 8006e94:	9204      	str	r2, [sp, #16]
 8006e96:	9a05      	ldr	r2, [sp, #20]
 8006e98:	2101      	movs	r1, #1
 8006e9a:	441a      	add	r2, r3
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	9205      	str	r2, [sp, #20]
 8006ea0:	f000 fc64 	bl	800776c <__i2b>
 8006ea4:	4607      	mov	r7, r0
 8006ea6:	2d00      	cmp	r5, #0
 8006ea8:	dd0c      	ble.n	8006ec4 <_dtoa_r+0x754>
 8006eaa:	9b05      	ldr	r3, [sp, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	dd09      	ble.n	8006ec4 <_dtoa_r+0x754>
 8006eb0:	42ab      	cmp	r3, r5
 8006eb2:	9a04      	ldr	r2, [sp, #16]
 8006eb4:	bfa8      	it	ge
 8006eb6:	462b      	movge	r3, r5
 8006eb8:	1ad2      	subs	r2, r2, r3
 8006eba:	9204      	str	r2, [sp, #16]
 8006ebc:	9a05      	ldr	r2, [sp, #20]
 8006ebe:	1aed      	subs	r5, r5, r3
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	9305      	str	r3, [sp, #20]
 8006ec4:	9b07      	ldr	r3, [sp, #28]
 8006ec6:	b31b      	cbz	r3, 8006f10 <_dtoa_r+0x7a0>
 8006ec8:	9b08      	ldr	r3, [sp, #32]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 80af 	beq.w	800702e <_dtoa_r+0x8be>
 8006ed0:	2e00      	cmp	r6, #0
 8006ed2:	dd13      	ble.n	8006efc <_dtoa_r+0x78c>
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	4632      	mov	r2, r6
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f000 fd07 	bl	80078ec <__pow5mult>
 8006ede:	ee18 2a10 	vmov	r2, s16
 8006ee2:	4601      	mov	r1, r0
 8006ee4:	4607      	mov	r7, r0
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f000 fc56 	bl	8007798 <__multiply>
 8006eec:	ee18 1a10 	vmov	r1, s16
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f000 fb82 	bl	80075fc <_Bfree>
 8006ef8:	ee08 8a10 	vmov	s16, r8
 8006efc:	9b07      	ldr	r3, [sp, #28]
 8006efe:	1b9a      	subs	r2, r3, r6
 8006f00:	d006      	beq.n	8006f10 <_dtoa_r+0x7a0>
 8006f02:	ee18 1a10 	vmov	r1, s16
 8006f06:	4620      	mov	r0, r4
 8006f08:	f000 fcf0 	bl	80078ec <__pow5mult>
 8006f0c:	ee08 0a10 	vmov	s16, r0
 8006f10:	2101      	movs	r1, #1
 8006f12:	4620      	mov	r0, r4
 8006f14:	f000 fc2a 	bl	800776c <__i2b>
 8006f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	f340 8088 	ble.w	8007032 <_dtoa_r+0x8c2>
 8006f22:	461a      	mov	r2, r3
 8006f24:	4601      	mov	r1, r0
 8006f26:	4620      	mov	r0, r4
 8006f28:	f000 fce0 	bl	80078ec <__pow5mult>
 8006f2c:	9b06      	ldr	r3, [sp, #24]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	4606      	mov	r6, r0
 8006f32:	f340 8081 	ble.w	8007038 <_dtoa_r+0x8c8>
 8006f36:	f04f 0800 	mov.w	r8, #0
 8006f3a:	6933      	ldr	r3, [r6, #16]
 8006f3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f40:	6918      	ldr	r0, [r3, #16]
 8006f42:	f000 fbc3 	bl	80076cc <__hi0bits>
 8006f46:	f1c0 0020 	rsb	r0, r0, #32
 8006f4a:	9b05      	ldr	r3, [sp, #20]
 8006f4c:	4418      	add	r0, r3
 8006f4e:	f010 001f 	ands.w	r0, r0, #31
 8006f52:	f000 8092 	beq.w	800707a <_dtoa_r+0x90a>
 8006f56:	f1c0 0320 	rsb	r3, r0, #32
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	f340 808a 	ble.w	8007074 <_dtoa_r+0x904>
 8006f60:	f1c0 001c 	rsb	r0, r0, #28
 8006f64:	9b04      	ldr	r3, [sp, #16]
 8006f66:	4403      	add	r3, r0
 8006f68:	9304      	str	r3, [sp, #16]
 8006f6a:	9b05      	ldr	r3, [sp, #20]
 8006f6c:	4403      	add	r3, r0
 8006f6e:	4405      	add	r5, r0
 8006f70:	9305      	str	r3, [sp, #20]
 8006f72:	9b04      	ldr	r3, [sp, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	dd07      	ble.n	8006f88 <_dtoa_r+0x818>
 8006f78:	ee18 1a10 	vmov	r1, s16
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 fd0e 	bl	80079a0 <__lshift>
 8006f84:	ee08 0a10 	vmov	s16, r0
 8006f88:	9b05      	ldr	r3, [sp, #20]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	dd05      	ble.n	8006f9a <_dtoa_r+0x82a>
 8006f8e:	4631      	mov	r1, r6
 8006f90:	461a      	mov	r2, r3
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 fd04 	bl	80079a0 <__lshift>
 8006f98:	4606      	mov	r6, r0
 8006f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d06e      	beq.n	800707e <_dtoa_r+0x90e>
 8006fa0:	ee18 0a10 	vmov	r0, s16
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	f000 fd6b 	bl	8007a80 <__mcmp>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	da67      	bge.n	800707e <_dtoa_r+0x90e>
 8006fae:	9b00      	ldr	r3, [sp, #0]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	ee18 1a10 	vmov	r1, s16
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	220a      	movs	r2, #10
 8006fba:	2300      	movs	r3, #0
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 fb3f 	bl	8007640 <__multadd>
 8006fc2:	9b08      	ldr	r3, [sp, #32]
 8006fc4:	ee08 0a10 	vmov	s16, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 81b1 	beq.w	8007330 <_dtoa_r+0xbc0>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	220a      	movs	r2, #10
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f000 fb33 	bl	8007640 <__multadd>
 8006fda:	9b02      	ldr	r3, [sp, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	4607      	mov	r7, r0
 8006fe0:	f300 808e 	bgt.w	8007100 <_dtoa_r+0x990>
 8006fe4:	9b06      	ldr	r3, [sp, #24]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	dc51      	bgt.n	800708e <_dtoa_r+0x91e>
 8006fea:	e089      	b.n	8007100 <_dtoa_r+0x990>
 8006fec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ff2:	e74b      	b.n	8006e8c <_dtoa_r+0x71c>
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	1e5e      	subs	r6, r3, #1
 8006ff8:	9b07      	ldr	r3, [sp, #28]
 8006ffa:	42b3      	cmp	r3, r6
 8006ffc:	bfbf      	itttt	lt
 8006ffe:	9b07      	ldrlt	r3, [sp, #28]
 8007000:	9607      	strlt	r6, [sp, #28]
 8007002:	1af2      	sublt	r2, r6, r3
 8007004:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007006:	bfb6      	itet	lt
 8007008:	189b      	addlt	r3, r3, r2
 800700a:	1b9e      	subge	r6, r3, r6
 800700c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800700e:	9b03      	ldr	r3, [sp, #12]
 8007010:	bfb8      	it	lt
 8007012:	2600      	movlt	r6, #0
 8007014:	2b00      	cmp	r3, #0
 8007016:	bfb7      	itett	lt
 8007018:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800701c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007020:	1a9d      	sublt	r5, r3, r2
 8007022:	2300      	movlt	r3, #0
 8007024:	e734      	b.n	8006e90 <_dtoa_r+0x720>
 8007026:	9e07      	ldr	r6, [sp, #28]
 8007028:	9d04      	ldr	r5, [sp, #16]
 800702a:	9f08      	ldr	r7, [sp, #32]
 800702c:	e73b      	b.n	8006ea6 <_dtoa_r+0x736>
 800702e:	9a07      	ldr	r2, [sp, #28]
 8007030:	e767      	b.n	8006f02 <_dtoa_r+0x792>
 8007032:	9b06      	ldr	r3, [sp, #24]
 8007034:	2b01      	cmp	r3, #1
 8007036:	dc18      	bgt.n	800706a <_dtoa_r+0x8fa>
 8007038:	f1ba 0f00 	cmp.w	sl, #0
 800703c:	d115      	bne.n	800706a <_dtoa_r+0x8fa>
 800703e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007042:	b993      	cbnz	r3, 800706a <_dtoa_r+0x8fa>
 8007044:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007048:	0d1b      	lsrs	r3, r3, #20
 800704a:	051b      	lsls	r3, r3, #20
 800704c:	b183      	cbz	r3, 8007070 <_dtoa_r+0x900>
 800704e:	9b04      	ldr	r3, [sp, #16]
 8007050:	3301      	adds	r3, #1
 8007052:	9304      	str	r3, [sp, #16]
 8007054:	9b05      	ldr	r3, [sp, #20]
 8007056:	3301      	adds	r3, #1
 8007058:	9305      	str	r3, [sp, #20]
 800705a:	f04f 0801 	mov.w	r8, #1
 800705e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007060:	2b00      	cmp	r3, #0
 8007062:	f47f af6a 	bne.w	8006f3a <_dtoa_r+0x7ca>
 8007066:	2001      	movs	r0, #1
 8007068:	e76f      	b.n	8006f4a <_dtoa_r+0x7da>
 800706a:	f04f 0800 	mov.w	r8, #0
 800706e:	e7f6      	b.n	800705e <_dtoa_r+0x8ee>
 8007070:	4698      	mov	r8, r3
 8007072:	e7f4      	b.n	800705e <_dtoa_r+0x8ee>
 8007074:	f43f af7d 	beq.w	8006f72 <_dtoa_r+0x802>
 8007078:	4618      	mov	r0, r3
 800707a:	301c      	adds	r0, #28
 800707c:	e772      	b.n	8006f64 <_dtoa_r+0x7f4>
 800707e:	9b03      	ldr	r3, [sp, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	dc37      	bgt.n	80070f4 <_dtoa_r+0x984>
 8007084:	9b06      	ldr	r3, [sp, #24]
 8007086:	2b02      	cmp	r3, #2
 8007088:	dd34      	ble.n	80070f4 <_dtoa_r+0x984>
 800708a:	9b03      	ldr	r3, [sp, #12]
 800708c:	9302      	str	r3, [sp, #8]
 800708e:	9b02      	ldr	r3, [sp, #8]
 8007090:	b96b      	cbnz	r3, 80070ae <_dtoa_r+0x93e>
 8007092:	4631      	mov	r1, r6
 8007094:	2205      	movs	r2, #5
 8007096:	4620      	mov	r0, r4
 8007098:	f000 fad2 	bl	8007640 <__multadd>
 800709c:	4601      	mov	r1, r0
 800709e:	4606      	mov	r6, r0
 80070a0:	ee18 0a10 	vmov	r0, s16
 80070a4:	f000 fcec 	bl	8007a80 <__mcmp>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	f73f adbb 	bgt.w	8006c24 <_dtoa_r+0x4b4>
 80070ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b0:	9d01      	ldr	r5, [sp, #4]
 80070b2:	43db      	mvns	r3, r3
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	f04f 0800 	mov.w	r8, #0
 80070ba:	4631      	mov	r1, r6
 80070bc:	4620      	mov	r0, r4
 80070be:	f000 fa9d 	bl	80075fc <_Bfree>
 80070c2:	2f00      	cmp	r7, #0
 80070c4:	f43f aea4 	beq.w	8006e10 <_dtoa_r+0x6a0>
 80070c8:	f1b8 0f00 	cmp.w	r8, #0
 80070cc:	d005      	beq.n	80070da <_dtoa_r+0x96a>
 80070ce:	45b8      	cmp	r8, r7
 80070d0:	d003      	beq.n	80070da <_dtoa_r+0x96a>
 80070d2:	4641      	mov	r1, r8
 80070d4:	4620      	mov	r0, r4
 80070d6:	f000 fa91 	bl	80075fc <_Bfree>
 80070da:	4639      	mov	r1, r7
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 fa8d 	bl	80075fc <_Bfree>
 80070e2:	e695      	b.n	8006e10 <_dtoa_r+0x6a0>
 80070e4:	2600      	movs	r6, #0
 80070e6:	4637      	mov	r7, r6
 80070e8:	e7e1      	b.n	80070ae <_dtoa_r+0x93e>
 80070ea:	9700      	str	r7, [sp, #0]
 80070ec:	4637      	mov	r7, r6
 80070ee:	e599      	b.n	8006c24 <_dtoa_r+0x4b4>
 80070f0:	40240000 	.word	0x40240000
 80070f4:	9b08      	ldr	r3, [sp, #32]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 80ca 	beq.w	8007290 <_dtoa_r+0xb20>
 80070fc:	9b03      	ldr	r3, [sp, #12]
 80070fe:	9302      	str	r3, [sp, #8]
 8007100:	2d00      	cmp	r5, #0
 8007102:	dd05      	ble.n	8007110 <_dtoa_r+0x9a0>
 8007104:	4639      	mov	r1, r7
 8007106:	462a      	mov	r2, r5
 8007108:	4620      	mov	r0, r4
 800710a:	f000 fc49 	bl	80079a0 <__lshift>
 800710e:	4607      	mov	r7, r0
 8007110:	f1b8 0f00 	cmp.w	r8, #0
 8007114:	d05b      	beq.n	80071ce <_dtoa_r+0xa5e>
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	4620      	mov	r0, r4
 800711a:	f000 fa2f 	bl	800757c <_Balloc>
 800711e:	4605      	mov	r5, r0
 8007120:	b928      	cbnz	r0, 800712e <_dtoa_r+0x9be>
 8007122:	4b87      	ldr	r3, [pc, #540]	; (8007340 <_dtoa_r+0xbd0>)
 8007124:	4602      	mov	r2, r0
 8007126:	f240 21ea 	movw	r1, #746	; 0x2ea
 800712a:	f7ff bb3b 	b.w	80067a4 <_dtoa_r+0x34>
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	3202      	adds	r2, #2
 8007132:	0092      	lsls	r2, r2, #2
 8007134:	f107 010c 	add.w	r1, r7, #12
 8007138:	300c      	adds	r0, #12
 800713a:	f000 fa04 	bl	8007546 <memcpy>
 800713e:	2201      	movs	r2, #1
 8007140:	4629      	mov	r1, r5
 8007142:	4620      	mov	r0, r4
 8007144:	f000 fc2c 	bl	80079a0 <__lshift>
 8007148:	9b01      	ldr	r3, [sp, #4]
 800714a:	f103 0901 	add.w	r9, r3, #1
 800714e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007152:	4413      	add	r3, r2
 8007154:	9305      	str	r3, [sp, #20]
 8007156:	f00a 0301 	and.w	r3, sl, #1
 800715a:	46b8      	mov	r8, r7
 800715c:	9304      	str	r3, [sp, #16]
 800715e:	4607      	mov	r7, r0
 8007160:	4631      	mov	r1, r6
 8007162:	ee18 0a10 	vmov	r0, s16
 8007166:	f7ff fa77 	bl	8006658 <quorem>
 800716a:	4641      	mov	r1, r8
 800716c:	9002      	str	r0, [sp, #8]
 800716e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007172:	ee18 0a10 	vmov	r0, s16
 8007176:	f000 fc83 	bl	8007a80 <__mcmp>
 800717a:	463a      	mov	r2, r7
 800717c:	9003      	str	r0, [sp, #12]
 800717e:	4631      	mov	r1, r6
 8007180:	4620      	mov	r0, r4
 8007182:	f000 fc99 	bl	8007ab8 <__mdiff>
 8007186:	68c2      	ldr	r2, [r0, #12]
 8007188:	f109 3bff 	add.w	fp, r9, #4294967295
 800718c:	4605      	mov	r5, r0
 800718e:	bb02      	cbnz	r2, 80071d2 <_dtoa_r+0xa62>
 8007190:	4601      	mov	r1, r0
 8007192:	ee18 0a10 	vmov	r0, s16
 8007196:	f000 fc73 	bl	8007a80 <__mcmp>
 800719a:	4602      	mov	r2, r0
 800719c:	4629      	mov	r1, r5
 800719e:	4620      	mov	r0, r4
 80071a0:	9207      	str	r2, [sp, #28]
 80071a2:	f000 fa2b 	bl	80075fc <_Bfree>
 80071a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80071aa:	ea43 0102 	orr.w	r1, r3, r2
 80071ae:	9b04      	ldr	r3, [sp, #16]
 80071b0:	430b      	orrs	r3, r1
 80071b2:	464d      	mov	r5, r9
 80071b4:	d10f      	bne.n	80071d6 <_dtoa_r+0xa66>
 80071b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80071ba:	d02a      	beq.n	8007212 <_dtoa_r+0xaa2>
 80071bc:	9b03      	ldr	r3, [sp, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	dd02      	ble.n	80071c8 <_dtoa_r+0xa58>
 80071c2:	9b02      	ldr	r3, [sp, #8]
 80071c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80071c8:	f88b a000 	strb.w	sl, [fp]
 80071cc:	e775      	b.n	80070ba <_dtoa_r+0x94a>
 80071ce:	4638      	mov	r0, r7
 80071d0:	e7ba      	b.n	8007148 <_dtoa_r+0x9d8>
 80071d2:	2201      	movs	r2, #1
 80071d4:	e7e2      	b.n	800719c <_dtoa_r+0xa2c>
 80071d6:	9b03      	ldr	r3, [sp, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	db04      	blt.n	80071e6 <_dtoa_r+0xa76>
 80071dc:	9906      	ldr	r1, [sp, #24]
 80071de:	430b      	orrs	r3, r1
 80071e0:	9904      	ldr	r1, [sp, #16]
 80071e2:	430b      	orrs	r3, r1
 80071e4:	d122      	bne.n	800722c <_dtoa_r+0xabc>
 80071e6:	2a00      	cmp	r2, #0
 80071e8:	ddee      	ble.n	80071c8 <_dtoa_r+0xa58>
 80071ea:	ee18 1a10 	vmov	r1, s16
 80071ee:	2201      	movs	r2, #1
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 fbd5 	bl	80079a0 <__lshift>
 80071f6:	4631      	mov	r1, r6
 80071f8:	ee08 0a10 	vmov	s16, r0
 80071fc:	f000 fc40 	bl	8007a80 <__mcmp>
 8007200:	2800      	cmp	r0, #0
 8007202:	dc03      	bgt.n	800720c <_dtoa_r+0xa9c>
 8007204:	d1e0      	bne.n	80071c8 <_dtoa_r+0xa58>
 8007206:	f01a 0f01 	tst.w	sl, #1
 800720a:	d0dd      	beq.n	80071c8 <_dtoa_r+0xa58>
 800720c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007210:	d1d7      	bne.n	80071c2 <_dtoa_r+0xa52>
 8007212:	2339      	movs	r3, #57	; 0x39
 8007214:	f88b 3000 	strb.w	r3, [fp]
 8007218:	462b      	mov	r3, r5
 800721a:	461d      	mov	r5, r3
 800721c:	3b01      	subs	r3, #1
 800721e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007222:	2a39      	cmp	r2, #57	; 0x39
 8007224:	d071      	beq.n	800730a <_dtoa_r+0xb9a>
 8007226:	3201      	adds	r2, #1
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	e746      	b.n	80070ba <_dtoa_r+0x94a>
 800722c:	2a00      	cmp	r2, #0
 800722e:	dd07      	ble.n	8007240 <_dtoa_r+0xad0>
 8007230:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007234:	d0ed      	beq.n	8007212 <_dtoa_r+0xaa2>
 8007236:	f10a 0301 	add.w	r3, sl, #1
 800723a:	f88b 3000 	strb.w	r3, [fp]
 800723e:	e73c      	b.n	80070ba <_dtoa_r+0x94a>
 8007240:	9b05      	ldr	r3, [sp, #20]
 8007242:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007246:	4599      	cmp	r9, r3
 8007248:	d047      	beq.n	80072da <_dtoa_r+0xb6a>
 800724a:	ee18 1a10 	vmov	r1, s16
 800724e:	2300      	movs	r3, #0
 8007250:	220a      	movs	r2, #10
 8007252:	4620      	mov	r0, r4
 8007254:	f000 f9f4 	bl	8007640 <__multadd>
 8007258:	45b8      	cmp	r8, r7
 800725a:	ee08 0a10 	vmov	s16, r0
 800725e:	f04f 0300 	mov.w	r3, #0
 8007262:	f04f 020a 	mov.w	r2, #10
 8007266:	4641      	mov	r1, r8
 8007268:	4620      	mov	r0, r4
 800726a:	d106      	bne.n	800727a <_dtoa_r+0xb0a>
 800726c:	f000 f9e8 	bl	8007640 <__multadd>
 8007270:	4680      	mov	r8, r0
 8007272:	4607      	mov	r7, r0
 8007274:	f109 0901 	add.w	r9, r9, #1
 8007278:	e772      	b.n	8007160 <_dtoa_r+0x9f0>
 800727a:	f000 f9e1 	bl	8007640 <__multadd>
 800727e:	4639      	mov	r1, r7
 8007280:	4680      	mov	r8, r0
 8007282:	2300      	movs	r3, #0
 8007284:	220a      	movs	r2, #10
 8007286:	4620      	mov	r0, r4
 8007288:	f000 f9da 	bl	8007640 <__multadd>
 800728c:	4607      	mov	r7, r0
 800728e:	e7f1      	b.n	8007274 <_dtoa_r+0xb04>
 8007290:	9b03      	ldr	r3, [sp, #12]
 8007292:	9302      	str	r3, [sp, #8]
 8007294:	9d01      	ldr	r5, [sp, #4]
 8007296:	ee18 0a10 	vmov	r0, s16
 800729a:	4631      	mov	r1, r6
 800729c:	f7ff f9dc 	bl	8006658 <quorem>
 80072a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80072a4:	9b01      	ldr	r3, [sp, #4]
 80072a6:	f805 ab01 	strb.w	sl, [r5], #1
 80072aa:	1aea      	subs	r2, r5, r3
 80072ac:	9b02      	ldr	r3, [sp, #8]
 80072ae:	4293      	cmp	r3, r2
 80072b0:	dd09      	ble.n	80072c6 <_dtoa_r+0xb56>
 80072b2:	ee18 1a10 	vmov	r1, s16
 80072b6:	2300      	movs	r3, #0
 80072b8:	220a      	movs	r2, #10
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 f9c0 	bl	8007640 <__multadd>
 80072c0:	ee08 0a10 	vmov	s16, r0
 80072c4:	e7e7      	b.n	8007296 <_dtoa_r+0xb26>
 80072c6:	9b02      	ldr	r3, [sp, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bfc8      	it	gt
 80072cc:	461d      	movgt	r5, r3
 80072ce:	9b01      	ldr	r3, [sp, #4]
 80072d0:	bfd8      	it	le
 80072d2:	2501      	movle	r5, #1
 80072d4:	441d      	add	r5, r3
 80072d6:	f04f 0800 	mov.w	r8, #0
 80072da:	ee18 1a10 	vmov	r1, s16
 80072de:	2201      	movs	r2, #1
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 fb5d 	bl	80079a0 <__lshift>
 80072e6:	4631      	mov	r1, r6
 80072e8:	ee08 0a10 	vmov	s16, r0
 80072ec:	f000 fbc8 	bl	8007a80 <__mcmp>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	dc91      	bgt.n	8007218 <_dtoa_r+0xaa8>
 80072f4:	d102      	bne.n	80072fc <_dtoa_r+0xb8c>
 80072f6:	f01a 0f01 	tst.w	sl, #1
 80072fa:	d18d      	bne.n	8007218 <_dtoa_r+0xaa8>
 80072fc:	462b      	mov	r3, r5
 80072fe:	461d      	mov	r5, r3
 8007300:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007304:	2a30      	cmp	r2, #48	; 0x30
 8007306:	d0fa      	beq.n	80072fe <_dtoa_r+0xb8e>
 8007308:	e6d7      	b.n	80070ba <_dtoa_r+0x94a>
 800730a:	9a01      	ldr	r2, [sp, #4]
 800730c:	429a      	cmp	r2, r3
 800730e:	d184      	bne.n	800721a <_dtoa_r+0xaaa>
 8007310:	9b00      	ldr	r3, [sp, #0]
 8007312:	3301      	adds	r3, #1
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	2331      	movs	r3, #49	; 0x31
 8007318:	7013      	strb	r3, [r2, #0]
 800731a:	e6ce      	b.n	80070ba <_dtoa_r+0x94a>
 800731c:	4b09      	ldr	r3, [pc, #36]	; (8007344 <_dtoa_r+0xbd4>)
 800731e:	f7ff ba95 	b.w	800684c <_dtoa_r+0xdc>
 8007322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007324:	2b00      	cmp	r3, #0
 8007326:	f47f aa6e 	bne.w	8006806 <_dtoa_r+0x96>
 800732a:	4b07      	ldr	r3, [pc, #28]	; (8007348 <_dtoa_r+0xbd8>)
 800732c:	f7ff ba8e 	b.w	800684c <_dtoa_r+0xdc>
 8007330:	9b02      	ldr	r3, [sp, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	dcae      	bgt.n	8007294 <_dtoa_r+0xb24>
 8007336:	9b06      	ldr	r3, [sp, #24]
 8007338:	2b02      	cmp	r3, #2
 800733a:	f73f aea8 	bgt.w	800708e <_dtoa_r+0x91e>
 800733e:	e7a9      	b.n	8007294 <_dtoa_r+0xb24>
 8007340:	0800870f 	.word	0x0800870f
 8007344:	0800866c 	.word	0x0800866c
 8007348:	08008690 	.word	0x08008690

0800734c <std>:
 800734c:	2300      	movs	r3, #0
 800734e:	b510      	push	{r4, lr}
 8007350:	4604      	mov	r4, r0
 8007352:	e9c0 3300 	strd	r3, r3, [r0]
 8007356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800735a:	6083      	str	r3, [r0, #8]
 800735c:	8181      	strh	r1, [r0, #12]
 800735e:	6643      	str	r3, [r0, #100]	; 0x64
 8007360:	81c2      	strh	r2, [r0, #14]
 8007362:	6183      	str	r3, [r0, #24]
 8007364:	4619      	mov	r1, r3
 8007366:	2208      	movs	r2, #8
 8007368:	305c      	adds	r0, #92	; 0x5c
 800736a:	f7fe fbfb 	bl	8005b64 <memset>
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <std+0x38>)
 8007370:	6263      	str	r3, [r4, #36]	; 0x24
 8007372:	4b05      	ldr	r3, [pc, #20]	; (8007388 <std+0x3c>)
 8007374:	62a3      	str	r3, [r4, #40]	; 0x28
 8007376:	4b05      	ldr	r3, [pc, #20]	; (800738c <std+0x40>)
 8007378:	62e3      	str	r3, [r4, #44]	; 0x2c
 800737a:	4b05      	ldr	r3, [pc, #20]	; (8007390 <std+0x44>)
 800737c:	6224      	str	r4, [r4, #32]
 800737e:	6323      	str	r3, [r4, #48]	; 0x30
 8007380:	bd10      	pop	{r4, pc}
 8007382:	bf00      	nop
 8007384:	08007f65 	.word	0x08007f65
 8007388:	08007f87 	.word	0x08007f87
 800738c:	08007fbf 	.word	0x08007fbf
 8007390:	08007fe3 	.word	0x08007fe3

08007394 <_cleanup_r>:
 8007394:	4901      	ldr	r1, [pc, #4]	; (800739c <_cleanup_r+0x8>)
 8007396:	f000 b8af 	b.w	80074f8 <_fwalk_reent>
 800739a:	bf00      	nop
 800739c:	080082f9 	.word	0x080082f9

080073a0 <__sfmoreglue>:
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	2268      	movs	r2, #104	; 0x68
 80073a4:	1e4d      	subs	r5, r1, #1
 80073a6:	4355      	muls	r5, r2
 80073a8:	460e      	mov	r6, r1
 80073aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073ae:	f7fe fc4d 	bl	8005c4c <_malloc_r>
 80073b2:	4604      	mov	r4, r0
 80073b4:	b140      	cbz	r0, 80073c8 <__sfmoreglue+0x28>
 80073b6:	2100      	movs	r1, #0
 80073b8:	e9c0 1600 	strd	r1, r6, [r0]
 80073bc:	300c      	adds	r0, #12
 80073be:	60a0      	str	r0, [r4, #8]
 80073c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073c4:	f7fe fbce 	bl	8005b64 <memset>
 80073c8:	4620      	mov	r0, r4
 80073ca:	bd70      	pop	{r4, r5, r6, pc}

080073cc <__sfp_lock_acquire>:
 80073cc:	4801      	ldr	r0, [pc, #4]	; (80073d4 <__sfp_lock_acquire+0x8>)
 80073ce:	f000 b8b8 	b.w	8007542 <__retarget_lock_acquire_recursive>
 80073d2:	bf00      	nop
 80073d4:	20000349 	.word	0x20000349

080073d8 <__sfp_lock_release>:
 80073d8:	4801      	ldr	r0, [pc, #4]	; (80073e0 <__sfp_lock_release+0x8>)
 80073da:	f000 b8b3 	b.w	8007544 <__retarget_lock_release_recursive>
 80073de:	bf00      	nop
 80073e0:	20000349 	.word	0x20000349

080073e4 <__sinit_lock_acquire>:
 80073e4:	4801      	ldr	r0, [pc, #4]	; (80073ec <__sinit_lock_acquire+0x8>)
 80073e6:	f000 b8ac 	b.w	8007542 <__retarget_lock_acquire_recursive>
 80073ea:	bf00      	nop
 80073ec:	2000034a 	.word	0x2000034a

080073f0 <__sinit_lock_release>:
 80073f0:	4801      	ldr	r0, [pc, #4]	; (80073f8 <__sinit_lock_release+0x8>)
 80073f2:	f000 b8a7 	b.w	8007544 <__retarget_lock_release_recursive>
 80073f6:	bf00      	nop
 80073f8:	2000034a 	.word	0x2000034a

080073fc <__sinit>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	4604      	mov	r4, r0
 8007400:	f7ff fff0 	bl	80073e4 <__sinit_lock_acquire>
 8007404:	69a3      	ldr	r3, [r4, #24]
 8007406:	b11b      	cbz	r3, 8007410 <__sinit+0x14>
 8007408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800740c:	f7ff bff0 	b.w	80073f0 <__sinit_lock_release>
 8007410:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007414:	6523      	str	r3, [r4, #80]	; 0x50
 8007416:	4b13      	ldr	r3, [pc, #76]	; (8007464 <__sinit+0x68>)
 8007418:	4a13      	ldr	r2, [pc, #76]	; (8007468 <__sinit+0x6c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	62a2      	str	r2, [r4, #40]	; 0x28
 800741e:	42a3      	cmp	r3, r4
 8007420:	bf04      	itt	eq
 8007422:	2301      	moveq	r3, #1
 8007424:	61a3      	streq	r3, [r4, #24]
 8007426:	4620      	mov	r0, r4
 8007428:	f000 f820 	bl	800746c <__sfp>
 800742c:	6060      	str	r0, [r4, #4]
 800742e:	4620      	mov	r0, r4
 8007430:	f000 f81c 	bl	800746c <__sfp>
 8007434:	60a0      	str	r0, [r4, #8]
 8007436:	4620      	mov	r0, r4
 8007438:	f000 f818 	bl	800746c <__sfp>
 800743c:	2200      	movs	r2, #0
 800743e:	60e0      	str	r0, [r4, #12]
 8007440:	2104      	movs	r1, #4
 8007442:	6860      	ldr	r0, [r4, #4]
 8007444:	f7ff ff82 	bl	800734c <std>
 8007448:	68a0      	ldr	r0, [r4, #8]
 800744a:	2201      	movs	r2, #1
 800744c:	2109      	movs	r1, #9
 800744e:	f7ff ff7d 	bl	800734c <std>
 8007452:	68e0      	ldr	r0, [r4, #12]
 8007454:	2202      	movs	r2, #2
 8007456:	2112      	movs	r1, #18
 8007458:	f7ff ff78 	bl	800734c <std>
 800745c:	2301      	movs	r3, #1
 800745e:	61a3      	str	r3, [r4, #24]
 8007460:	e7d2      	b.n	8007408 <__sinit+0xc>
 8007462:	bf00      	nop
 8007464:	08008658 	.word	0x08008658
 8007468:	08007395 	.word	0x08007395

0800746c <__sfp>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	4607      	mov	r7, r0
 8007470:	f7ff ffac 	bl	80073cc <__sfp_lock_acquire>
 8007474:	4b1e      	ldr	r3, [pc, #120]	; (80074f0 <__sfp+0x84>)
 8007476:	681e      	ldr	r6, [r3, #0]
 8007478:	69b3      	ldr	r3, [r6, #24]
 800747a:	b913      	cbnz	r3, 8007482 <__sfp+0x16>
 800747c:	4630      	mov	r0, r6
 800747e:	f7ff ffbd 	bl	80073fc <__sinit>
 8007482:	3648      	adds	r6, #72	; 0x48
 8007484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007488:	3b01      	subs	r3, #1
 800748a:	d503      	bpl.n	8007494 <__sfp+0x28>
 800748c:	6833      	ldr	r3, [r6, #0]
 800748e:	b30b      	cbz	r3, 80074d4 <__sfp+0x68>
 8007490:	6836      	ldr	r6, [r6, #0]
 8007492:	e7f7      	b.n	8007484 <__sfp+0x18>
 8007494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007498:	b9d5      	cbnz	r5, 80074d0 <__sfp+0x64>
 800749a:	4b16      	ldr	r3, [pc, #88]	; (80074f4 <__sfp+0x88>)
 800749c:	60e3      	str	r3, [r4, #12]
 800749e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074a2:	6665      	str	r5, [r4, #100]	; 0x64
 80074a4:	f000 f84c 	bl	8007540 <__retarget_lock_init_recursive>
 80074a8:	f7ff ff96 	bl	80073d8 <__sfp_lock_release>
 80074ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074b4:	6025      	str	r5, [r4, #0]
 80074b6:	61a5      	str	r5, [r4, #24]
 80074b8:	2208      	movs	r2, #8
 80074ba:	4629      	mov	r1, r5
 80074bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074c0:	f7fe fb50 	bl	8005b64 <memset>
 80074c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074cc:	4620      	mov	r0, r4
 80074ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d0:	3468      	adds	r4, #104	; 0x68
 80074d2:	e7d9      	b.n	8007488 <__sfp+0x1c>
 80074d4:	2104      	movs	r1, #4
 80074d6:	4638      	mov	r0, r7
 80074d8:	f7ff ff62 	bl	80073a0 <__sfmoreglue>
 80074dc:	4604      	mov	r4, r0
 80074de:	6030      	str	r0, [r6, #0]
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d1d5      	bne.n	8007490 <__sfp+0x24>
 80074e4:	f7ff ff78 	bl	80073d8 <__sfp_lock_release>
 80074e8:	230c      	movs	r3, #12
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	e7ee      	b.n	80074cc <__sfp+0x60>
 80074ee:	bf00      	nop
 80074f0:	08008658 	.word	0x08008658
 80074f4:	ffff0001 	.word	0xffff0001

080074f8 <_fwalk_reent>:
 80074f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074fc:	4606      	mov	r6, r0
 80074fe:	4688      	mov	r8, r1
 8007500:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007504:	2700      	movs	r7, #0
 8007506:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800750a:	f1b9 0901 	subs.w	r9, r9, #1
 800750e:	d505      	bpl.n	800751c <_fwalk_reent+0x24>
 8007510:	6824      	ldr	r4, [r4, #0]
 8007512:	2c00      	cmp	r4, #0
 8007514:	d1f7      	bne.n	8007506 <_fwalk_reent+0xe>
 8007516:	4638      	mov	r0, r7
 8007518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751c:	89ab      	ldrh	r3, [r5, #12]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d907      	bls.n	8007532 <_fwalk_reent+0x3a>
 8007522:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007526:	3301      	adds	r3, #1
 8007528:	d003      	beq.n	8007532 <_fwalk_reent+0x3a>
 800752a:	4629      	mov	r1, r5
 800752c:	4630      	mov	r0, r6
 800752e:	47c0      	blx	r8
 8007530:	4307      	orrs	r7, r0
 8007532:	3568      	adds	r5, #104	; 0x68
 8007534:	e7e9      	b.n	800750a <_fwalk_reent+0x12>
	...

08007538 <_localeconv_r>:
 8007538:	4800      	ldr	r0, [pc, #0]	; (800753c <_localeconv_r+0x4>)
 800753a:	4770      	bx	lr
 800753c:	20000168 	.word	0x20000168

08007540 <__retarget_lock_init_recursive>:
 8007540:	4770      	bx	lr

08007542 <__retarget_lock_acquire_recursive>:
 8007542:	4770      	bx	lr

08007544 <__retarget_lock_release_recursive>:
 8007544:	4770      	bx	lr

08007546 <memcpy>:
 8007546:	440a      	add	r2, r1
 8007548:	4291      	cmp	r1, r2
 800754a:	f100 33ff 	add.w	r3, r0, #4294967295
 800754e:	d100      	bne.n	8007552 <memcpy+0xc>
 8007550:	4770      	bx	lr
 8007552:	b510      	push	{r4, lr}
 8007554:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007558:	f803 4f01 	strb.w	r4, [r3, #1]!
 800755c:	4291      	cmp	r1, r2
 800755e:	d1f9      	bne.n	8007554 <memcpy+0xe>
 8007560:	bd10      	pop	{r4, pc}
	...

08007564 <__malloc_lock>:
 8007564:	4801      	ldr	r0, [pc, #4]	; (800756c <__malloc_lock+0x8>)
 8007566:	f7ff bfec 	b.w	8007542 <__retarget_lock_acquire_recursive>
 800756a:	bf00      	nop
 800756c:	20000348 	.word	0x20000348

08007570 <__malloc_unlock>:
 8007570:	4801      	ldr	r0, [pc, #4]	; (8007578 <__malloc_unlock+0x8>)
 8007572:	f7ff bfe7 	b.w	8007544 <__retarget_lock_release_recursive>
 8007576:	bf00      	nop
 8007578:	20000348 	.word	0x20000348

0800757c <_Balloc>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007580:	4604      	mov	r4, r0
 8007582:	460d      	mov	r5, r1
 8007584:	b976      	cbnz	r6, 80075a4 <_Balloc+0x28>
 8007586:	2010      	movs	r0, #16
 8007588:	f7fe fae4 	bl	8005b54 <malloc>
 800758c:	4602      	mov	r2, r0
 800758e:	6260      	str	r0, [r4, #36]	; 0x24
 8007590:	b920      	cbnz	r0, 800759c <_Balloc+0x20>
 8007592:	4b18      	ldr	r3, [pc, #96]	; (80075f4 <_Balloc+0x78>)
 8007594:	4818      	ldr	r0, [pc, #96]	; (80075f8 <_Balloc+0x7c>)
 8007596:	2166      	movs	r1, #102	; 0x66
 8007598:	f000 fdfa 	bl	8008190 <__assert_func>
 800759c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075a0:	6006      	str	r6, [r0, #0]
 80075a2:	60c6      	str	r6, [r0, #12]
 80075a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075a6:	68f3      	ldr	r3, [r6, #12]
 80075a8:	b183      	cbz	r3, 80075cc <_Balloc+0x50>
 80075aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075b2:	b9b8      	cbnz	r0, 80075e4 <_Balloc+0x68>
 80075b4:	2101      	movs	r1, #1
 80075b6:	fa01 f605 	lsl.w	r6, r1, r5
 80075ba:	1d72      	adds	r2, r6, #5
 80075bc:	0092      	lsls	r2, r2, #2
 80075be:	4620      	mov	r0, r4
 80075c0:	f000 fb60 	bl	8007c84 <_calloc_r>
 80075c4:	b160      	cbz	r0, 80075e0 <_Balloc+0x64>
 80075c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075ca:	e00e      	b.n	80075ea <_Balloc+0x6e>
 80075cc:	2221      	movs	r2, #33	; 0x21
 80075ce:	2104      	movs	r1, #4
 80075d0:	4620      	mov	r0, r4
 80075d2:	f000 fb57 	bl	8007c84 <_calloc_r>
 80075d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d8:	60f0      	str	r0, [r6, #12]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e4      	bne.n	80075aa <_Balloc+0x2e>
 80075e0:	2000      	movs	r0, #0
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	6802      	ldr	r2, [r0, #0]
 80075e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075ea:	2300      	movs	r3, #0
 80075ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075f0:	e7f7      	b.n	80075e2 <_Balloc+0x66>
 80075f2:	bf00      	nop
 80075f4:	0800869d 	.word	0x0800869d
 80075f8:	08008780 	.word	0x08008780

080075fc <_Bfree>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007600:	4605      	mov	r5, r0
 8007602:	460c      	mov	r4, r1
 8007604:	b976      	cbnz	r6, 8007624 <_Bfree+0x28>
 8007606:	2010      	movs	r0, #16
 8007608:	f7fe faa4 	bl	8005b54 <malloc>
 800760c:	4602      	mov	r2, r0
 800760e:	6268      	str	r0, [r5, #36]	; 0x24
 8007610:	b920      	cbnz	r0, 800761c <_Bfree+0x20>
 8007612:	4b09      	ldr	r3, [pc, #36]	; (8007638 <_Bfree+0x3c>)
 8007614:	4809      	ldr	r0, [pc, #36]	; (800763c <_Bfree+0x40>)
 8007616:	218a      	movs	r1, #138	; 0x8a
 8007618:	f000 fdba 	bl	8008190 <__assert_func>
 800761c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007620:	6006      	str	r6, [r0, #0]
 8007622:	60c6      	str	r6, [r0, #12]
 8007624:	b13c      	cbz	r4, 8007636 <_Bfree+0x3a>
 8007626:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007628:	6862      	ldr	r2, [r4, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007630:	6021      	str	r1, [r4, #0]
 8007632:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007636:	bd70      	pop	{r4, r5, r6, pc}
 8007638:	0800869d 	.word	0x0800869d
 800763c:	08008780 	.word	0x08008780

08007640 <__multadd>:
 8007640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007644:	690d      	ldr	r5, [r1, #16]
 8007646:	4607      	mov	r7, r0
 8007648:	460c      	mov	r4, r1
 800764a:	461e      	mov	r6, r3
 800764c:	f101 0c14 	add.w	ip, r1, #20
 8007650:	2000      	movs	r0, #0
 8007652:	f8dc 3000 	ldr.w	r3, [ip]
 8007656:	b299      	uxth	r1, r3
 8007658:	fb02 6101 	mla	r1, r2, r1, r6
 800765c:	0c1e      	lsrs	r6, r3, #16
 800765e:	0c0b      	lsrs	r3, r1, #16
 8007660:	fb02 3306 	mla	r3, r2, r6, r3
 8007664:	b289      	uxth	r1, r1
 8007666:	3001      	adds	r0, #1
 8007668:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800766c:	4285      	cmp	r5, r0
 800766e:	f84c 1b04 	str.w	r1, [ip], #4
 8007672:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007676:	dcec      	bgt.n	8007652 <__multadd+0x12>
 8007678:	b30e      	cbz	r6, 80076be <__multadd+0x7e>
 800767a:	68a3      	ldr	r3, [r4, #8]
 800767c:	42ab      	cmp	r3, r5
 800767e:	dc19      	bgt.n	80076b4 <__multadd+0x74>
 8007680:	6861      	ldr	r1, [r4, #4]
 8007682:	4638      	mov	r0, r7
 8007684:	3101      	adds	r1, #1
 8007686:	f7ff ff79 	bl	800757c <_Balloc>
 800768a:	4680      	mov	r8, r0
 800768c:	b928      	cbnz	r0, 800769a <__multadd+0x5a>
 800768e:	4602      	mov	r2, r0
 8007690:	4b0c      	ldr	r3, [pc, #48]	; (80076c4 <__multadd+0x84>)
 8007692:	480d      	ldr	r0, [pc, #52]	; (80076c8 <__multadd+0x88>)
 8007694:	21b5      	movs	r1, #181	; 0xb5
 8007696:	f000 fd7b 	bl	8008190 <__assert_func>
 800769a:	6922      	ldr	r2, [r4, #16]
 800769c:	3202      	adds	r2, #2
 800769e:	f104 010c 	add.w	r1, r4, #12
 80076a2:	0092      	lsls	r2, r2, #2
 80076a4:	300c      	adds	r0, #12
 80076a6:	f7ff ff4e 	bl	8007546 <memcpy>
 80076aa:	4621      	mov	r1, r4
 80076ac:	4638      	mov	r0, r7
 80076ae:	f7ff ffa5 	bl	80075fc <_Bfree>
 80076b2:	4644      	mov	r4, r8
 80076b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076b8:	3501      	adds	r5, #1
 80076ba:	615e      	str	r6, [r3, #20]
 80076bc:	6125      	str	r5, [r4, #16]
 80076be:	4620      	mov	r0, r4
 80076c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c4:	0800870f 	.word	0x0800870f
 80076c8:	08008780 	.word	0x08008780

080076cc <__hi0bits>:
 80076cc:	0c03      	lsrs	r3, r0, #16
 80076ce:	041b      	lsls	r3, r3, #16
 80076d0:	b9d3      	cbnz	r3, 8007708 <__hi0bits+0x3c>
 80076d2:	0400      	lsls	r0, r0, #16
 80076d4:	2310      	movs	r3, #16
 80076d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076da:	bf04      	itt	eq
 80076dc:	0200      	lsleq	r0, r0, #8
 80076de:	3308      	addeq	r3, #8
 80076e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076e4:	bf04      	itt	eq
 80076e6:	0100      	lsleq	r0, r0, #4
 80076e8:	3304      	addeq	r3, #4
 80076ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076ee:	bf04      	itt	eq
 80076f0:	0080      	lsleq	r0, r0, #2
 80076f2:	3302      	addeq	r3, #2
 80076f4:	2800      	cmp	r0, #0
 80076f6:	db05      	blt.n	8007704 <__hi0bits+0x38>
 80076f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076fc:	f103 0301 	add.w	r3, r3, #1
 8007700:	bf08      	it	eq
 8007702:	2320      	moveq	r3, #32
 8007704:	4618      	mov	r0, r3
 8007706:	4770      	bx	lr
 8007708:	2300      	movs	r3, #0
 800770a:	e7e4      	b.n	80076d6 <__hi0bits+0xa>

0800770c <__lo0bits>:
 800770c:	6803      	ldr	r3, [r0, #0]
 800770e:	f013 0207 	ands.w	r2, r3, #7
 8007712:	4601      	mov	r1, r0
 8007714:	d00b      	beq.n	800772e <__lo0bits+0x22>
 8007716:	07da      	lsls	r2, r3, #31
 8007718:	d423      	bmi.n	8007762 <__lo0bits+0x56>
 800771a:	0798      	lsls	r0, r3, #30
 800771c:	bf49      	itett	mi
 800771e:	085b      	lsrmi	r3, r3, #1
 8007720:	089b      	lsrpl	r3, r3, #2
 8007722:	2001      	movmi	r0, #1
 8007724:	600b      	strmi	r3, [r1, #0]
 8007726:	bf5c      	itt	pl
 8007728:	600b      	strpl	r3, [r1, #0]
 800772a:	2002      	movpl	r0, #2
 800772c:	4770      	bx	lr
 800772e:	b298      	uxth	r0, r3
 8007730:	b9a8      	cbnz	r0, 800775e <__lo0bits+0x52>
 8007732:	0c1b      	lsrs	r3, r3, #16
 8007734:	2010      	movs	r0, #16
 8007736:	b2da      	uxtb	r2, r3
 8007738:	b90a      	cbnz	r2, 800773e <__lo0bits+0x32>
 800773a:	3008      	adds	r0, #8
 800773c:	0a1b      	lsrs	r3, r3, #8
 800773e:	071a      	lsls	r2, r3, #28
 8007740:	bf04      	itt	eq
 8007742:	091b      	lsreq	r3, r3, #4
 8007744:	3004      	addeq	r0, #4
 8007746:	079a      	lsls	r2, r3, #30
 8007748:	bf04      	itt	eq
 800774a:	089b      	lsreq	r3, r3, #2
 800774c:	3002      	addeq	r0, #2
 800774e:	07da      	lsls	r2, r3, #31
 8007750:	d403      	bmi.n	800775a <__lo0bits+0x4e>
 8007752:	085b      	lsrs	r3, r3, #1
 8007754:	f100 0001 	add.w	r0, r0, #1
 8007758:	d005      	beq.n	8007766 <__lo0bits+0x5a>
 800775a:	600b      	str	r3, [r1, #0]
 800775c:	4770      	bx	lr
 800775e:	4610      	mov	r0, r2
 8007760:	e7e9      	b.n	8007736 <__lo0bits+0x2a>
 8007762:	2000      	movs	r0, #0
 8007764:	4770      	bx	lr
 8007766:	2020      	movs	r0, #32
 8007768:	4770      	bx	lr
	...

0800776c <__i2b>:
 800776c:	b510      	push	{r4, lr}
 800776e:	460c      	mov	r4, r1
 8007770:	2101      	movs	r1, #1
 8007772:	f7ff ff03 	bl	800757c <_Balloc>
 8007776:	4602      	mov	r2, r0
 8007778:	b928      	cbnz	r0, 8007786 <__i2b+0x1a>
 800777a:	4b05      	ldr	r3, [pc, #20]	; (8007790 <__i2b+0x24>)
 800777c:	4805      	ldr	r0, [pc, #20]	; (8007794 <__i2b+0x28>)
 800777e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007782:	f000 fd05 	bl	8008190 <__assert_func>
 8007786:	2301      	movs	r3, #1
 8007788:	6144      	str	r4, [r0, #20]
 800778a:	6103      	str	r3, [r0, #16]
 800778c:	bd10      	pop	{r4, pc}
 800778e:	bf00      	nop
 8007790:	0800870f 	.word	0x0800870f
 8007794:	08008780 	.word	0x08008780

08007798 <__multiply>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	4691      	mov	r9, r2
 800779e:	690a      	ldr	r2, [r1, #16]
 80077a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	bfb8      	it	lt
 80077a8:	460b      	movlt	r3, r1
 80077aa:	460c      	mov	r4, r1
 80077ac:	bfbc      	itt	lt
 80077ae:	464c      	movlt	r4, r9
 80077b0:	4699      	movlt	r9, r3
 80077b2:	6927      	ldr	r7, [r4, #16]
 80077b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077b8:	68a3      	ldr	r3, [r4, #8]
 80077ba:	6861      	ldr	r1, [r4, #4]
 80077bc:	eb07 060a 	add.w	r6, r7, sl
 80077c0:	42b3      	cmp	r3, r6
 80077c2:	b085      	sub	sp, #20
 80077c4:	bfb8      	it	lt
 80077c6:	3101      	addlt	r1, #1
 80077c8:	f7ff fed8 	bl	800757c <_Balloc>
 80077cc:	b930      	cbnz	r0, 80077dc <__multiply+0x44>
 80077ce:	4602      	mov	r2, r0
 80077d0:	4b44      	ldr	r3, [pc, #272]	; (80078e4 <__multiply+0x14c>)
 80077d2:	4845      	ldr	r0, [pc, #276]	; (80078e8 <__multiply+0x150>)
 80077d4:	f240 115d 	movw	r1, #349	; 0x15d
 80077d8:	f000 fcda 	bl	8008190 <__assert_func>
 80077dc:	f100 0514 	add.w	r5, r0, #20
 80077e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077e4:	462b      	mov	r3, r5
 80077e6:	2200      	movs	r2, #0
 80077e8:	4543      	cmp	r3, r8
 80077ea:	d321      	bcc.n	8007830 <__multiply+0x98>
 80077ec:	f104 0314 	add.w	r3, r4, #20
 80077f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077f4:	f109 0314 	add.w	r3, r9, #20
 80077f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077fc:	9202      	str	r2, [sp, #8]
 80077fe:	1b3a      	subs	r2, r7, r4
 8007800:	3a15      	subs	r2, #21
 8007802:	f022 0203 	bic.w	r2, r2, #3
 8007806:	3204      	adds	r2, #4
 8007808:	f104 0115 	add.w	r1, r4, #21
 800780c:	428f      	cmp	r7, r1
 800780e:	bf38      	it	cc
 8007810:	2204      	movcc	r2, #4
 8007812:	9201      	str	r2, [sp, #4]
 8007814:	9a02      	ldr	r2, [sp, #8]
 8007816:	9303      	str	r3, [sp, #12]
 8007818:	429a      	cmp	r2, r3
 800781a:	d80c      	bhi.n	8007836 <__multiply+0x9e>
 800781c:	2e00      	cmp	r6, #0
 800781e:	dd03      	ble.n	8007828 <__multiply+0x90>
 8007820:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007824:	2b00      	cmp	r3, #0
 8007826:	d05a      	beq.n	80078de <__multiply+0x146>
 8007828:	6106      	str	r6, [r0, #16]
 800782a:	b005      	add	sp, #20
 800782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007830:	f843 2b04 	str.w	r2, [r3], #4
 8007834:	e7d8      	b.n	80077e8 <__multiply+0x50>
 8007836:	f8b3 a000 	ldrh.w	sl, [r3]
 800783a:	f1ba 0f00 	cmp.w	sl, #0
 800783e:	d024      	beq.n	800788a <__multiply+0xf2>
 8007840:	f104 0e14 	add.w	lr, r4, #20
 8007844:	46a9      	mov	r9, r5
 8007846:	f04f 0c00 	mov.w	ip, #0
 800784a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800784e:	f8d9 1000 	ldr.w	r1, [r9]
 8007852:	fa1f fb82 	uxth.w	fp, r2
 8007856:	b289      	uxth	r1, r1
 8007858:	fb0a 110b 	mla	r1, sl, fp, r1
 800785c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007860:	f8d9 2000 	ldr.w	r2, [r9]
 8007864:	4461      	add	r1, ip
 8007866:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800786a:	fb0a c20b 	mla	r2, sl, fp, ip
 800786e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007872:	b289      	uxth	r1, r1
 8007874:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007878:	4577      	cmp	r7, lr
 800787a:	f849 1b04 	str.w	r1, [r9], #4
 800787e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007882:	d8e2      	bhi.n	800784a <__multiply+0xb2>
 8007884:	9a01      	ldr	r2, [sp, #4]
 8007886:	f845 c002 	str.w	ip, [r5, r2]
 800788a:	9a03      	ldr	r2, [sp, #12]
 800788c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007890:	3304      	adds	r3, #4
 8007892:	f1b9 0f00 	cmp.w	r9, #0
 8007896:	d020      	beq.n	80078da <__multiply+0x142>
 8007898:	6829      	ldr	r1, [r5, #0]
 800789a:	f104 0c14 	add.w	ip, r4, #20
 800789e:	46ae      	mov	lr, r5
 80078a0:	f04f 0a00 	mov.w	sl, #0
 80078a4:	f8bc b000 	ldrh.w	fp, [ip]
 80078a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078ac:	fb09 220b 	mla	r2, r9, fp, r2
 80078b0:	4492      	add	sl, r2
 80078b2:	b289      	uxth	r1, r1
 80078b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80078b8:	f84e 1b04 	str.w	r1, [lr], #4
 80078bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80078c0:	f8be 1000 	ldrh.w	r1, [lr]
 80078c4:	0c12      	lsrs	r2, r2, #16
 80078c6:	fb09 1102 	mla	r1, r9, r2, r1
 80078ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80078ce:	4567      	cmp	r7, ip
 80078d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078d4:	d8e6      	bhi.n	80078a4 <__multiply+0x10c>
 80078d6:	9a01      	ldr	r2, [sp, #4]
 80078d8:	50a9      	str	r1, [r5, r2]
 80078da:	3504      	adds	r5, #4
 80078dc:	e79a      	b.n	8007814 <__multiply+0x7c>
 80078de:	3e01      	subs	r6, #1
 80078e0:	e79c      	b.n	800781c <__multiply+0x84>
 80078e2:	bf00      	nop
 80078e4:	0800870f 	.word	0x0800870f
 80078e8:	08008780 	.word	0x08008780

080078ec <__pow5mult>:
 80078ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f0:	4615      	mov	r5, r2
 80078f2:	f012 0203 	ands.w	r2, r2, #3
 80078f6:	4606      	mov	r6, r0
 80078f8:	460f      	mov	r7, r1
 80078fa:	d007      	beq.n	800790c <__pow5mult+0x20>
 80078fc:	4c25      	ldr	r4, [pc, #148]	; (8007994 <__pow5mult+0xa8>)
 80078fe:	3a01      	subs	r2, #1
 8007900:	2300      	movs	r3, #0
 8007902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007906:	f7ff fe9b 	bl	8007640 <__multadd>
 800790a:	4607      	mov	r7, r0
 800790c:	10ad      	asrs	r5, r5, #2
 800790e:	d03d      	beq.n	800798c <__pow5mult+0xa0>
 8007910:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007912:	b97c      	cbnz	r4, 8007934 <__pow5mult+0x48>
 8007914:	2010      	movs	r0, #16
 8007916:	f7fe f91d 	bl	8005b54 <malloc>
 800791a:	4602      	mov	r2, r0
 800791c:	6270      	str	r0, [r6, #36]	; 0x24
 800791e:	b928      	cbnz	r0, 800792c <__pow5mult+0x40>
 8007920:	4b1d      	ldr	r3, [pc, #116]	; (8007998 <__pow5mult+0xac>)
 8007922:	481e      	ldr	r0, [pc, #120]	; (800799c <__pow5mult+0xb0>)
 8007924:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007928:	f000 fc32 	bl	8008190 <__assert_func>
 800792c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007930:	6004      	str	r4, [r0, #0]
 8007932:	60c4      	str	r4, [r0, #12]
 8007934:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800793c:	b94c      	cbnz	r4, 8007952 <__pow5mult+0x66>
 800793e:	f240 2171 	movw	r1, #625	; 0x271
 8007942:	4630      	mov	r0, r6
 8007944:	f7ff ff12 	bl	800776c <__i2b>
 8007948:	2300      	movs	r3, #0
 800794a:	f8c8 0008 	str.w	r0, [r8, #8]
 800794e:	4604      	mov	r4, r0
 8007950:	6003      	str	r3, [r0, #0]
 8007952:	f04f 0900 	mov.w	r9, #0
 8007956:	07eb      	lsls	r3, r5, #31
 8007958:	d50a      	bpl.n	8007970 <__pow5mult+0x84>
 800795a:	4639      	mov	r1, r7
 800795c:	4622      	mov	r2, r4
 800795e:	4630      	mov	r0, r6
 8007960:	f7ff ff1a 	bl	8007798 <__multiply>
 8007964:	4639      	mov	r1, r7
 8007966:	4680      	mov	r8, r0
 8007968:	4630      	mov	r0, r6
 800796a:	f7ff fe47 	bl	80075fc <_Bfree>
 800796e:	4647      	mov	r7, r8
 8007970:	106d      	asrs	r5, r5, #1
 8007972:	d00b      	beq.n	800798c <__pow5mult+0xa0>
 8007974:	6820      	ldr	r0, [r4, #0]
 8007976:	b938      	cbnz	r0, 8007988 <__pow5mult+0x9c>
 8007978:	4622      	mov	r2, r4
 800797a:	4621      	mov	r1, r4
 800797c:	4630      	mov	r0, r6
 800797e:	f7ff ff0b 	bl	8007798 <__multiply>
 8007982:	6020      	str	r0, [r4, #0]
 8007984:	f8c0 9000 	str.w	r9, [r0]
 8007988:	4604      	mov	r4, r0
 800798a:	e7e4      	b.n	8007956 <__pow5mult+0x6a>
 800798c:	4638      	mov	r0, r7
 800798e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007992:	bf00      	nop
 8007994:	080088d0 	.word	0x080088d0
 8007998:	0800869d 	.word	0x0800869d
 800799c:	08008780 	.word	0x08008780

080079a0 <__lshift>:
 80079a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a4:	460c      	mov	r4, r1
 80079a6:	6849      	ldr	r1, [r1, #4]
 80079a8:	6923      	ldr	r3, [r4, #16]
 80079aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	4607      	mov	r7, r0
 80079b2:	4691      	mov	r9, r2
 80079b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079b8:	f108 0601 	add.w	r6, r8, #1
 80079bc:	42b3      	cmp	r3, r6
 80079be:	db0b      	blt.n	80079d8 <__lshift+0x38>
 80079c0:	4638      	mov	r0, r7
 80079c2:	f7ff fddb 	bl	800757c <_Balloc>
 80079c6:	4605      	mov	r5, r0
 80079c8:	b948      	cbnz	r0, 80079de <__lshift+0x3e>
 80079ca:	4602      	mov	r2, r0
 80079cc:	4b2a      	ldr	r3, [pc, #168]	; (8007a78 <__lshift+0xd8>)
 80079ce:	482b      	ldr	r0, [pc, #172]	; (8007a7c <__lshift+0xdc>)
 80079d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079d4:	f000 fbdc 	bl	8008190 <__assert_func>
 80079d8:	3101      	adds	r1, #1
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	e7ee      	b.n	80079bc <__lshift+0x1c>
 80079de:	2300      	movs	r3, #0
 80079e0:	f100 0114 	add.w	r1, r0, #20
 80079e4:	f100 0210 	add.w	r2, r0, #16
 80079e8:	4618      	mov	r0, r3
 80079ea:	4553      	cmp	r3, sl
 80079ec:	db37      	blt.n	8007a5e <__lshift+0xbe>
 80079ee:	6920      	ldr	r0, [r4, #16]
 80079f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079f4:	f104 0314 	add.w	r3, r4, #20
 80079f8:	f019 091f 	ands.w	r9, r9, #31
 80079fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007a04:	d02f      	beq.n	8007a66 <__lshift+0xc6>
 8007a06:	f1c9 0e20 	rsb	lr, r9, #32
 8007a0a:	468a      	mov	sl, r1
 8007a0c:	f04f 0c00 	mov.w	ip, #0
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	fa02 f209 	lsl.w	r2, r2, r9
 8007a16:	ea42 020c 	orr.w	r2, r2, ip
 8007a1a:	f84a 2b04 	str.w	r2, [sl], #4
 8007a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a22:	4298      	cmp	r0, r3
 8007a24:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007a28:	d8f2      	bhi.n	8007a10 <__lshift+0x70>
 8007a2a:	1b03      	subs	r3, r0, r4
 8007a2c:	3b15      	subs	r3, #21
 8007a2e:	f023 0303 	bic.w	r3, r3, #3
 8007a32:	3304      	adds	r3, #4
 8007a34:	f104 0215 	add.w	r2, r4, #21
 8007a38:	4290      	cmp	r0, r2
 8007a3a:	bf38      	it	cc
 8007a3c:	2304      	movcc	r3, #4
 8007a3e:	f841 c003 	str.w	ip, [r1, r3]
 8007a42:	f1bc 0f00 	cmp.w	ip, #0
 8007a46:	d001      	beq.n	8007a4c <__lshift+0xac>
 8007a48:	f108 0602 	add.w	r6, r8, #2
 8007a4c:	3e01      	subs	r6, #1
 8007a4e:	4638      	mov	r0, r7
 8007a50:	612e      	str	r6, [r5, #16]
 8007a52:	4621      	mov	r1, r4
 8007a54:	f7ff fdd2 	bl	80075fc <_Bfree>
 8007a58:	4628      	mov	r0, r5
 8007a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a62:	3301      	adds	r3, #1
 8007a64:	e7c1      	b.n	80079ea <__lshift+0x4a>
 8007a66:	3904      	subs	r1, #4
 8007a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a70:	4298      	cmp	r0, r3
 8007a72:	d8f9      	bhi.n	8007a68 <__lshift+0xc8>
 8007a74:	e7ea      	b.n	8007a4c <__lshift+0xac>
 8007a76:	bf00      	nop
 8007a78:	0800870f 	.word	0x0800870f
 8007a7c:	08008780 	.word	0x08008780

08007a80 <__mcmp>:
 8007a80:	b530      	push	{r4, r5, lr}
 8007a82:	6902      	ldr	r2, [r0, #16]
 8007a84:	690c      	ldr	r4, [r1, #16]
 8007a86:	1b12      	subs	r2, r2, r4
 8007a88:	d10e      	bne.n	8007aa8 <__mcmp+0x28>
 8007a8a:	f100 0314 	add.w	r3, r0, #20
 8007a8e:	3114      	adds	r1, #20
 8007a90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007aa0:	42a5      	cmp	r5, r4
 8007aa2:	d003      	beq.n	8007aac <__mcmp+0x2c>
 8007aa4:	d305      	bcc.n	8007ab2 <__mcmp+0x32>
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	bd30      	pop	{r4, r5, pc}
 8007aac:	4283      	cmp	r3, r0
 8007aae:	d3f3      	bcc.n	8007a98 <__mcmp+0x18>
 8007ab0:	e7fa      	b.n	8007aa8 <__mcmp+0x28>
 8007ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab6:	e7f7      	b.n	8007aa8 <__mcmp+0x28>

08007ab8 <__mdiff>:
 8007ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	460c      	mov	r4, r1
 8007abe:	4606      	mov	r6, r0
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	4690      	mov	r8, r2
 8007ac6:	f7ff ffdb 	bl	8007a80 <__mcmp>
 8007aca:	1e05      	subs	r5, r0, #0
 8007acc:	d110      	bne.n	8007af0 <__mdiff+0x38>
 8007ace:	4629      	mov	r1, r5
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f7ff fd53 	bl	800757c <_Balloc>
 8007ad6:	b930      	cbnz	r0, 8007ae6 <__mdiff+0x2e>
 8007ad8:	4b3a      	ldr	r3, [pc, #232]	; (8007bc4 <__mdiff+0x10c>)
 8007ada:	4602      	mov	r2, r0
 8007adc:	f240 2132 	movw	r1, #562	; 0x232
 8007ae0:	4839      	ldr	r0, [pc, #228]	; (8007bc8 <__mdiff+0x110>)
 8007ae2:	f000 fb55 	bl	8008190 <__assert_func>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af0:	bfa4      	itt	ge
 8007af2:	4643      	movge	r3, r8
 8007af4:	46a0      	movge	r8, r4
 8007af6:	4630      	mov	r0, r6
 8007af8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007afc:	bfa6      	itte	ge
 8007afe:	461c      	movge	r4, r3
 8007b00:	2500      	movge	r5, #0
 8007b02:	2501      	movlt	r5, #1
 8007b04:	f7ff fd3a 	bl	800757c <_Balloc>
 8007b08:	b920      	cbnz	r0, 8007b14 <__mdiff+0x5c>
 8007b0a:	4b2e      	ldr	r3, [pc, #184]	; (8007bc4 <__mdiff+0x10c>)
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b12:	e7e5      	b.n	8007ae0 <__mdiff+0x28>
 8007b14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b18:	6926      	ldr	r6, [r4, #16]
 8007b1a:	60c5      	str	r5, [r0, #12]
 8007b1c:	f104 0914 	add.w	r9, r4, #20
 8007b20:	f108 0514 	add.w	r5, r8, #20
 8007b24:	f100 0e14 	add.w	lr, r0, #20
 8007b28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b30:	f108 0210 	add.w	r2, r8, #16
 8007b34:	46f2      	mov	sl, lr
 8007b36:	2100      	movs	r1, #0
 8007b38:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b40:	fa1f f883 	uxth.w	r8, r3
 8007b44:	fa11 f18b 	uxtah	r1, r1, fp
 8007b48:	0c1b      	lsrs	r3, r3, #16
 8007b4a:	eba1 0808 	sub.w	r8, r1, r8
 8007b4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b56:	fa1f f888 	uxth.w	r8, r8
 8007b5a:	1419      	asrs	r1, r3, #16
 8007b5c:	454e      	cmp	r6, r9
 8007b5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b62:	f84a 3b04 	str.w	r3, [sl], #4
 8007b66:	d8e7      	bhi.n	8007b38 <__mdiff+0x80>
 8007b68:	1b33      	subs	r3, r6, r4
 8007b6a:	3b15      	subs	r3, #21
 8007b6c:	f023 0303 	bic.w	r3, r3, #3
 8007b70:	3304      	adds	r3, #4
 8007b72:	3415      	adds	r4, #21
 8007b74:	42a6      	cmp	r6, r4
 8007b76:	bf38      	it	cc
 8007b78:	2304      	movcc	r3, #4
 8007b7a:	441d      	add	r5, r3
 8007b7c:	4473      	add	r3, lr
 8007b7e:	469e      	mov	lr, r3
 8007b80:	462e      	mov	r6, r5
 8007b82:	4566      	cmp	r6, ip
 8007b84:	d30e      	bcc.n	8007ba4 <__mdiff+0xec>
 8007b86:	f10c 0203 	add.w	r2, ip, #3
 8007b8a:	1b52      	subs	r2, r2, r5
 8007b8c:	f022 0203 	bic.w	r2, r2, #3
 8007b90:	3d03      	subs	r5, #3
 8007b92:	45ac      	cmp	ip, r5
 8007b94:	bf38      	it	cc
 8007b96:	2200      	movcc	r2, #0
 8007b98:	441a      	add	r2, r3
 8007b9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b9e:	b17b      	cbz	r3, 8007bc0 <__mdiff+0x108>
 8007ba0:	6107      	str	r7, [r0, #16]
 8007ba2:	e7a3      	b.n	8007aec <__mdiff+0x34>
 8007ba4:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ba8:	fa11 f288 	uxtah	r2, r1, r8
 8007bac:	1414      	asrs	r4, r2, #16
 8007bae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007bb2:	b292      	uxth	r2, r2
 8007bb4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007bb8:	f84e 2b04 	str.w	r2, [lr], #4
 8007bbc:	1421      	asrs	r1, r4, #16
 8007bbe:	e7e0      	b.n	8007b82 <__mdiff+0xca>
 8007bc0:	3f01      	subs	r7, #1
 8007bc2:	e7ea      	b.n	8007b9a <__mdiff+0xe2>
 8007bc4:	0800870f 	.word	0x0800870f
 8007bc8:	08008780 	.word	0x08008780

08007bcc <__d2b>:
 8007bcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bd0:	4689      	mov	r9, r1
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	ec57 6b10 	vmov	r6, r7, d0
 8007bd8:	4690      	mov	r8, r2
 8007bda:	f7ff fccf 	bl	800757c <_Balloc>
 8007bde:	4604      	mov	r4, r0
 8007be0:	b930      	cbnz	r0, 8007bf0 <__d2b+0x24>
 8007be2:	4602      	mov	r2, r0
 8007be4:	4b25      	ldr	r3, [pc, #148]	; (8007c7c <__d2b+0xb0>)
 8007be6:	4826      	ldr	r0, [pc, #152]	; (8007c80 <__d2b+0xb4>)
 8007be8:	f240 310a 	movw	r1, #778	; 0x30a
 8007bec:	f000 fad0 	bl	8008190 <__assert_func>
 8007bf0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007bf4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bf8:	bb35      	cbnz	r5, 8007c48 <__d2b+0x7c>
 8007bfa:	2e00      	cmp	r6, #0
 8007bfc:	9301      	str	r3, [sp, #4]
 8007bfe:	d028      	beq.n	8007c52 <__d2b+0x86>
 8007c00:	4668      	mov	r0, sp
 8007c02:	9600      	str	r6, [sp, #0]
 8007c04:	f7ff fd82 	bl	800770c <__lo0bits>
 8007c08:	9900      	ldr	r1, [sp, #0]
 8007c0a:	b300      	cbz	r0, 8007c4e <__d2b+0x82>
 8007c0c:	9a01      	ldr	r2, [sp, #4]
 8007c0e:	f1c0 0320 	rsb	r3, r0, #32
 8007c12:	fa02 f303 	lsl.w	r3, r2, r3
 8007c16:	430b      	orrs	r3, r1
 8007c18:	40c2      	lsrs	r2, r0
 8007c1a:	6163      	str	r3, [r4, #20]
 8007c1c:	9201      	str	r2, [sp, #4]
 8007c1e:	9b01      	ldr	r3, [sp, #4]
 8007c20:	61a3      	str	r3, [r4, #24]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bf14      	ite	ne
 8007c26:	2202      	movne	r2, #2
 8007c28:	2201      	moveq	r2, #1
 8007c2a:	6122      	str	r2, [r4, #16]
 8007c2c:	b1d5      	cbz	r5, 8007c64 <__d2b+0x98>
 8007c2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c32:	4405      	add	r5, r0
 8007c34:	f8c9 5000 	str.w	r5, [r9]
 8007c38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c3c:	f8c8 0000 	str.w	r0, [r8]
 8007c40:	4620      	mov	r0, r4
 8007c42:	b003      	add	sp, #12
 8007c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c4c:	e7d5      	b.n	8007bfa <__d2b+0x2e>
 8007c4e:	6161      	str	r1, [r4, #20]
 8007c50:	e7e5      	b.n	8007c1e <__d2b+0x52>
 8007c52:	a801      	add	r0, sp, #4
 8007c54:	f7ff fd5a 	bl	800770c <__lo0bits>
 8007c58:	9b01      	ldr	r3, [sp, #4]
 8007c5a:	6163      	str	r3, [r4, #20]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	6122      	str	r2, [r4, #16]
 8007c60:	3020      	adds	r0, #32
 8007c62:	e7e3      	b.n	8007c2c <__d2b+0x60>
 8007c64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c6c:	f8c9 0000 	str.w	r0, [r9]
 8007c70:	6918      	ldr	r0, [r3, #16]
 8007c72:	f7ff fd2b 	bl	80076cc <__hi0bits>
 8007c76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c7a:	e7df      	b.n	8007c3c <__d2b+0x70>
 8007c7c:	0800870f 	.word	0x0800870f
 8007c80:	08008780 	.word	0x08008780

08007c84 <_calloc_r>:
 8007c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c86:	fba1 2402 	umull	r2, r4, r1, r2
 8007c8a:	b94c      	cbnz	r4, 8007ca0 <_calloc_r+0x1c>
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	9201      	str	r2, [sp, #4]
 8007c90:	f7fd ffdc 	bl	8005c4c <_malloc_r>
 8007c94:	9a01      	ldr	r2, [sp, #4]
 8007c96:	4605      	mov	r5, r0
 8007c98:	b930      	cbnz	r0, 8007ca8 <_calloc_r+0x24>
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	b003      	add	sp, #12
 8007c9e:	bd30      	pop	{r4, r5, pc}
 8007ca0:	220c      	movs	r2, #12
 8007ca2:	6002      	str	r2, [r0, #0]
 8007ca4:	2500      	movs	r5, #0
 8007ca6:	e7f8      	b.n	8007c9a <_calloc_r+0x16>
 8007ca8:	4621      	mov	r1, r4
 8007caa:	f7fd ff5b 	bl	8005b64 <memset>
 8007cae:	e7f4      	b.n	8007c9a <_calloc_r+0x16>

08007cb0 <__sfputc_r>:
 8007cb0:	6893      	ldr	r3, [r2, #8]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	b410      	push	{r4}
 8007cb8:	6093      	str	r3, [r2, #8]
 8007cba:	da08      	bge.n	8007cce <__sfputc_r+0x1e>
 8007cbc:	6994      	ldr	r4, [r2, #24]
 8007cbe:	42a3      	cmp	r3, r4
 8007cc0:	db01      	blt.n	8007cc6 <__sfputc_r+0x16>
 8007cc2:	290a      	cmp	r1, #10
 8007cc4:	d103      	bne.n	8007cce <__sfputc_r+0x1e>
 8007cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cca:	f000 b98f 	b.w	8007fec <__swbuf_r>
 8007cce:	6813      	ldr	r3, [r2, #0]
 8007cd0:	1c58      	adds	r0, r3, #1
 8007cd2:	6010      	str	r0, [r2, #0]
 8007cd4:	7019      	strb	r1, [r3, #0]
 8007cd6:	4608      	mov	r0, r1
 8007cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <__sfputs_r>:
 8007cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce0:	4606      	mov	r6, r0
 8007ce2:	460f      	mov	r7, r1
 8007ce4:	4614      	mov	r4, r2
 8007ce6:	18d5      	adds	r5, r2, r3
 8007ce8:	42ac      	cmp	r4, r5
 8007cea:	d101      	bne.n	8007cf0 <__sfputs_r+0x12>
 8007cec:	2000      	movs	r0, #0
 8007cee:	e007      	b.n	8007d00 <__sfputs_r+0x22>
 8007cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cf4:	463a      	mov	r2, r7
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f7ff ffda 	bl	8007cb0 <__sfputc_r>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d1f3      	bne.n	8007ce8 <__sfputs_r+0xa>
 8007d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d04 <_vfiprintf_r>:
 8007d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d08:	460d      	mov	r5, r1
 8007d0a:	b09d      	sub	sp, #116	; 0x74
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	4698      	mov	r8, r3
 8007d10:	4606      	mov	r6, r0
 8007d12:	b118      	cbz	r0, 8007d1c <_vfiprintf_r+0x18>
 8007d14:	6983      	ldr	r3, [r0, #24]
 8007d16:	b90b      	cbnz	r3, 8007d1c <_vfiprintf_r+0x18>
 8007d18:	f7ff fb70 	bl	80073fc <__sinit>
 8007d1c:	4b89      	ldr	r3, [pc, #548]	; (8007f44 <_vfiprintf_r+0x240>)
 8007d1e:	429d      	cmp	r5, r3
 8007d20:	d11b      	bne.n	8007d5a <_vfiprintf_r+0x56>
 8007d22:	6875      	ldr	r5, [r6, #4]
 8007d24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d26:	07d9      	lsls	r1, r3, #31
 8007d28:	d405      	bmi.n	8007d36 <_vfiprintf_r+0x32>
 8007d2a:	89ab      	ldrh	r3, [r5, #12]
 8007d2c:	059a      	lsls	r2, r3, #22
 8007d2e:	d402      	bmi.n	8007d36 <_vfiprintf_r+0x32>
 8007d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d32:	f7ff fc06 	bl	8007542 <__retarget_lock_acquire_recursive>
 8007d36:	89ab      	ldrh	r3, [r5, #12]
 8007d38:	071b      	lsls	r3, r3, #28
 8007d3a:	d501      	bpl.n	8007d40 <_vfiprintf_r+0x3c>
 8007d3c:	692b      	ldr	r3, [r5, #16]
 8007d3e:	b9eb      	cbnz	r3, 8007d7c <_vfiprintf_r+0x78>
 8007d40:	4629      	mov	r1, r5
 8007d42:	4630      	mov	r0, r6
 8007d44:	f000 f9b6 	bl	80080b4 <__swsetup_r>
 8007d48:	b1c0      	cbz	r0, 8007d7c <_vfiprintf_r+0x78>
 8007d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d4c:	07dc      	lsls	r4, r3, #31
 8007d4e:	d50e      	bpl.n	8007d6e <_vfiprintf_r+0x6a>
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	b01d      	add	sp, #116	; 0x74
 8007d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5a:	4b7b      	ldr	r3, [pc, #492]	; (8007f48 <_vfiprintf_r+0x244>)
 8007d5c:	429d      	cmp	r5, r3
 8007d5e:	d101      	bne.n	8007d64 <_vfiprintf_r+0x60>
 8007d60:	68b5      	ldr	r5, [r6, #8]
 8007d62:	e7df      	b.n	8007d24 <_vfiprintf_r+0x20>
 8007d64:	4b79      	ldr	r3, [pc, #484]	; (8007f4c <_vfiprintf_r+0x248>)
 8007d66:	429d      	cmp	r5, r3
 8007d68:	bf08      	it	eq
 8007d6a:	68f5      	ldreq	r5, [r6, #12]
 8007d6c:	e7da      	b.n	8007d24 <_vfiprintf_r+0x20>
 8007d6e:	89ab      	ldrh	r3, [r5, #12]
 8007d70:	0598      	lsls	r0, r3, #22
 8007d72:	d4ed      	bmi.n	8007d50 <_vfiprintf_r+0x4c>
 8007d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d76:	f7ff fbe5 	bl	8007544 <__retarget_lock_release_recursive>
 8007d7a:	e7e9      	b.n	8007d50 <_vfiprintf_r+0x4c>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d80:	2320      	movs	r3, #32
 8007d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d86:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d8a:	2330      	movs	r3, #48	; 0x30
 8007d8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f50 <_vfiprintf_r+0x24c>
 8007d90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d94:	f04f 0901 	mov.w	r9, #1
 8007d98:	4623      	mov	r3, r4
 8007d9a:	469a      	mov	sl, r3
 8007d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007da0:	b10a      	cbz	r2, 8007da6 <_vfiprintf_r+0xa2>
 8007da2:	2a25      	cmp	r2, #37	; 0x25
 8007da4:	d1f9      	bne.n	8007d9a <_vfiprintf_r+0x96>
 8007da6:	ebba 0b04 	subs.w	fp, sl, r4
 8007daa:	d00b      	beq.n	8007dc4 <_vfiprintf_r+0xc0>
 8007dac:	465b      	mov	r3, fp
 8007dae:	4622      	mov	r2, r4
 8007db0:	4629      	mov	r1, r5
 8007db2:	4630      	mov	r0, r6
 8007db4:	f7ff ff93 	bl	8007cde <__sfputs_r>
 8007db8:	3001      	adds	r0, #1
 8007dba:	f000 80aa 	beq.w	8007f12 <_vfiprintf_r+0x20e>
 8007dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dc0:	445a      	add	r2, fp
 8007dc2:	9209      	str	r2, [sp, #36]	; 0x24
 8007dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 80a2 	beq.w	8007f12 <_vfiprintf_r+0x20e>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dd8:	f10a 0a01 	add.w	sl, sl, #1
 8007ddc:	9304      	str	r3, [sp, #16]
 8007dde:	9307      	str	r3, [sp, #28]
 8007de0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007de4:	931a      	str	r3, [sp, #104]	; 0x68
 8007de6:	4654      	mov	r4, sl
 8007de8:	2205      	movs	r2, #5
 8007dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dee:	4858      	ldr	r0, [pc, #352]	; (8007f50 <_vfiprintf_r+0x24c>)
 8007df0:	f7f8 f9f6 	bl	80001e0 <memchr>
 8007df4:	9a04      	ldr	r2, [sp, #16]
 8007df6:	b9d8      	cbnz	r0, 8007e30 <_vfiprintf_r+0x12c>
 8007df8:	06d1      	lsls	r1, r2, #27
 8007dfa:	bf44      	itt	mi
 8007dfc:	2320      	movmi	r3, #32
 8007dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e02:	0713      	lsls	r3, r2, #28
 8007e04:	bf44      	itt	mi
 8007e06:	232b      	movmi	r3, #43	; 0x2b
 8007e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e10:	2b2a      	cmp	r3, #42	; 0x2a
 8007e12:	d015      	beq.n	8007e40 <_vfiprintf_r+0x13c>
 8007e14:	9a07      	ldr	r2, [sp, #28]
 8007e16:	4654      	mov	r4, sl
 8007e18:	2000      	movs	r0, #0
 8007e1a:	f04f 0c0a 	mov.w	ip, #10
 8007e1e:	4621      	mov	r1, r4
 8007e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e24:	3b30      	subs	r3, #48	; 0x30
 8007e26:	2b09      	cmp	r3, #9
 8007e28:	d94e      	bls.n	8007ec8 <_vfiprintf_r+0x1c4>
 8007e2a:	b1b0      	cbz	r0, 8007e5a <_vfiprintf_r+0x156>
 8007e2c:	9207      	str	r2, [sp, #28]
 8007e2e:	e014      	b.n	8007e5a <_vfiprintf_r+0x156>
 8007e30:	eba0 0308 	sub.w	r3, r0, r8
 8007e34:	fa09 f303 	lsl.w	r3, r9, r3
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	9304      	str	r3, [sp, #16]
 8007e3c:	46a2      	mov	sl, r4
 8007e3e:	e7d2      	b.n	8007de6 <_vfiprintf_r+0xe2>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	1d19      	adds	r1, r3, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	9103      	str	r1, [sp, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	bfbb      	ittet	lt
 8007e4c:	425b      	neglt	r3, r3
 8007e4e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e52:	9307      	strge	r3, [sp, #28]
 8007e54:	9307      	strlt	r3, [sp, #28]
 8007e56:	bfb8      	it	lt
 8007e58:	9204      	strlt	r2, [sp, #16]
 8007e5a:	7823      	ldrb	r3, [r4, #0]
 8007e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8007e5e:	d10c      	bne.n	8007e7a <_vfiprintf_r+0x176>
 8007e60:	7863      	ldrb	r3, [r4, #1]
 8007e62:	2b2a      	cmp	r3, #42	; 0x2a
 8007e64:	d135      	bne.n	8007ed2 <_vfiprintf_r+0x1ce>
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	1d1a      	adds	r2, r3, #4
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	9203      	str	r2, [sp, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bfb8      	it	lt
 8007e72:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e76:	3402      	adds	r4, #2
 8007e78:	9305      	str	r3, [sp, #20]
 8007e7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f60 <_vfiprintf_r+0x25c>
 8007e7e:	7821      	ldrb	r1, [r4, #0]
 8007e80:	2203      	movs	r2, #3
 8007e82:	4650      	mov	r0, sl
 8007e84:	f7f8 f9ac 	bl	80001e0 <memchr>
 8007e88:	b140      	cbz	r0, 8007e9c <_vfiprintf_r+0x198>
 8007e8a:	2340      	movs	r3, #64	; 0x40
 8007e8c:	eba0 000a 	sub.w	r0, r0, sl
 8007e90:	fa03 f000 	lsl.w	r0, r3, r0
 8007e94:	9b04      	ldr	r3, [sp, #16]
 8007e96:	4303      	orrs	r3, r0
 8007e98:	3401      	adds	r4, #1
 8007e9a:	9304      	str	r3, [sp, #16]
 8007e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea0:	482c      	ldr	r0, [pc, #176]	; (8007f54 <_vfiprintf_r+0x250>)
 8007ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ea6:	2206      	movs	r2, #6
 8007ea8:	f7f8 f99a 	bl	80001e0 <memchr>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d03f      	beq.n	8007f30 <_vfiprintf_r+0x22c>
 8007eb0:	4b29      	ldr	r3, [pc, #164]	; (8007f58 <_vfiprintf_r+0x254>)
 8007eb2:	bb1b      	cbnz	r3, 8007efc <_vfiprintf_r+0x1f8>
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	3307      	adds	r3, #7
 8007eb8:	f023 0307 	bic.w	r3, r3, #7
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	9303      	str	r3, [sp, #12]
 8007ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec2:	443b      	add	r3, r7
 8007ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec6:	e767      	b.n	8007d98 <_vfiprintf_r+0x94>
 8007ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ecc:	460c      	mov	r4, r1
 8007ece:	2001      	movs	r0, #1
 8007ed0:	e7a5      	b.n	8007e1e <_vfiprintf_r+0x11a>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	3401      	adds	r4, #1
 8007ed6:	9305      	str	r3, [sp, #20]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	f04f 0c0a 	mov.w	ip, #10
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ee4:	3a30      	subs	r2, #48	; 0x30
 8007ee6:	2a09      	cmp	r2, #9
 8007ee8:	d903      	bls.n	8007ef2 <_vfiprintf_r+0x1ee>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0c5      	beq.n	8007e7a <_vfiprintf_r+0x176>
 8007eee:	9105      	str	r1, [sp, #20]
 8007ef0:	e7c3      	b.n	8007e7a <_vfiprintf_r+0x176>
 8007ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e7f0      	b.n	8007ede <_vfiprintf_r+0x1da>
 8007efc:	ab03      	add	r3, sp, #12
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	462a      	mov	r2, r5
 8007f02:	4b16      	ldr	r3, [pc, #88]	; (8007f5c <_vfiprintf_r+0x258>)
 8007f04:	a904      	add	r1, sp, #16
 8007f06:	4630      	mov	r0, r6
 8007f08:	f7fd ffb4 	bl	8005e74 <_printf_float>
 8007f0c:	4607      	mov	r7, r0
 8007f0e:	1c78      	adds	r0, r7, #1
 8007f10:	d1d6      	bne.n	8007ec0 <_vfiprintf_r+0x1bc>
 8007f12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f14:	07d9      	lsls	r1, r3, #31
 8007f16:	d405      	bmi.n	8007f24 <_vfiprintf_r+0x220>
 8007f18:	89ab      	ldrh	r3, [r5, #12]
 8007f1a:	059a      	lsls	r2, r3, #22
 8007f1c:	d402      	bmi.n	8007f24 <_vfiprintf_r+0x220>
 8007f1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f20:	f7ff fb10 	bl	8007544 <__retarget_lock_release_recursive>
 8007f24:	89ab      	ldrh	r3, [r5, #12]
 8007f26:	065b      	lsls	r3, r3, #25
 8007f28:	f53f af12 	bmi.w	8007d50 <_vfiprintf_r+0x4c>
 8007f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f2e:	e711      	b.n	8007d54 <_vfiprintf_r+0x50>
 8007f30:	ab03      	add	r3, sp, #12
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	462a      	mov	r2, r5
 8007f36:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <_vfiprintf_r+0x258>)
 8007f38:	a904      	add	r1, sp, #16
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7fe fa3e 	bl	80063bc <_printf_i>
 8007f40:	e7e4      	b.n	8007f0c <_vfiprintf_r+0x208>
 8007f42:	bf00      	nop
 8007f44:	08008740 	.word	0x08008740
 8007f48:	08008760 	.word	0x08008760
 8007f4c:	08008720 	.word	0x08008720
 8007f50:	080088dc 	.word	0x080088dc
 8007f54:	080088e6 	.word	0x080088e6
 8007f58:	08005e75 	.word	0x08005e75
 8007f5c:	08007cdf 	.word	0x08007cdf
 8007f60:	080088e2 	.word	0x080088e2

08007f64 <__sread>:
 8007f64:	b510      	push	{r4, lr}
 8007f66:	460c      	mov	r4, r1
 8007f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f6c:	f000 fa9c 	bl	80084a8 <_read_r>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	bfab      	itete	ge
 8007f74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f76:	89a3      	ldrhlt	r3, [r4, #12]
 8007f78:	181b      	addge	r3, r3, r0
 8007f7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f7e:	bfac      	ite	ge
 8007f80:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f82:	81a3      	strhlt	r3, [r4, #12]
 8007f84:	bd10      	pop	{r4, pc}

08007f86 <__swrite>:
 8007f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f8a:	461f      	mov	r7, r3
 8007f8c:	898b      	ldrh	r3, [r1, #12]
 8007f8e:	05db      	lsls	r3, r3, #23
 8007f90:	4605      	mov	r5, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	4616      	mov	r6, r2
 8007f96:	d505      	bpl.n	8007fa4 <__swrite+0x1e>
 8007f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f000 f9f8 	bl	8008394 <_lseek_r>
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fae:	81a3      	strh	r3, [r4, #12]
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	463b      	mov	r3, r7
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fba:	f000 b869 	b.w	8008090 <_write_r>

08007fbe <__sseek>:
 8007fbe:	b510      	push	{r4, lr}
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc6:	f000 f9e5 	bl	8008394 <_lseek_r>
 8007fca:	1c43      	adds	r3, r0, #1
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	bf15      	itete	ne
 8007fd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fda:	81a3      	strheq	r3, [r4, #12]
 8007fdc:	bf18      	it	ne
 8007fde:	81a3      	strhne	r3, [r4, #12]
 8007fe0:	bd10      	pop	{r4, pc}

08007fe2 <__sclose>:
 8007fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe6:	f000 b8f1 	b.w	80081cc <_close_r>
	...

08007fec <__swbuf_r>:
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fee:	460e      	mov	r6, r1
 8007ff0:	4614      	mov	r4, r2
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	b118      	cbz	r0, 8007ffe <__swbuf_r+0x12>
 8007ff6:	6983      	ldr	r3, [r0, #24]
 8007ff8:	b90b      	cbnz	r3, 8007ffe <__swbuf_r+0x12>
 8007ffa:	f7ff f9ff 	bl	80073fc <__sinit>
 8007ffe:	4b21      	ldr	r3, [pc, #132]	; (8008084 <__swbuf_r+0x98>)
 8008000:	429c      	cmp	r4, r3
 8008002:	d12b      	bne.n	800805c <__swbuf_r+0x70>
 8008004:	686c      	ldr	r4, [r5, #4]
 8008006:	69a3      	ldr	r3, [r4, #24]
 8008008:	60a3      	str	r3, [r4, #8]
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	071a      	lsls	r2, r3, #28
 800800e:	d52f      	bpl.n	8008070 <__swbuf_r+0x84>
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	b36b      	cbz	r3, 8008070 <__swbuf_r+0x84>
 8008014:	6923      	ldr	r3, [r4, #16]
 8008016:	6820      	ldr	r0, [r4, #0]
 8008018:	1ac0      	subs	r0, r0, r3
 800801a:	6963      	ldr	r3, [r4, #20]
 800801c:	b2f6      	uxtb	r6, r6
 800801e:	4283      	cmp	r3, r0
 8008020:	4637      	mov	r7, r6
 8008022:	dc04      	bgt.n	800802e <__swbuf_r+0x42>
 8008024:	4621      	mov	r1, r4
 8008026:	4628      	mov	r0, r5
 8008028:	f000 f966 	bl	80082f8 <_fflush_r>
 800802c:	bb30      	cbnz	r0, 800807c <__swbuf_r+0x90>
 800802e:	68a3      	ldr	r3, [r4, #8]
 8008030:	3b01      	subs	r3, #1
 8008032:	60a3      	str	r3, [r4, #8]
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	6022      	str	r2, [r4, #0]
 800803a:	701e      	strb	r6, [r3, #0]
 800803c:	6963      	ldr	r3, [r4, #20]
 800803e:	3001      	adds	r0, #1
 8008040:	4283      	cmp	r3, r0
 8008042:	d004      	beq.n	800804e <__swbuf_r+0x62>
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	07db      	lsls	r3, r3, #31
 8008048:	d506      	bpl.n	8008058 <__swbuf_r+0x6c>
 800804a:	2e0a      	cmp	r6, #10
 800804c:	d104      	bne.n	8008058 <__swbuf_r+0x6c>
 800804e:	4621      	mov	r1, r4
 8008050:	4628      	mov	r0, r5
 8008052:	f000 f951 	bl	80082f8 <_fflush_r>
 8008056:	b988      	cbnz	r0, 800807c <__swbuf_r+0x90>
 8008058:	4638      	mov	r0, r7
 800805a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800805c:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <__swbuf_r+0x9c>)
 800805e:	429c      	cmp	r4, r3
 8008060:	d101      	bne.n	8008066 <__swbuf_r+0x7a>
 8008062:	68ac      	ldr	r4, [r5, #8]
 8008064:	e7cf      	b.n	8008006 <__swbuf_r+0x1a>
 8008066:	4b09      	ldr	r3, [pc, #36]	; (800808c <__swbuf_r+0xa0>)
 8008068:	429c      	cmp	r4, r3
 800806a:	bf08      	it	eq
 800806c:	68ec      	ldreq	r4, [r5, #12]
 800806e:	e7ca      	b.n	8008006 <__swbuf_r+0x1a>
 8008070:	4621      	mov	r1, r4
 8008072:	4628      	mov	r0, r5
 8008074:	f000 f81e 	bl	80080b4 <__swsetup_r>
 8008078:	2800      	cmp	r0, #0
 800807a:	d0cb      	beq.n	8008014 <__swbuf_r+0x28>
 800807c:	f04f 37ff 	mov.w	r7, #4294967295
 8008080:	e7ea      	b.n	8008058 <__swbuf_r+0x6c>
 8008082:	bf00      	nop
 8008084:	08008740 	.word	0x08008740
 8008088:	08008760 	.word	0x08008760
 800808c:	08008720 	.word	0x08008720

08008090 <_write_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d07      	ldr	r5, [pc, #28]	; (80080b0 <_write_r+0x20>)
 8008094:	4604      	mov	r4, r0
 8008096:	4608      	mov	r0, r1
 8008098:	4611      	mov	r1, r2
 800809a:	2200      	movs	r2, #0
 800809c:	602a      	str	r2, [r5, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	f7f9 f8c4 	bl	800122c <_write>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d102      	bne.n	80080ae <_write_r+0x1e>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	b103      	cbz	r3, 80080ae <_write_r+0x1e>
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	2000034c 	.word	0x2000034c

080080b4 <__swsetup_r>:
 80080b4:	4b32      	ldr	r3, [pc, #200]	; (8008180 <__swsetup_r+0xcc>)
 80080b6:	b570      	push	{r4, r5, r6, lr}
 80080b8:	681d      	ldr	r5, [r3, #0]
 80080ba:	4606      	mov	r6, r0
 80080bc:	460c      	mov	r4, r1
 80080be:	b125      	cbz	r5, 80080ca <__swsetup_r+0x16>
 80080c0:	69ab      	ldr	r3, [r5, #24]
 80080c2:	b913      	cbnz	r3, 80080ca <__swsetup_r+0x16>
 80080c4:	4628      	mov	r0, r5
 80080c6:	f7ff f999 	bl	80073fc <__sinit>
 80080ca:	4b2e      	ldr	r3, [pc, #184]	; (8008184 <__swsetup_r+0xd0>)
 80080cc:	429c      	cmp	r4, r3
 80080ce:	d10f      	bne.n	80080f0 <__swsetup_r+0x3c>
 80080d0:	686c      	ldr	r4, [r5, #4]
 80080d2:	89a3      	ldrh	r3, [r4, #12]
 80080d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080d8:	0719      	lsls	r1, r3, #28
 80080da:	d42c      	bmi.n	8008136 <__swsetup_r+0x82>
 80080dc:	06dd      	lsls	r5, r3, #27
 80080de:	d411      	bmi.n	8008104 <__swsetup_r+0x50>
 80080e0:	2309      	movs	r3, #9
 80080e2:	6033      	str	r3, [r6, #0]
 80080e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080e8:	81a3      	strh	r3, [r4, #12]
 80080ea:	f04f 30ff 	mov.w	r0, #4294967295
 80080ee:	e03e      	b.n	800816e <__swsetup_r+0xba>
 80080f0:	4b25      	ldr	r3, [pc, #148]	; (8008188 <__swsetup_r+0xd4>)
 80080f2:	429c      	cmp	r4, r3
 80080f4:	d101      	bne.n	80080fa <__swsetup_r+0x46>
 80080f6:	68ac      	ldr	r4, [r5, #8]
 80080f8:	e7eb      	b.n	80080d2 <__swsetup_r+0x1e>
 80080fa:	4b24      	ldr	r3, [pc, #144]	; (800818c <__swsetup_r+0xd8>)
 80080fc:	429c      	cmp	r4, r3
 80080fe:	bf08      	it	eq
 8008100:	68ec      	ldreq	r4, [r5, #12]
 8008102:	e7e6      	b.n	80080d2 <__swsetup_r+0x1e>
 8008104:	0758      	lsls	r0, r3, #29
 8008106:	d512      	bpl.n	800812e <__swsetup_r+0x7a>
 8008108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800810a:	b141      	cbz	r1, 800811e <__swsetup_r+0x6a>
 800810c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008110:	4299      	cmp	r1, r3
 8008112:	d002      	beq.n	800811a <__swsetup_r+0x66>
 8008114:	4630      	mov	r0, r6
 8008116:	f7fd fd2d 	bl	8005b74 <_free_r>
 800811a:	2300      	movs	r3, #0
 800811c:	6363      	str	r3, [r4, #52]	; 0x34
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008124:	81a3      	strh	r3, [r4, #12]
 8008126:	2300      	movs	r3, #0
 8008128:	6063      	str	r3, [r4, #4]
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	f043 0308 	orr.w	r3, r3, #8
 8008134:	81a3      	strh	r3, [r4, #12]
 8008136:	6923      	ldr	r3, [r4, #16]
 8008138:	b94b      	cbnz	r3, 800814e <__swsetup_r+0x9a>
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008144:	d003      	beq.n	800814e <__swsetup_r+0x9a>
 8008146:	4621      	mov	r1, r4
 8008148:	4630      	mov	r0, r6
 800814a:	f000 f95b 	bl	8008404 <__smakebuf_r>
 800814e:	89a0      	ldrh	r0, [r4, #12]
 8008150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008154:	f010 0301 	ands.w	r3, r0, #1
 8008158:	d00a      	beq.n	8008170 <__swsetup_r+0xbc>
 800815a:	2300      	movs	r3, #0
 800815c:	60a3      	str	r3, [r4, #8]
 800815e:	6963      	ldr	r3, [r4, #20]
 8008160:	425b      	negs	r3, r3
 8008162:	61a3      	str	r3, [r4, #24]
 8008164:	6923      	ldr	r3, [r4, #16]
 8008166:	b943      	cbnz	r3, 800817a <__swsetup_r+0xc6>
 8008168:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800816c:	d1ba      	bne.n	80080e4 <__swsetup_r+0x30>
 800816e:	bd70      	pop	{r4, r5, r6, pc}
 8008170:	0781      	lsls	r1, r0, #30
 8008172:	bf58      	it	pl
 8008174:	6963      	ldrpl	r3, [r4, #20]
 8008176:	60a3      	str	r3, [r4, #8]
 8008178:	e7f4      	b.n	8008164 <__swsetup_r+0xb0>
 800817a:	2000      	movs	r0, #0
 800817c:	e7f7      	b.n	800816e <__swsetup_r+0xba>
 800817e:	bf00      	nop
 8008180:	20000014 	.word	0x20000014
 8008184:	08008740 	.word	0x08008740
 8008188:	08008760 	.word	0x08008760
 800818c:	08008720 	.word	0x08008720

08008190 <__assert_func>:
 8008190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008192:	4614      	mov	r4, r2
 8008194:	461a      	mov	r2, r3
 8008196:	4b09      	ldr	r3, [pc, #36]	; (80081bc <__assert_func+0x2c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4605      	mov	r5, r0
 800819c:	68d8      	ldr	r0, [r3, #12]
 800819e:	b14c      	cbz	r4, 80081b4 <__assert_func+0x24>
 80081a0:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <__assert_func+0x30>)
 80081a2:	9100      	str	r1, [sp, #0]
 80081a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081a8:	4906      	ldr	r1, [pc, #24]	; (80081c4 <__assert_func+0x34>)
 80081aa:	462b      	mov	r3, r5
 80081ac:	f000 f8e0 	bl	8008370 <fiprintf>
 80081b0:	f000 f999 	bl	80084e6 <abort>
 80081b4:	4b04      	ldr	r3, [pc, #16]	; (80081c8 <__assert_func+0x38>)
 80081b6:	461c      	mov	r4, r3
 80081b8:	e7f3      	b.n	80081a2 <__assert_func+0x12>
 80081ba:	bf00      	nop
 80081bc:	20000014 	.word	0x20000014
 80081c0:	080088ed 	.word	0x080088ed
 80081c4:	080088fa 	.word	0x080088fa
 80081c8:	08008928 	.word	0x08008928

080081cc <_close_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4d06      	ldr	r5, [pc, #24]	; (80081e8 <_close_r+0x1c>)
 80081d0:	2300      	movs	r3, #0
 80081d2:	4604      	mov	r4, r0
 80081d4:	4608      	mov	r0, r1
 80081d6:	602b      	str	r3, [r5, #0]
 80081d8:	f7f9 f9ad 	bl	8001536 <_close>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	d102      	bne.n	80081e6 <_close_r+0x1a>
 80081e0:	682b      	ldr	r3, [r5, #0]
 80081e2:	b103      	cbz	r3, 80081e6 <_close_r+0x1a>
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	bd38      	pop	{r3, r4, r5, pc}
 80081e8:	2000034c 	.word	0x2000034c

080081ec <__sflush_r>:
 80081ec:	898a      	ldrh	r2, [r1, #12]
 80081ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f2:	4605      	mov	r5, r0
 80081f4:	0710      	lsls	r0, r2, #28
 80081f6:	460c      	mov	r4, r1
 80081f8:	d458      	bmi.n	80082ac <__sflush_r+0xc0>
 80081fa:	684b      	ldr	r3, [r1, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	dc05      	bgt.n	800820c <__sflush_r+0x20>
 8008200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008202:	2b00      	cmp	r3, #0
 8008204:	dc02      	bgt.n	800820c <__sflush_r+0x20>
 8008206:	2000      	movs	r0, #0
 8008208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800820c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800820e:	2e00      	cmp	r6, #0
 8008210:	d0f9      	beq.n	8008206 <__sflush_r+0x1a>
 8008212:	2300      	movs	r3, #0
 8008214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008218:	682f      	ldr	r7, [r5, #0]
 800821a:	602b      	str	r3, [r5, #0]
 800821c:	d032      	beq.n	8008284 <__sflush_r+0x98>
 800821e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008220:	89a3      	ldrh	r3, [r4, #12]
 8008222:	075a      	lsls	r2, r3, #29
 8008224:	d505      	bpl.n	8008232 <__sflush_r+0x46>
 8008226:	6863      	ldr	r3, [r4, #4]
 8008228:	1ac0      	subs	r0, r0, r3
 800822a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800822c:	b10b      	cbz	r3, 8008232 <__sflush_r+0x46>
 800822e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008230:	1ac0      	subs	r0, r0, r3
 8008232:	2300      	movs	r3, #0
 8008234:	4602      	mov	r2, r0
 8008236:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008238:	6a21      	ldr	r1, [r4, #32]
 800823a:	4628      	mov	r0, r5
 800823c:	47b0      	blx	r6
 800823e:	1c43      	adds	r3, r0, #1
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	d106      	bne.n	8008252 <__sflush_r+0x66>
 8008244:	6829      	ldr	r1, [r5, #0]
 8008246:	291d      	cmp	r1, #29
 8008248:	d82c      	bhi.n	80082a4 <__sflush_r+0xb8>
 800824a:	4a2a      	ldr	r2, [pc, #168]	; (80082f4 <__sflush_r+0x108>)
 800824c:	40ca      	lsrs	r2, r1
 800824e:	07d6      	lsls	r6, r2, #31
 8008250:	d528      	bpl.n	80082a4 <__sflush_r+0xb8>
 8008252:	2200      	movs	r2, #0
 8008254:	6062      	str	r2, [r4, #4]
 8008256:	04d9      	lsls	r1, r3, #19
 8008258:	6922      	ldr	r2, [r4, #16]
 800825a:	6022      	str	r2, [r4, #0]
 800825c:	d504      	bpl.n	8008268 <__sflush_r+0x7c>
 800825e:	1c42      	adds	r2, r0, #1
 8008260:	d101      	bne.n	8008266 <__sflush_r+0x7a>
 8008262:	682b      	ldr	r3, [r5, #0]
 8008264:	b903      	cbnz	r3, 8008268 <__sflush_r+0x7c>
 8008266:	6560      	str	r0, [r4, #84]	; 0x54
 8008268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800826a:	602f      	str	r7, [r5, #0]
 800826c:	2900      	cmp	r1, #0
 800826e:	d0ca      	beq.n	8008206 <__sflush_r+0x1a>
 8008270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008274:	4299      	cmp	r1, r3
 8008276:	d002      	beq.n	800827e <__sflush_r+0x92>
 8008278:	4628      	mov	r0, r5
 800827a:	f7fd fc7b 	bl	8005b74 <_free_r>
 800827e:	2000      	movs	r0, #0
 8008280:	6360      	str	r0, [r4, #52]	; 0x34
 8008282:	e7c1      	b.n	8008208 <__sflush_r+0x1c>
 8008284:	6a21      	ldr	r1, [r4, #32]
 8008286:	2301      	movs	r3, #1
 8008288:	4628      	mov	r0, r5
 800828a:	47b0      	blx	r6
 800828c:	1c41      	adds	r1, r0, #1
 800828e:	d1c7      	bne.n	8008220 <__sflush_r+0x34>
 8008290:	682b      	ldr	r3, [r5, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d0c4      	beq.n	8008220 <__sflush_r+0x34>
 8008296:	2b1d      	cmp	r3, #29
 8008298:	d001      	beq.n	800829e <__sflush_r+0xb2>
 800829a:	2b16      	cmp	r3, #22
 800829c:	d101      	bne.n	80082a2 <__sflush_r+0xb6>
 800829e:	602f      	str	r7, [r5, #0]
 80082a0:	e7b1      	b.n	8008206 <__sflush_r+0x1a>
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082a8:	81a3      	strh	r3, [r4, #12]
 80082aa:	e7ad      	b.n	8008208 <__sflush_r+0x1c>
 80082ac:	690f      	ldr	r7, [r1, #16]
 80082ae:	2f00      	cmp	r7, #0
 80082b0:	d0a9      	beq.n	8008206 <__sflush_r+0x1a>
 80082b2:	0793      	lsls	r3, r2, #30
 80082b4:	680e      	ldr	r6, [r1, #0]
 80082b6:	bf08      	it	eq
 80082b8:	694b      	ldreq	r3, [r1, #20]
 80082ba:	600f      	str	r7, [r1, #0]
 80082bc:	bf18      	it	ne
 80082be:	2300      	movne	r3, #0
 80082c0:	eba6 0807 	sub.w	r8, r6, r7
 80082c4:	608b      	str	r3, [r1, #8]
 80082c6:	f1b8 0f00 	cmp.w	r8, #0
 80082ca:	dd9c      	ble.n	8008206 <__sflush_r+0x1a>
 80082cc:	6a21      	ldr	r1, [r4, #32]
 80082ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082d0:	4643      	mov	r3, r8
 80082d2:	463a      	mov	r2, r7
 80082d4:	4628      	mov	r0, r5
 80082d6:	47b0      	blx	r6
 80082d8:	2800      	cmp	r0, #0
 80082da:	dc06      	bgt.n	80082ea <__sflush_r+0xfe>
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082e2:	81a3      	strh	r3, [r4, #12]
 80082e4:	f04f 30ff 	mov.w	r0, #4294967295
 80082e8:	e78e      	b.n	8008208 <__sflush_r+0x1c>
 80082ea:	4407      	add	r7, r0
 80082ec:	eba8 0800 	sub.w	r8, r8, r0
 80082f0:	e7e9      	b.n	80082c6 <__sflush_r+0xda>
 80082f2:	bf00      	nop
 80082f4:	20400001 	.word	0x20400001

080082f8 <_fflush_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	690b      	ldr	r3, [r1, #16]
 80082fc:	4605      	mov	r5, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	b913      	cbnz	r3, 8008308 <_fflush_r+0x10>
 8008302:	2500      	movs	r5, #0
 8008304:	4628      	mov	r0, r5
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	b118      	cbz	r0, 8008312 <_fflush_r+0x1a>
 800830a:	6983      	ldr	r3, [r0, #24]
 800830c:	b90b      	cbnz	r3, 8008312 <_fflush_r+0x1a>
 800830e:	f7ff f875 	bl	80073fc <__sinit>
 8008312:	4b14      	ldr	r3, [pc, #80]	; (8008364 <_fflush_r+0x6c>)
 8008314:	429c      	cmp	r4, r3
 8008316:	d11b      	bne.n	8008350 <_fflush_r+0x58>
 8008318:	686c      	ldr	r4, [r5, #4]
 800831a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0ef      	beq.n	8008302 <_fflush_r+0xa>
 8008322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008324:	07d0      	lsls	r0, r2, #31
 8008326:	d404      	bmi.n	8008332 <_fflush_r+0x3a>
 8008328:	0599      	lsls	r1, r3, #22
 800832a:	d402      	bmi.n	8008332 <_fflush_r+0x3a>
 800832c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800832e:	f7ff f908 	bl	8007542 <__retarget_lock_acquire_recursive>
 8008332:	4628      	mov	r0, r5
 8008334:	4621      	mov	r1, r4
 8008336:	f7ff ff59 	bl	80081ec <__sflush_r>
 800833a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800833c:	07da      	lsls	r2, r3, #31
 800833e:	4605      	mov	r5, r0
 8008340:	d4e0      	bmi.n	8008304 <_fflush_r+0xc>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	059b      	lsls	r3, r3, #22
 8008346:	d4dd      	bmi.n	8008304 <_fflush_r+0xc>
 8008348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800834a:	f7ff f8fb 	bl	8007544 <__retarget_lock_release_recursive>
 800834e:	e7d9      	b.n	8008304 <_fflush_r+0xc>
 8008350:	4b05      	ldr	r3, [pc, #20]	; (8008368 <_fflush_r+0x70>)
 8008352:	429c      	cmp	r4, r3
 8008354:	d101      	bne.n	800835a <_fflush_r+0x62>
 8008356:	68ac      	ldr	r4, [r5, #8]
 8008358:	e7df      	b.n	800831a <_fflush_r+0x22>
 800835a:	4b04      	ldr	r3, [pc, #16]	; (800836c <_fflush_r+0x74>)
 800835c:	429c      	cmp	r4, r3
 800835e:	bf08      	it	eq
 8008360:	68ec      	ldreq	r4, [r5, #12]
 8008362:	e7da      	b.n	800831a <_fflush_r+0x22>
 8008364:	08008740 	.word	0x08008740
 8008368:	08008760 	.word	0x08008760
 800836c:	08008720 	.word	0x08008720

08008370 <fiprintf>:
 8008370:	b40e      	push	{r1, r2, r3}
 8008372:	b503      	push	{r0, r1, lr}
 8008374:	4601      	mov	r1, r0
 8008376:	ab03      	add	r3, sp, #12
 8008378:	4805      	ldr	r0, [pc, #20]	; (8008390 <fiprintf+0x20>)
 800837a:	f853 2b04 	ldr.w	r2, [r3], #4
 800837e:	6800      	ldr	r0, [r0, #0]
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	f7ff fcbf 	bl	8007d04 <_vfiprintf_r>
 8008386:	b002      	add	sp, #8
 8008388:	f85d eb04 	ldr.w	lr, [sp], #4
 800838c:	b003      	add	sp, #12
 800838e:	4770      	bx	lr
 8008390:	20000014 	.word	0x20000014

08008394 <_lseek_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4d07      	ldr	r5, [pc, #28]	; (80083b4 <_lseek_r+0x20>)
 8008398:	4604      	mov	r4, r0
 800839a:	4608      	mov	r0, r1
 800839c:	4611      	mov	r1, r2
 800839e:	2200      	movs	r2, #0
 80083a0:	602a      	str	r2, [r5, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	f7f9 f8ee 	bl	8001584 <_lseek>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_lseek_r+0x1e>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_lseek_r+0x1e>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	2000034c 	.word	0x2000034c

080083b8 <__swhatbuf_r>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	460e      	mov	r6, r1
 80083bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c0:	2900      	cmp	r1, #0
 80083c2:	b096      	sub	sp, #88	; 0x58
 80083c4:	4614      	mov	r4, r2
 80083c6:	461d      	mov	r5, r3
 80083c8:	da08      	bge.n	80083dc <__swhatbuf_r+0x24>
 80083ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	602a      	str	r2, [r5, #0]
 80083d2:	061a      	lsls	r2, r3, #24
 80083d4:	d410      	bmi.n	80083f8 <__swhatbuf_r+0x40>
 80083d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083da:	e00e      	b.n	80083fa <__swhatbuf_r+0x42>
 80083dc:	466a      	mov	r2, sp
 80083de:	f000 f889 	bl	80084f4 <_fstat_r>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	dbf1      	blt.n	80083ca <__swhatbuf_r+0x12>
 80083e6:	9a01      	ldr	r2, [sp, #4]
 80083e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083f0:	425a      	negs	r2, r3
 80083f2:	415a      	adcs	r2, r3
 80083f4:	602a      	str	r2, [r5, #0]
 80083f6:	e7ee      	b.n	80083d6 <__swhatbuf_r+0x1e>
 80083f8:	2340      	movs	r3, #64	; 0x40
 80083fa:	2000      	movs	r0, #0
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	b016      	add	sp, #88	; 0x58
 8008400:	bd70      	pop	{r4, r5, r6, pc}
	...

08008404 <__smakebuf_r>:
 8008404:	898b      	ldrh	r3, [r1, #12]
 8008406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008408:	079d      	lsls	r5, r3, #30
 800840a:	4606      	mov	r6, r0
 800840c:	460c      	mov	r4, r1
 800840e:	d507      	bpl.n	8008420 <__smakebuf_r+0x1c>
 8008410:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	6123      	str	r3, [r4, #16]
 8008418:	2301      	movs	r3, #1
 800841a:	6163      	str	r3, [r4, #20]
 800841c:	b002      	add	sp, #8
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	ab01      	add	r3, sp, #4
 8008422:	466a      	mov	r2, sp
 8008424:	f7ff ffc8 	bl	80083b8 <__swhatbuf_r>
 8008428:	9900      	ldr	r1, [sp, #0]
 800842a:	4605      	mov	r5, r0
 800842c:	4630      	mov	r0, r6
 800842e:	f7fd fc0d 	bl	8005c4c <_malloc_r>
 8008432:	b948      	cbnz	r0, 8008448 <__smakebuf_r+0x44>
 8008434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008438:	059a      	lsls	r2, r3, #22
 800843a:	d4ef      	bmi.n	800841c <__smakebuf_r+0x18>
 800843c:	f023 0303 	bic.w	r3, r3, #3
 8008440:	f043 0302 	orr.w	r3, r3, #2
 8008444:	81a3      	strh	r3, [r4, #12]
 8008446:	e7e3      	b.n	8008410 <__smakebuf_r+0xc>
 8008448:	4b0d      	ldr	r3, [pc, #52]	; (8008480 <__smakebuf_r+0x7c>)
 800844a:	62b3      	str	r3, [r6, #40]	; 0x28
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	6020      	str	r0, [r4, #0]
 8008450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008454:	81a3      	strh	r3, [r4, #12]
 8008456:	9b00      	ldr	r3, [sp, #0]
 8008458:	6163      	str	r3, [r4, #20]
 800845a:	9b01      	ldr	r3, [sp, #4]
 800845c:	6120      	str	r0, [r4, #16]
 800845e:	b15b      	cbz	r3, 8008478 <__smakebuf_r+0x74>
 8008460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008464:	4630      	mov	r0, r6
 8008466:	f000 f857 	bl	8008518 <_isatty_r>
 800846a:	b128      	cbz	r0, 8008478 <__smakebuf_r+0x74>
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	f023 0303 	bic.w	r3, r3, #3
 8008472:	f043 0301 	orr.w	r3, r3, #1
 8008476:	81a3      	strh	r3, [r4, #12]
 8008478:	89a0      	ldrh	r0, [r4, #12]
 800847a:	4305      	orrs	r5, r0
 800847c:	81a5      	strh	r5, [r4, #12]
 800847e:	e7cd      	b.n	800841c <__smakebuf_r+0x18>
 8008480:	08007395 	.word	0x08007395

08008484 <__ascii_mbtowc>:
 8008484:	b082      	sub	sp, #8
 8008486:	b901      	cbnz	r1, 800848a <__ascii_mbtowc+0x6>
 8008488:	a901      	add	r1, sp, #4
 800848a:	b142      	cbz	r2, 800849e <__ascii_mbtowc+0x1a>
 800848c:	b14b      	cbz	r3, 80084a2 <__ascii_mbtowc+0x1e>
 800848e:	7813      	ldrb	r3, [r2, #0]
 8008490:	600b      	str	r3, [r1, #0]
 8008492:	7812      	ldrb	r2, [r2, #0]
 8008494:	1e10      	subs	r0, r2, #0
 8008496:	bf18      	it	ne
 8008498:	2001      	movne	r0, #1
 800849a:	b002      	add	sp, #8
 800849c:	4770      	bx	lr
 800849e:	4610      	mov	r0, r2
 80084a0:	e7fb      	b.n	800849a <__ascii_mbtowc+0x16>
 80084a2:	f06f 0001 	mvn.w	r0, #1
 80084a6:	e7f8      	b.n	800849a <__ascii_mbtowc+0x16>

080084a8 <_read_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4d07      	ldr	r5, [pc, #28]	; (80084c8 <_read_r+0x20>)
 80084ac:	4604      	mov	r4, r0
 80084ae:	4608      	mov	r0, r1
 80084b0:	4611      	mov	r1, r2
 80084b2:	2200      	movs	r2, #0
 80084b4:	602a      	str	r2, [r5, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	f7f9 f820 	bl	80014fc <_read>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d102      	bne.n	80084c6 <_read_r+0x1e>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	b103      	cbz	r3, 80084c6 <_read_r+0x1e>
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
 80084c8:	2000034c 	.word	0x2000034c

080084cc <__ascii_wctomb>:
 80084cc:	b149      	cbz	r1, 80084e2 <__ascii_wctomb+0x16>
 80084ce:	2aff      	cmp	r2, #255	; 0xff
 80084d0:	bf85      	ittet	hi
 80084d2:	238a      	movhi	r3, #138	; 0x8a
 80084d4:	6003      	strhi	r3, [r0, #0]
 80084d6:	700a      	strbls	r2, [r1, #0]
 80084d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80084dc:	bf98      	it	ls
 80084de:	2001      	movls	r0, #1
 80084e0:	4770      	bx	lr
 80084e2:	4608      	mov	r0, r1
 80084e4:	4770      	bx	lr

080084e6 <abort>:
 80084e6:	b508      	push	{r3, lr}
 80084e8:	2006      	movs	r0, #6
 80084ea:	f000 f84d 	bl	8008588 <raise>
 80084ee:	2001      	movs	r0, #1
 80084f0:	f7f8 fffa 	bl	80014e8 <_exit>

080084f4 <_fstat_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4d07      	ldr	r5, [pc, #28]	; (8008514 <_fstat_r+0x20>)
 80084f8:	2300      	movs	r3, #0
 80084fa:	4604      	mov	r4, r0
 80084fc:	4608      	mov	r0, r1
 80084fe:	4611      	mov	r1, r2
 8008500:	602b      	str	r3, [r5, #0]
 8008502:	f7f9 f824 	bl	800154e <_fstat>
 8008506:	1c43      	adds	r3, r0, #1
 8008508:	d102      	bne.n	8008510 <_fstat_r+0x1c>
 800850a:	682b      	ldr	r3, [r5, #0]
 800850c:	b103      	cbz	r3, 8008510 <_fstat_r+0x1c>
 800850e:	6023      	str	r3, [r4, #0]
 8008510:	bd38      	pop	{r3, r4, r5, pc}
 8008512:	bf00      	nop
 8008514:	2000034c 	.word	0x2000034c

08008518 <_isatty_r>:
 8008518:	b538      	push	{r3, r4, r5, lr}
 800851a:	4d06      	ldr	r5, [pc, #24]	; (8008534 <_isatty_r+0x1c>)
 800851c:	2300      	movs	r3, #0
 800851e:	4604      	mov	r4, r0
 8008520:	4608      	mov	r0, r1
 8008522:	602b      	str	r3, [r5, #0]
 8008524:	f7f9 f823 	bl	800156e <_isatty>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d102      	bne.n	8008532 <_isatty_r+0x1a>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	b103      	cbz	r3, 8008532 <_isatty_r+0x1a>
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	bd38      	pop	{r3, r4, r5, pc}
 8008534:	2000034c 	.word	0x2000034c

08008538 <_raise_r>:
 8008538:	291f      	cmp	r1, #31
 800853a:	b538      	push	{r3, r4, r5, lr}
 800853c:	4604      	mov	r4, r0
 800853e:	460d      	mov	r5, r1
 8008540:	d904      	bls.n	800854c <_raise_r+0x14>
 8008542:	2316      	movs	r3, #22
 8008544:	6003      	str	r3, [r0, #0]
 8008546:	f04f 30ff 	mov.w	r0, #4294967295
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800854e:	b112      	cbz	r2, 8008556 <_raise_r+0x1e>
 8008550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008554:	b94b      	cbnz	r3, 800856a <_raise_r+0x32>
 8008556:	4620      	mov	r0, r4
 8008558:	f000 f830 	bl	80085bc <_getpid_r>
 800855c:	462a      	mov	r2, r5
 800855e:	4601      	mov	r1, r0
 8008560:	4620      	mov	r0, r4
 8008562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008566:	f000 b817 	b.w	8008598 <_kill_r>
 800856a:	2b01      	cmp	r3, #1
 800856c:	d00a      	beq.n	8008584 <_raise_r+0x4c>
 800856e:	1c59      	adds	r1, r3, #1
 8008570:	d103      	bne.n	800857a <_raise_r+0x42>
 8008572:	2316      	movs	r3, #22
 8008574:	6003      	str	r3, [r0, #0]
 8008576:	2001      	movs	r0, #1
 8008578:	e7e7      	b.n	800854a <_raise_r+0x12>
 800857a:	2400      	movs	r4, #0
 800857c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008580:	4628      	mov	r0, r5
 8008582:	4798      	blx	r3
 8008584:	2000      	movs	r0, #0
 8008586:	e7e0      	b.n	800854a <_raise_r+0x12>

08008588 <raise>:
 8008588:	4b02      	ldr	r3, [pc, #8]	; (8008594 <raise+0xc>)
 800858a:	4601      	mov	r1, r0
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	f7ff bfd3 	b.w	8008538 <_raise_r>
 8008592:	bf00      	nop
 8008594:	20000014 	.word	0x20000014

08008598 <_kill_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	4d07      	ldr	r5, [pc, #28]	; (80085b8 <_kill_r+0x20>)
 800859c:	2300      	movs	r3, #0
 800859e:	4604      	mov	r4, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	4611      	mov	r1, r2
 80085a4:	602b      	str	r3, [r5, #0]
 80085a6:	f7f8 ff8f 	bl	80014c8 <_kill>
 80085aa:	1c43      	adds	r3, r0, #1
 80085ac:	d102      	bne.n	80085b4 <_kill_r+0x1c>
 80085ae:	682b      	ldr	r3, [r5, #0]
 80085b0:	b103      	cbz	r3, 80085b4 <_kill_r+0x1c>
 80085b2:	6023      	str	r3, [r4, #0]
 80085b4:	bd38      	pop	{r3, r4, r5, pc}
 80085b6:	bf00      	nop
 80085b8:	2000034c 	.word	0x2000034c

080085bc <_getpid_r>:
 80085bc:	f7f8 bf7c 	b.w	80014b8 <_getpid>

080085c0 <_init>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	bf00      	nop
 80085c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c6:	bc08      	pop	{r3}
 80085c8:	469e      	mov	lr, r3
 80085ca:	4770      	bx	lr

080085cc <_fini>:
 80085cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ce:	bf00      	nop
 80085d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085d2:	bc08      	pop	{r3}
 80085d4:	469e      	mov	lr, r3
 80085d6:	4770      	bx	lr
