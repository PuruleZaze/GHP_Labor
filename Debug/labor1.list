
labor1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b74  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d40  08004d40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d40  08004d40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d40  08004d40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d44  08004d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000140  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd9c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c46  00000000  00000000  0002fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  00031a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ca8  00000000  00000000  00032770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000209d6  00000000  00000000  00033418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116ff  00000000  00000000  00053dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf0ee  00000000  00000000  000654ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001345db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003884  00000000  00000000  0013462c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004cf0 	.word	0x08004cf0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004cf0 	.word	0x08004cf0

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fb92 	bl	8000900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f812 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f9c2 	bl	8000568 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f990 	bl	8000508 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001e8:	f000 f870 	bl	80002cc <MX_ADC1_Init>
  MX_TIM1_Init();
 80001ec:	f000 f8de 	bl	80003ac <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80001f0:	2140      	movs	r1, #64	; 0x40
 80001f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f6:	f001 fcd3 	bl	8001ba0 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80001fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fe:	f000 fbe5 	bl	80009cc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000202:	e7f5      	b.n	80001f0 <main+0x1c>

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b0a6      	sub	sp, #152	; 0x98
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800020e:	2228      	movs	r2, #40	; 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f004 fd64 	bl	8004ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2258      	movs	r2, #88	; 0x58
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f004 fd56 	bl	8004ce0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000234:	2302      	movs	r3, #2
 8000236:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000238:	2301      	movs	r3, #1
 800023a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023c:	2310      	movs	r3, #16
 800023e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800024c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000250:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000254:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fcb6 	bl	8001bd4 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800026e:	f000 f9e1 	bl	8000634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	2302      	movs	r3, #2
 8000278:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000282:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000288:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800028c:	2102      	movs	r1, #2
 800028e:	4618      	mov	r0, r3
 8000290:	f002 fcf4 	bl	8002c7c <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800029a:	f000 f9cb 	bl	8000634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 800029e:	f241 0382 	movw	r3, #4226	; 0x1082
 80002a2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002ae:	2300      	movs	r3, #0
 80002b0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 ff17 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80002c0:	f000 f9b8 	bl	8000634 <Error_Handler>
  }
}
 80002c4:	bf00      	nop
 80002c6:	3798      	adds	r7, #152	; 0x98
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b08a      	sub	sp, #40	; 0x28
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002d2:	f107 031c 	add.w	r3, r7, #28
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
 80002ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ee:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MX_ADC1_Init+0xdc>)
 80002f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002f6:	4b2c      	ldr	r3, [pc, #176]	; (80003a8 <MX_ADC1_Init+0xdc>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002fc:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <MX_ADC1_Init+0xdc>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000302:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000308:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800030a:	2200      	movs	r2, #0
 800030c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800030e:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000310:	2200      	movs	r2, #0
 8000312:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000316:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000318:	2200      	movs	r2, #0
 800031a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800031e:	2201      	movs	r2, #1
 8000320:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000322:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000328:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800032a:	2201      	movs	r2, #1
 800032c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800032e:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000330:	2200      	movs	r2, #0
 8000332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000338:	2204      	movs	r2, #4
 800033a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800033e:	2200      	movs	r2, #0
 8000340:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000344:	2200      	movs	r2, #0
 8000346:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000348:	4817      	ldr	r0, [pc, #92]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800034a:	f000 fb63 	bl	8000a14 <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000354:	f000 f96e 	bl	8000634 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000358:	2300      	movs	r3, #0
 800035a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800035c:	f107 031c 	add.w	r3, r7, #28
 8000360:	4619      	mov	r1, r3
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000364:	f001 f83c 	bl	80013e0 <HAL_ADCEx_MultiModeConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800036e:	f000 f961 	bl	8000634 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000372:	2301      	movs	r3, #1
 8000374:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000376:	2301      	movs	r3, #1
 8000378:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000390:	f000 fd3a 	bl	8000e08 <HAL_ADC_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800039a:	f000 f94b 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	3728      	adds	r7, #40	; 0x28
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000028 	.word	0x20000028

080003ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b09a      	sub	sp, #104	; 0x68
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]
 80003d8:	60da      	str	r2, [r3, #12]
 80003da:	611a      	str	r2, [r3, #16]
 80003dc:	615a      	str	r2, [r3, #20]
 80003de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	222c      	movs	r2, #44	; 0x2c
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f004 fc7a 	bl	8004ce0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003ec:	4b44      	ldr	r3, [pc, #272]	; (8000500 <MX_TIM1_Init+0x154>)
 80003ee:	4a45      	ldr	r2, [pc, #276]	; (8000504 <MX_TIM1_Init+0x158>)
 80003f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 80003f2:	4b43      	ldr	r3, [pc, #268]	; (8000500 <MX_TIM1_Init+0x154>)
 80003f4:	2240      	movs	r2, #64	; 0x40
 80003f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f8:	4b41      	ldr	r3, [pc, #260]	; (8000500 <MX_TIM1_Init+0x154>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 80003fe:	4b40      	ldr	r3, [pc, #256]	; (8000500 <MX_TIM1_Init+0x154>)
 8000400:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000404:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000406:	4b3e      	ldr	r3, [pc, #248]	; (8000500 <MX_TIM1_Init+0x154>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800040c:	4b3c      	ldr	r3, [pc, #240]	; (8000500 <MX_TIM1_Init+0x154>)
 800040e:	2200      	movs	r2, #0
 8000410:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000412:	4b3b      	ldr	r3, [pc, #236]	; (8000500 <MX_TIM1_Init+0x154>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000418:	4839      	ldr	r0, [pc, #228]	; (8000500 <MX_TIM1_Init+0x154>)
 800041a:	f003 f883 	bl	8003524 <HAL_TIM_Base_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000424:	f000 f906 	bl	8000634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800042c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800042e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000432:	4619      	mov	r1, r3
 8000434:	4832      	ldr	r0, [pc, #200]	; (8000500 <MX_TIM1_Init+0x154>)
 8000436:	f003 fa41 	bl	80038bc <HAL_TIM_ConfigClockSource>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000440:	f000 f8f8 	bl	8000634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000444:	482e      	ldr	r0, [pc, #184]	; (8000500 <MX_TIM1_Init+0x154>)
 8000446:	f003 f8c4 	bl	80035d2 <HAL_TIM_PWM_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000450:	f000 f8f0 	bl	8000634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000454:	2300      	movs	r3, #0
 8000456:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000458:	2300      	movs	r3, #0
 800045a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045c:	2300      	movs	r3, #0
 800045e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000460:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000464:	4619      	mov	r1, r3
 8000466:	4826      	ldr	r0, [pc, #152]	; (8000500 <MX_TIM1_Init+0x154>)
 8000468:	f003 ff30 	bl	80042cc <HAL_TIMEx_MasterConfigSynchronization>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000472:	f000 f8df 	bl	8000634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000476:	2360      	movs	r3, #96	; 0x60
 8000478:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2048;
 800047a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800047e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000480:	2300      	movs	r3, #0
 8000482:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000484:	2300      	movs	r3, #0
 8000486:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000488:	2300      	movs	r3, #0
 800048a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800048c:	2300      	movs	r3, #0
 800048e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000490:	2300      	movs	r3, #0
 8000492:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000494:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000498:	2200      	movs	r2, #0
 800049a:	4619      	mov	r1, r3
 800049c:	4818      	ldr	r0, [pc, #96]	; (8000500 <MX_TIM1_Init+0x154>)
 800049e:	f003 f8f9 	bl	8003694 <HAL_TIM_PWM_ConfigChannel>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80004a8:	f000 f8c4 	bl	8000634 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004ca:	2300      	movs	r3, #0
 80004cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004d2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004d8:	2300      	movs	r3, #0
 80004da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	4619      	mov	r1, r3
 80004e0:	4807      	ldr	r0, [pc, #28]	; (8000500 <MX_TIM1_Init+0x154>)
 80004e2:	f003 ff7f 	bl	80043e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80004ec:	f000 f8a2 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004f0:	4803      	ldr	r0, [pc, #12]	; (8000500 <MX_TIM1_Init+0x154>)
 80004f2:	f000 f925 	bl	8000740 <HAL_TIM_MspPostInit>

}
 80004f6:	bf00      	nop
 80004f8:	3768      	adds	r7, #104	; 0x68
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000078 	.word	0x20000078
 8000504:	40012c00 	.word	0x40012c00

08000508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_USART2_UART_Init+0x58>)
 800050e:	4a15      	ldr	r2, [pc, #84]	; (8000564 <MX_USART2_UART_Init+0x5c>)
 8000510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_USART2_UART_Init+0x58>)
 8000514:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_USART2_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_USART2_UART_Init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_USART2_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_USART2_UART_Init+0x58>)
 800052e:	220c      	movs	r2, #12
 8000530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_USART2_UART_Init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_USART2_UART_Init+0x58>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_USART2_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_USART2_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_USART2_UART_Init+0x58>)
 800054c:	f003 ffd0 	bl	80044f0 <HAL_UART_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000556:	f000 f86d 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200000c4 	.word	0x200000c4
 8000564:	40004400 	.word	0x40004400

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4b2b      	ldr	r3, [pc, #172]	; (800062c <MX_GPIO_Init+0xc4>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a2a      	ldr	r2, [pc, #168]	; (800062c <MX_GPIO_Init+0xc4>)
 8000584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b28      	ldr	r3, [pc, #160]	; (800062c <MX_GPIO_Init+0xc4>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000596:	4b25      	ldr	r3, [pc, #148]	; (800062c <MX_GPIO_Init+0xc4>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a24      	ldr	r2, [pc, #144]	; (800062c <MX_GPIO_Init+0xc4>)
 800059c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b22      	ldr	r3, [pc, #136]	; (800062c <MX_GPIO_Init+0xc4>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_GPIO_Init+0xc4>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a1e      	ldr	r2, [pc, #120]	; (800062c <MX_GPIO_Init+0xc4>)
 80005b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_GPIO_Init+0xc4>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_GPIO_Init+0xc4>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a18      	ldr	r2, [pc, #96]	; (800062c <MX_GPIO_Init+0xc4>)
 80005cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <MX_GPIO_Init+0xc4>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2160      	movs	r1, #96	; 0x60
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f001 fac3 	bl	8001b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <MX_GPIO_Init+0xc8>)
 8000602:	f001 f92b 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8000606:	2360      	movs	r3, #96	; 0x60
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000620:	f001 f91c 	bl	800185c <HAL_GPIO_Init>

}
 8000624:	bf00      	nop
 8000626:	3728      	adds	r7, #40	; 0x28
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000
 8000630:	48000800 	.word	0x48000800

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000638:	b672      	cpsid	i
}
 800063a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063c:	e7fe      	b.n	800063c <Error_Handler+0x8>
	...

08000640 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_MspInit+0x44>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <HAL_MspInit+0x44>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6193      	str	r3, [r2, #24]
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_MspInit+0x44>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_MspInit+0x44>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	4a08      	ldr	r2, [pc, #32]	; (8000684 <HAL_MspInit+0x44>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	61d3      	str	r3, [r2, #28]
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_MspInit+0x44>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000676:	2007      	movs	r0, #7
 8000678:	f001 f8bc 	bl	80017f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006a8:	d124      	bne.n	80006f4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <HAL_ADC_MspInit+0x74>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a13      	ldr	r2, [pc, #76]	; (80006fc <HAL_ADC_MspInit+0x74>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <HAL_ADC_MspInit+0x74>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_ADC_MspInit+0x74>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <HAL_ADC_MspInit+0x74>)
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <HAL_ADC_MspInit+0x74>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006da:	2301      	movs	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	2303      	movs	r3, #3
 80006e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f001 f8b4 	bl	800185c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	; 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <HAL_TIM_Base_MspInit+0x38>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d10b      	bne.n	800072a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_TIM_Base_MspInit+0x3c>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <HAL_TIM_Base_MspInit+0x3c>)
 8000718:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800071c:	6193      	str	r3, [r2, #24]
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <HAL_TIM_Base_MspInit+0x3c>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40012c00 	.word	0x40012c00
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <HAL_TIM_MspPostInit+0x64>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d11b      	bne.n	800079a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <HAL_TIM_MspPostInit+0x68>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <HAL_TIM_MspPostInit+0x68>)
 8000768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_TIM_MspPostInit+0x68>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800077a:	2301      	movs	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800078a:	2302      	movs	r3, #2
 800078c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <HAL_TIM_MspPostInit+0x6c>)
 8000796:	f001 f861 	bl	800185c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800079a:	bf00      	nop
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40012c00 	.word	0x40012c00
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48000800 	.word	0x48000800

080007b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a17      	ldr	r2, [pc, #92]	; (800082c <HAL_UART_MspInit+0x7c>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d128      	bne.n	8000824 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <HAL_UART_MspInit+0x80>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	4a16      	ldr	r2, [pc, #88]	; (8000830 <HAL_UART_MspInit+0x80>)
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	61d3      	str	r3, [r2, #28]
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <HAL_UART_MspInit+0x80>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_UART_MspInit+0x80>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <HAL_UART_MspInit+0x80>)
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	6153      	str	r3, [r2, #20]
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_UART_MspInit+0x80>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000802:	230c      	movs	r3, #12
 8000804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000812:	2307      	movs	r3, #7
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f001 f81c 	bl	800185c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40004400 	.word	0x40004400
 8000830:	40021000 	.word	0x40021000

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <NMI_Handler+0x4>

0800083a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <MemManage_Handler+0x4>

08000846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler+0x4>

08000852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 f884 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <SystemInit+0x20>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <SystemInit+0x20>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b2:	490e      	ldr	r1, [pc, #56]	; (80008ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <LoopForever+0xe>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c8:	4c0b      	ldr	r4, [pc, #44]	; (80008f8 <LoopForever+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008d6:	f7ff ffd7 	bl	8000888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008da:	f004 f9dd 	bl	8004c98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008de:	f7ff fc79 	bl	80001d4 <main>

080008e2 <LoopForever>:

LoopForever:
    b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008f0:	08004d48 	.word	0x08004d48
  ldr r2, =_sbss
 80008f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008f8:	2000014c 	.word	0x2000014c

080008fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC1_2_IRQHandler>
	...

08000900 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_Init+0x28>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_Init+0x28>)
 800090a:	f043 0310 	orr.w	r3, r3, #16
 800090e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 ff6f 	bl	80017f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff fe90 	bl	8000640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40022000 	.word	0x40022000

0800092c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 ff79 	bl	8001842 <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 ff4f 	bl	800180a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000148 	.word	0x20000148

080009b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000148 	.word	0x20000148

080009cc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d4:	f7ff ffee 	bl	80009b4 <HAL_GetTick>
 80009d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e4:	d005      	beq.n	80009f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_Delay+0x44>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009f2:	bf00      	nop
 80009f4:	f7ff ffde 	bl	80009b4 <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d8f7      	bhi.n	80009f4 <HAL_Delay+0x28>
  {
  }
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008

08000a14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b09a      	sub	sp, #104	; 0x68
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000a22:	2300      	movs	r3, #0
 8000a24:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d101      	bne.n	8000a34 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e1e3      	b.n	8000dfc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	691b      	ldr	r3, [r3, #16]
 8000a38:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 0310 	and.w	r3, r3, #16
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d176      	bne.n	8000b34 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d152      	bne.n	8000af4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff fe0d 	bl	8000688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d13b      	bne.n	8000af4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f000 fda1 	bl	80015c4 <ADC_Disable>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d12f      	bne.n	8000af4 <HAL_ADC_Init+0xe0>
 8000a94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d12b      	bne.n	8000af4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000aa4:	f023 0302 	bic.w	r3, r3, #2
 8000aa8:	f043 0202 	orr.w	r2, r3, #2
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000abe:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ace:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ad0:	4b92      	ldr	r3, [pc, #584]	; (8000d1c <HAL_ADC_Init+0x308>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a92      	ldr	r2, [pc, #584]	; (8000d20 <HAL_ADC_Init+0x30c>)
 8000ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ada:	0c9a      	lsrs	r2, r3, #18
 8000adc:	4613      	mov	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ae6:	e002      	b.n	8000aee <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1f9      	bne.n	8000ae8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d007      	beq.n	8000b12 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b10:	d110      	bne.n	8000b34 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f023 0312 	bic.w	r3, r3, #18
 8000b1a:	f043 0210 	orr.w	r2, r3, #16
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f043 0201 	orr.w	r2, r3, #1
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	f003 0310 	and.w	r3, r3, #16
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f040 8150 	bne.w	8000de2 <HAL_ADC_Init+0x3ce>
 8000b42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f040 814b 	bne.w	8000de2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f040 8143 	bne.w	8000de2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b64:	f043 0202 	orr.w	r2, r3, #2
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b74:	d004      	beq.n	8000b80 <HAL_ADC_Init+0x16c>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a6a      	ldr	r2, [pc, #424]	; (8000d24 <HAL_ADC_Init+0x310>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d101      	bne.n	8000b84 <HAL_ADC_Init+0x170>
 8000b80:	4b69      	ldr	r3, [pc, #420]	; (8000d28 <HAL_ADC_Init+0x314>)
 8000b82:	e000      	b.n	8000b86 <HAL_ADC_Init+0x172>
 8000b84:	4b69      	ldr	r3, [pc, #420]	; (8000d2c <HAL_ADC_Init+0x318>)
 8000b86:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b90:	d102      	bne.n	8000b98 <HAL_ADC_Init+0x184>
 8000b92:	4b64      	ldr	r3, [pc, #400]	; (8000d24 <HAL_ADC_Init+0x310>)
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	e01a      	b.n	8000bce <HAL_ADC_Init+0x1ba>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a61      	ldr	r2, [pc, #388]	; (8000d24 <HAL_ADC_Init+0x310>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d103      	bne.n	8000baa <HAL_ADC_Init+0x196>
 8000ba2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	e011      	b.n	8000bce <HAL_ADC_Init+0x1ba>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a60      	ldr	r2, [pc, #384]	; (8000d30 <HAL_ADC_Init+0x31c>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d102      	bne.n	8000bba <HAL_ADC_Init+0x1a6>
 8000bb4:	4b5f      	ldr	r3, [pc, #380]	; (8000d34 <HAL_ADC_Init+0x320>)
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	e009      	b.n	8000bce <HAL_ADC_Init+0x1ba>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a5d      	ldr	r2, [pc, #372]	; (8000d34 <HAL_ADC_Init+0x320>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d102      	bne.n	8000bca <HAL_ADC_Init+0x1b6>
 8000bc4:	4b5a      	ldr	r3, [pc, #360]	; (8000d30 <HAL_ADC_Init+0x31c>)
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	e001      	b.n	8000bce <HAL_ADC_Init+0x1ba>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d108      	bne.n	8000bee <HAL_ADC_Init+0x1da>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d101      	bne.n	8000bee <HAL_ADC_Init+0x1da>
 8000bea:	2301      	movs	r3, #1
 8000bec:	e000      	b.n	8000bf0 <HAL_ADC_Init+0x1dc>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d11c      	bne.n	8000c2e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d010      	beq.n	8000c1c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d107      	bne.n	8000c16 <HAL_ADC_Init+0x202>
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d101      	bne.n	8000c16 <HAL_ADC_Init+0x202>
 8000c12:	2301      	movs	r3, #1
 8000c14:	e000      	b.n	8000c18 <HAL_ADC_Init+0x204>
 8000c16:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d108      	bne.n	8000c2e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c2c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7e5b      	ldrb	r3, [r3, #25]
 8000c32:	035b      	lsls	r3, r3, #13
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c38:	2a01      	cmp	r2, #1
 8000c3a:	d002      	beq.n	8000c42 <HAL_ADC_Init+0x22e>
 8000c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c40:	e000      	b.n	8000c44 <HAL_ADC_Init+0x230>
 8000c42:	2200      	movs	r2, #0
 8000c44:	431a      	orrs	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c54:	4313      	orrs	r3, r2
 8000c56:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d11b      	bne.n	8000c9a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7e5b      	ldrb	r3, [r3, #25]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d109      	bne.n	8000c7e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	045a      	lsls	r2, r3, #17
 8000c72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c74:	4313      	orrs	r3, r2
 8000c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c7a:	663b      	str	r3, [r7, #96]	; 0x60
 8000c7c:	e00d      	b.n	8000c9a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000c86:	f043 0220 	orr.w	r2, r3, #32
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f043 0201 	orr.w	r2, r3, #1
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d054      	beq.n	8000d4c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <HAL_ADC_Init+0x31c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d004      	beq.n	8000cb6 <HAL_ADC_Init+0x2a2>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a20      	ldr	r2, [pc, #128]	; (8000d34 <HAL_ADC_Init+0x320>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d140      	bne.n	8000d38 <HAL_ADC_Init+0x324>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cba:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000cbe:	d02a      	beq.n	8000d16 <HAL_ADC_Init+0x302>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cc8:	d022      	beq.n	8000d10 <HAL_ADC_Init+0x2fc>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cce:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000cd2:	d01a      	beq.n	8000d0a <HAL_ADC_Init+0x2f6>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000cdc:	d012      	beq.n	8000d04 <HAL_ADC_Init+0x2f0>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000ce6:	d00a      	beq.n	8000cfe <HAL_ADC_Init+0x2ea>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cec:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000cf0:	d002      	beq.n	8000cf8 <HAL_ADC_Init+0x2e4>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf6:	e023      	b.n	8000d40 <HAL_ADC_Init+0x32c>
 8000cf8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cfc:	e020      	b.n	8000d40 <HAL_ADC_Init+0x32c>
 8000cfe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d02:	e01d      	b.n	8000d40 <HAL_ADC_Init+0x32c>
 8000d04:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000d08:	e01a      	b.n	8000d40 <HAL_ADC_Init+0x32c>
 8000d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d0e:	e017      	b.n	8000d40 <HAL_ADC_Init+0x32c>
 8000d10:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000d14:	e014      	b.n	8000d40 <HAL_ADC_Init+0x32c>
 8000d16:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000d1a:	e011      	b.n	8000d40 <HAL_ADC_Init+0x32c>
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	431bde83 	.word	0x431bde83
 8000d24:	50000100 	.word	0x50000100
 8000d28:	50000300 	.word	0x50000300
 8000d2c:	50000700 	.word	0x50000700
 8000d30:	50000400 	.word	0x50000400
 8000d34:	50000500 	.word	0x50000500
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d44:	4313      	orrs	r3, r2
 8000d46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d114      	bne.n	8000d84 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6812      	ldr	r2, [r2, #0]
 8000d64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d68:	f023 0302 	bic.w	r3, r3, #2
 8000d6c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7e1b      	ldrb	r3, [r3, #24]
 8000d72:	039a      	lsls	r2, r3, #14
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d80:	4313      	orrs	r3, r2
 8000d82:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <HAL_ADC_Init+0x3f0>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	6812      	ldr	r2, [r2, #0]
 8000d92:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000d94:	430b      	orrs	r3, r1
 8000d96:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d10c      	bne.n	8000dba <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f023 010f 	bic.w	r1, r3, #15
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	1e5a      	subs	r2, r3, #1
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	430a      	orrs	r2, r1
 8000db6:	631a      	str	r2, [r3, #48]	; 0x30
 8000db8:	e007      	b.n	8000dca <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 020f 	bic.w	r2, r2, #15
 8000dc8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f023 0303 	bic.w	r3, r3, #3
 8000dd8:	f043 0201 	orr.w	r2, r3, #1
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	641a      	str	r2, [r3, #64]	; 0x40
 8000de0:	e00a      	b.n	8000df8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f023 0312 	bic.w	r3, r3, #18
 8000dea:	f043 0210 	orr.w	r2, r3, #16
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000df2:	2301      	movs	r3, #1
 8000df4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000df8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3768      	adds	r7, #104	; 0x68
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	fff0c007 	.word	0xfff0c007

08000e08 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b09b      	sub	sp, #108	; 0x6c
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d101      	bne.n	8000e2a <HAL_ADC_ConfigChannel+0x22>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e2ca      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x5b8>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f040 82ae 	bne.w	800139e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d81c      	bhi.n	8000e84 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	4613      	mov	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	231f      	movs	r3, #31
 8000e60:	4093      	lsls	r3, r2
 8000e62:	43db      	mvns	r3, r3
 8000e64:	4019      	ands	r1, r3
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	6818      	ldr	r0, [r3, #0]
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa00 f203 	lsl.w	r2, r0, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	631a      	str	r2, [r3, #48]	; 0x30
 8000e82:	e063      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b09      	cmp	r3, #9
 8000e8a:	d81e      	bhi.n	8000eca <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	3b1e      	subs	r3, #30
 8000ea0:	221f      	movs	r2, #31
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	4019      	ands	r1, r3
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	6818      	ldr	r0, [r3, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	3b1e      	subs	r3, #30
 8000ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ec8:	e040      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b0e      	cmp	r3, #14
 8000ed0:	d81e      	bhi.n	8000f10 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	3b3c      	subs	r3, #60	; 0x3c
 8000ee6:	221f      	movs	r2, #31
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4019      	ands	r1, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	3b3c      	subs	r3, #60	; 0x3c
 8000f02:	fa00 f203 	lsl.w	r2, r0, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f0e:	e01d      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	3b5a      	subs	r3, #90	; 0x5a
 8000f24:	221f      	movs	r2, #31
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	4019      	ands	r1, r3
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	3b5a      	subs	r3, #90	; 0x5a
 8000f40:	fa00 f203 	lsl.w	r2, r0, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f040 80e5 	bne.w	8001126 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b09      	cmp	r3, #9
 8000f62:	d91c      	bls.n	8000f9e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6999      	ldr	r1, [r3, #24]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	3b1e      	subs	r3, #30
 8000f76:	2207      	movs	r2, #7
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	4019      	ands	r1, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	6898      	ldr	r0, [r3, #8]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3b1e      	subs	r3, #30
 8000f90:	fa00 f203 	lsl.w	r2, r0, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	619a      	str	r2, [r3, #24]
 8000f9c:	e019      	b.n	8000fd2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6959      	ldr	r1, [r3, #20]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	2207      	movs	r2, #7
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4019      	ands	r1, r3
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	6898      	ldr	r0, [r3, #8]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	08db      	lsrs	r3, r3, #3
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d84f      	bhi.n	8001094 <HAL_ADC_ConfigChannel+0x28c>
 8000ff4:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <HAL_ADC_ConfigChannel+0x1f4>)
 8000ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffa:	bf00      	nop
 8000ffc:	0800100d 	.word	0x0800100d
 8001000:	0800102f 	.word	0x0800102f
 8001004:	08001051 	.word	0x08001051
 8001008:	08001073 	.word	0x08001073
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001012:	4b9a      	ldr	r3, [pc, #616]	; (800127c <HAL_ADC_ConfigChannel+0x474>)
 8001014:	4013      	ands	r3, r2
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	6812      	ldr	r2, [r2, #0]
 800101a:	0691      	lsls	r1, r2, #26
 800101c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800101e:	430a      	orrs	r2, r1
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800102a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800102c:	e07e      	b.n	800112c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001034:	4b91      	ldr	r3, [pc, #580]	; (800127c <HAL_ADC_ConfigChannel+0x474>)
 8001036:	4013      	ands	r3, r2
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	0691      	lsls	r1, r2, #26
 800103e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001040:	430a      	orrs	r2, r1
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800104c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800104e:	e06d      	b.n	800112c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001056:	4b89      	ldr	r3, [pc, #548]	; (800127c <HAL_ADC_ConfigChannel+0x474>)
 8001058:	4013      	ands	r3, r2
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	0691      	lsls	r1, r2, #26
 8001060:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001062:	430a      	orrs	r2, r1
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800106e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001070:	e05c      	b.n	800112c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001078:	4b80      	ldr	r3, [pc, #512]	; (800127c <HAL_ADC_ConfigChannel+0x474>)
 800107a:	4013      	ands	r3, r2
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	0691      	lsls	r1, r2, #26
 8001082:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001084:	430a      	orrs	r2, r1
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001090:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001092:	e04b      	b.n	800112c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	069b      	lsls	r3, r3, #26
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d107      	bne.n	80010b8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010b6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	069b      	lsls	r3, r3, #26
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d107      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010da:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	069b      	lsls	r3, r3, #26
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d107      	bne.n	8001100 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010fe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001106:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	069b      	lsls	r3, r3, #26
 8001110:	429a      	cmp	r2, r3
 8001112:	d10a      	bne.n	800112a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001122:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001124:	e001      	b.n	800112a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001126:	bf00      	nop
 8001128:	e000      	b.n	800112c <HAL_ADC_ConfigChannel+0x324>
      break;
 800112a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d108      	bne.n	800114c <HAL_ADC_ConfigChannel+0x344>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_ADC_ConfigChannel+0x344>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <HAL_ADC_ConfigChannel+0x346>
 800114c:	2300      	movs	r3, #0
 800114e:	2b00      	cmp	r3, #0
 8001150:	f040 8130 	bne.w	80013b4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d00f      	beq.n	800117c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2201      	movs	r2, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	400a      	ands	r2, r1
 8001176:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800117a:	e049      	b.n	8001210 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2201      	movs	r2, #1
 800118a:	409a      	lsls	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b09      	cmp	r3, #9
 800119c:	d91c      	bls.n	80011d8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6999      	ldr	r1, [r3, #24]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	3b1b      	subs	r3, #27
 80011b0:	2207      	movs	r2, #7
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4019      	ands	r1, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	6898      	ldr	r0, [r3, #8]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	3b1b      	subs	r3, #27
 80011ca:	fa00 f203 	lsl.w	r2, r0, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	619a      	str	r2, [r3, #24]
 80011d6:	e01b      	b.n	8001210 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6959      	ldr	r1, [r3, #20]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	2207      	movs	r2, #7
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	4019      	ands	r1, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6898      	ldr	r0, [r3, #8]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	fa00 f203 	lsl.w	r2, r0, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001218:	d004      	beq.n	8001224 <HAL_ADC_ConfigChannel+0x41c>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a18      	ldr	r2, [pc, #96]	; (8001280 <HAL_ADC_ConfigChannel+0x478>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d101      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x420>
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <HAL_ADC_ConfigChannel+0x47c>)
 8001226:	e000      	b.n	800122a <HAL_ADC_ConfigChannel+0x422>
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_ADC_ConfigChannel+0x480>)
 800122a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b10      	cmp	r3, #16
 8001232:	d105      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800123c:	2b00      	cmp	r3, #0
 800123e:	d015      	beq.n	800126c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001244:	2b11      	cmp	r3, #17
 8001246:	d105      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00b      	beq.n	800126c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001258:	2b12      	cmp	r3, #18
 800125a:	f040 80ab 	bne.w	80013b4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800125e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001266:	2b00      	cmp	r3, #0
 8001268:	f040 80a4 	bne.w	80013b4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001274:	d10a      	bne.n	800128c <HAL_ADC_ConfigChannel+0x484>
 8001276:	4b02      	ldr	r3, [pc, #8]	; (8001280 <HAL_ADC_ConfigChannel+0x478>)
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e022      	b.n	80012c2 <HAL_ADC_ConfigChannel+0x4ba>
 800127c:	83fff000 	.word	0x83fff000
 8001280:	50000100 	.word	0x50000100
 8001284:	50000300 	.word	0x50000300
 8001288:	50000700 	.word	0x50000700
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a4e      	ldr	r2, [pc, #312]	; (80013cc <HAL_ADC_ConfigChannel+0x5c4>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d103      	bne.n	800129e <HAL_ADC_ConfigChannel+0x496>
 8001296:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	e011      	b.n	80012c2 <HAL_ADC_ConfigChannel+0x4ba>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a4b      	ldr	r2, [pc, #300]	; (80013d0 <HAL_ADC_ConfigChannel+0x5c8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d102      	bne.n	80012ae <HAL_ADC_ConfigChannel+0x4a6>
 80012a8:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <HAL_ADC_ConfigChannel+0x5cc>)
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e009      	b.n	80012c2 <HAL_ADC_ConfigChannel+0x4ba>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a48      	ldr	r2, [pc, #288]	; (80013d4 <HAL_ADC_ConfigChannel+0x5cc>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d102      	bne.n	80012be <HAL_ADC_ConfigChannel+0x4b6>
 80012b8:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <HAL_ADC_ConfigChannel+0x5c8>)
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	e001      	b.n	80012c2 <HAL_ADC_ConfigChannel+0x4ba>
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d108      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x4da>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x4da>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x4dc>
 80012e2:	2300      	movs	r3, #0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d150      	bne.n	800138a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012e8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d010      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_ADC_ConfigChannel+0x502>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_ADC_ConfigChannel+0x502>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_ADC_ConfigChannel+0x504>
 800130a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800130c:	2b00      	cmp	r3, #0
 800130e:	d13c      	bne.n	800138a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b10      	cmp	r3, #16
 8001316:	d11d      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x54c>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001320:	d118      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800132a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800132e:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <HAL_ADC_ConfigChannel+0x5d0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a2a      	ldr	r2, [pc, #168]	; (80013dc <HAL_ADC_ConfigChannel+0x5d4>)
 8001334:	fba2 2303 	umull	r2, r3, r2, r3
 8001338:	0c9a      	lsrs	r2, r3, #18
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001344:	e002      	b.n	800134c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	3b01      	subs	r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f9      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001352:	e02e      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b11      	cmp	r3, #17
 800135a:	d10b      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x56c>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001364:	d106      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800136e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001370:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001372:	e01e      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b12      	cmp	r3, #18
 800137a:	d11a      	bne.n	80013b2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800137c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001386:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001388:	e013      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f043 0220 	orr.w	r2, r3, #32
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800139c:	e00a      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f043 0220 	orr.w	r2, r3, #32
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80013b0:	e000      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013b2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80013bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	376c      	adds	r7, #108	; 0x6c
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	50000100 	.word	0x50000100
 80013d0:	50000400 	.word	0x50000400
 80013d4:	50000500 	.word	0x50000500
 80013d8:	20000000 	.word	0x20000000
 80013dc:	431bde83 	.word	0x431bde83

080013e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b099      	sub	sp, #100	; 0x64
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013f8:	d102      	bne.n	8001400 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80013fa:	4b6d      	ldr	r3, [pc, #436]	; (80015b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	e01a      	b.n	8001436 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a6a      	ldr	r2, [pc, #424]	; (80015b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d103      	bne.n	8001412 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800140a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	e011      	b.n	8001436 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a67      	ldr	r2, [pc, #412]	; (80015b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d102      	bne.n	8001422 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800141c:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	e009      	b.n	8001436 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a64      	ldr	r2, [pc, #400]	; (80015b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d102      	bne.n	8001432 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800142c:	4b61      	ldr	r3, [pc, #388]	; (80015b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	e001      	b.n	8001436 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0b0      	b.n	80015a2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800144a:	2302      	movs	r3, #2
 800144c:	e0a9      	b.n	80015a2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	f040 808d 	bne.w	8001580 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	2b00      	cmp	r3, #0
 8001470:	f040 8086 	bne.w	8001580 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800147c:	d004      	beq.n	8001488 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a4b      	ldr	r2, [pc, #300]	; (80015b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d101      	bne.n	800148c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001488:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800148a:	e000      	b.n	800148e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800148c:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800148e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d040      	beq.n	800151a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014aa:	035b      	lsls	r3, r3, #13
 80014ac:	430b      	orrs	r3, r1
 80014ae:	431a      	orrs	r2, r3
 80014b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014b2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d108      	bne.n	80014d4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80014d4:	2300      	movs	r3, #0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d15c      	bne.n	8001594 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d107      	bne.n	80014f6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80014f6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d14b      	bne.n	8001594 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80014fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001504:	f023 030f 	bic.w	r3, r3, #15
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	6811      	ldr	r1, [r2, #0]
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	6892      	ldr	r2, [r2, #8]
 8001510:	430a      	orrs	r2, r1
 8001512:	431a      	orrs	r2, r3
 8001514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001516:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001518:	e03c      	b.n	8001594 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800151a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001524:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b01      	cmp	r3, #1
 8001532:	d108      	bne.n	8001546 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001546:	2300      	movs	r3, #0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d123      	bne.n	8001594 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d107      	bne.n	8001568 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001568:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800156a:	2b00      	cmp	r3, #0
 800156c:	d112      	bne.n	8001594 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800156e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001576:	f023 030f 	bic.w	r3, r3, #15
 800157a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800157c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800157e:	e009      	b.n	8001594 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f043 0220 	orr.w	r2, r3, #32
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001592:	e000      	b.n	8001596 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001594:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800159e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80015a2:	4618      	mov	r0, r3
 80015a4:	3764      	adds	r7, #100	; 0x64
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	50000100 	.word	0x50000100
 80015b4:	50000400 	.word	0x50000400
 80015b8:	50000500 	.word	0x50000500
 80015bc:	50000300 	.word	0x50000300
 80015c0:	50000700 	.word	0x50000700

080015c4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d108      	bne.n	80015f0 <ADC_Disable+0x2c>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <ADC_Disable+0x2c>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <ADC_Disable+0x2e>
 80015f0:	2300      	movs	r3, #0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d047      	beq.n	8001686 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 030d 	and.w	r3, r3, #13
 8001600:	2b01      	cmp	r3, #1
 8001602:	d10f      	bne.n	8001624 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0202 	orr.w	r2, r2, #2
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2203      	movs	r2, #3
 800161a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800161c:	f7ff f9ca 	bl	80009b4 <HAL_GetTick>
 8001620:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001622:	e029      	b.n	8001678 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f043 0210 	orr.w	r2, r3, #16
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f043 0201 	orr.w	r2, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e023      	b.n	8001688 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001640:	f7ff f9b8 	bl	80009b4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d914      	bls.n	8001678 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b01      	cmp	r3, #1
 800165a:	d10d      	bne.n	8001678 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f043 0210 	orr.w	r2, r3, #16
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166c:	f043 0201 	orr.w	r2, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e007      	b.n	8001688 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b01      	cmp	r3, #1
 8001684:	d0dc      	beq.n	8001640 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ac:	4013      	ands	r3, r2
 80016ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c2:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	60d3      	str	r3, [r2, #12]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <__NVIC_GetPriorityGrouping+0x18>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	f003 0307 	and.w	r3, r3, #7
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db0a      	blt.n	800171e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	490c      	ldr	r1, [pc, #48]	; (8001740 <__NVIC_SetPriority+0x4c>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	440b      	add	r3, r1
 8001718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800171c:	e00a      	b.n	8001734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4908      	ldr	r1, [pc, #32]	; (8001744 <__NVIC_SetPriority+0x50>)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	3b04      	subs	r3, #4
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	440b      	add	r3, r1
 8001732:	761a      	strb	r2, [r3, #24]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f1c3 0307 	rsb	r3, r3, #7
 8001762:	2b04      	cmp	r3, #4
 8001764:	bf28      	it	cs
 8001766:	2304      	movcs	r3, #4
 8001768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3304      	adds	r3, #4
 800176e:	2b06      	cmp	r3, #6
 8001770:	d902      	bls.n	8001778 <NVIC_EncodePriority+0x30>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3b03      	subs	r3, #3
 8001776:	e000      	b.n	800177a <NVIC_EncodePriority+0x32>
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43d9      	mvns	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	4313      	orrs	r3, r2
         );
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c0:	d301      	bcc.n	80017c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00f      	b.n	80017e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <SysTick_Config+0x40>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ce:	210f      	movs	r1, #15
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f7ff ff8e 	bl	80016f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <SysTick_Config+0x40>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <SysTick_Config+0x40>)
 80017e0:	2207      	movs	r2, #7
 80017e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	e000e010 	.word	0xe000e010

080017f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff47 	bl	8001690 <__NVIC_SetPriorityGrouping>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800181c:	f7ff ff5c 	bl	80016d8 <__NVIC_GetPriorityGrouping>
 8001820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	6978      	ldr	r0, [r7, #20]
 8001828:	f7ff ff8e 	bl	8001748 <NVIC_EncodePriority>
 800182c:	4602      	mov	r2, r0
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff5d 	bl	80016f4 <__NVIC_SetPriority>
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffb0 	bl	80017b0 <SysTick_Config>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186a:	e160      	b.n	8001b2e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2101      	movs	r1, #1
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8152 	beq.w	8001b28 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d005      	beq.n	800189c <HAL_GPIO_Init+0x40>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d130      	bne.n	80018fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d2:	2201      	movs	r2, #1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	f003 0201 	and.w	r2, r3, #1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b03      	cmp	r3, #3
 8001908:	d017      	beq.n	800193a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d123      	bne.n	800198e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	08da      	lsrs	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3208      	adds	r2, #8
 800194e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	220f      	movs	r2, #15
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	6939      	ldr	r1, [r7, #16]
 800198a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	2203      	movs	r2, #3
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0203 	and.w	r2, r3, #3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 80ac 	beq.w	8001b28 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d0:	4b5e      	ldr	r3, [pc, #376]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a5d      	ldr	r2, [pc, #372]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b5b      	ldr	r3, [pc, #364]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019e8:	4a59      	ldr	r2, [pc, #356]	; (8001b50 <HAL_GPIO_Init+0x2f4>)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a12:	d025      	beq.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4f      	ldr	r2, [pc, #316]	; (8001b54 <HAL_GPIO_Init+0x2f8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d01f      	beq.n	8001a5c <HAL_GPIO_Init+0x200>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a4e      	ldr	r2, [pc, #312]	; (8001b58 <HAL_GPIO_Init+0x2fc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d019      	beq.n	8001a58 <HAL_GPIO_Init+0x1fc>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a4d      	ldr	r2, [pc, #308]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d013      	beq.n	8001a54 <HAL_GPIO_Init+0x1f8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a4c      	ldr	r2, [pc, #304]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d00d      	beq.n	8001a50 <HAL_GPIO_Init+0x1f4>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a4b      	ldr	r2, [pc, #300]	; (8001b64 <HAL_GPIO_Init+0x308>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d007      	beq.n	8001a4c <HAL_GPIO_Init+0x1f0>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a4a      	ldr	r2, [pc, #296]	; (8001b68 <HAL_GPIO_Init+0x30c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d101      	bne.n	8001a48 <HAL_GPIO_Init+0x1ec>
 8001a44:	2306      	movs	r3, #6
 8001a46:	e00c      	b.n	8001a62 <HAL_GPIO_Init+0x206>
 8001a48:	2307      	movs	r3, #7
 8001a4a:	e00a      	b.n	8001a62 <HAL_GPIO_Init+0x206>
 8001a4c:	2305      	movs	r3, #5
 8001a4e:	e008      	b.n	8001a62 <HAL_GPIO_Init+0x206>
 8001a50:	2304      	movs	r3, #4
 8001a52:	e006      	b.n	8001a62 <HAL_GPIO_Init+0x206>
 8001a54:	2303      	movs	r3, #3
 8001a56:	e004      	b.n	8001a62 <HAL_GPIO_Init+0x206>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e002      	b.n	8001a62 <HAL_GPIO_Init+0x206>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <HAL_GPIO_Init+0x206>
 8001a60:	2300      	movs	r3, #0
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	f002 0203 	and.w	r2, r2, #3
 8001a68:	0092      	lsls	r2, r2, #2
 8001a6a:	4093      	lsls	r3, r2
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a72:	4937      	ldr	r1, [pc, #220]	; (8001b50 <HAL_GPIO_Init+0x2f4>)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a80:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <HAL_GPIO_Init+0x310>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aa4:	4a31      	ldr	r2, [pc, #196]	; (8001b6c <HAL_GPIO_Init+0x310>)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001aaa:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <HAL_GPIO_Init+0x310>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ace:	4a27      	ldr	r2, [pc, #156]	; (8001b6c <HAL_GPIO_Init+0x310>)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <HAL_GPIO_Init+0x310>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001af8:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <HAL_GPIO_Init+0x310>)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_GPIO_Init+0x310>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <HAL_GPIO_Init+0x310>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f47f ae97 	bne.w	800186c <HAL_GPIO_Init+0x10>
  }
}
 8001b3e:	bf00      	nop
 8001b40:	bf00      	nop
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	48000400 	.word	0x48000400
 8001b58:	48000800 	.word	0x48000800
 8001b5c:	48000c00 	.word	0x48000c00
 8001b60:	48001000 	.word	0x48001000
 8001b64:	48001400 	.word	0x48001400
 8001b68:	48001800 	.word	0x48001800
 8001b6c:	40010400 	.word	0x40010400

08001b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b80:	787b      	ldrb	r3, [r7, #1]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b8c:	e002      	b.n	8001b94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	041a      	lsls	r2, r3, #16
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	43d9      	mvns	r1, r3
 8001bbe:	887b      	ldrh	r3, [r7, #2]
 8001bc0:	400b      	ands	r3, r1
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001be4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f001 b83a 	b.w	8002c6e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 816f 	beq.w	8001eee <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c10:	4bb5      	ldr	r3, [pc, #724]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d00c      	beq.n	8001c36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c1c:	4bb2      	ldr	r3, [pc, #712]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d15c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x10e>
 8001c28:	4baf      	ldr	r3, [pc, #700]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d155      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x10e>
 8001c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c3a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	095b      	lsrs	r3, r3, #5
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d102      	bne.n	8001c68 <HAL_RCC_OscConfig+0x94>
 8001c62:	4ba1      	ldr	r3, [pc, #644]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	e015      	b.n	8001c94 <HAL_RCC_OscConfig+0xc0>
 8001c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c6c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c80:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c84:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c90:	4b95      	ldr	r3, [pc, #596]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c98:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001c9c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001ca0:	fa92 f2a2 	rbit	r2, r2
 8001ca4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001ca8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001cac:	fab2 f282 	clz	r2, r2
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	f042 0220 	orr.w	r2, r2, #32
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	f002 021f 	and.w	r2, r2, #31
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 8111 	beq.w	8001eec <HAL_RCC_OscConfig+0x318>
 8001cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 8108 	bne.w	8001eec <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f000 bfc6 	b.w	8002c6e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x12e>
 8001cf4:	4b7c      	ldr	r3, [pc, #496]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a7b      	ldr	r2, [pc, #492]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e036      	b.n	8001d70 <HAL_RCC_OscConfig+0x19c>
 8001d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x158>
 8001d12:	4b75      	ldr	r3, [pc, #468]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a74      	ldr	r2, [pc, #464]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b72      	ldr	r3, [pc, #456]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a71      	ldr	r2, [pc, #452]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e021      	b.n	8001d70 <HAL_RCC_OscConfig+0x19c>
 8001d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x184>
 8001d3e:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a69      	ldr	r2, [pc, #420]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b67      	ldr	r3, [pc, #412]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a66      	ldr	r2, [pc, #408]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0x19c>
 8001d58:	4b63      	ldr	r3, [pc, #396]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a62      	ldr	r2, [pc, #392]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b60      	ldr	r3, [pc, #384]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5f      	ldr	r2, [pc, #380]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d059      	beq.n	8001e34 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7fe fe18 	bl	80009b4 <HAL_GetTick>
 8001d84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d8a:	f7fe fe13 	bl	80009b4 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d902      	bls.n	8001da0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	f000 bf67 	b.w	8002c6e <HAL_RCC_OscConfig+0x109a>
 8001da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001db4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x1fe>
 8001dcc:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	e015      	b.n	8001dfe <HAL_RCC_OscConfig+0x22a>
 8001dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001de6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001dee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e02:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001e06:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001e0a:	fa92 f2a2 	rbit	r2, r2
 8001e0e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001e12:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e16:	fab2 f282 	clz	r2, r2
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	f042 0220 	orr.w	r2, r2, #32
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	f002 021f 	and.w	r2, r2, #31
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0ab      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1b6>
 8001e32:	e05c      	b.n	8001eee <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7fe fdbe 	bl	80009b4 <HAL_GetTick>
 8001e38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e3e:	f7fe fdb9 	bl	80009b4 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d902      	bls.n	8001e54 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f000 bf0d 	b.w	8002c6e <HAL_RCC_OscConfig+0x109a>
 8001e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e58:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001e68:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_OscConfig+0x2b2>
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	e015      	b.n	8001eb2 <HAL_RCC_OscConfig+0x2de>
 8001e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e9e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001ea2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_RCC_OscConfig+0x314>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eb6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001eba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001ebe:	fa92 f2a2 	rbit	r2, r2
 8001ec2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001ec6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001eca:	fab2 f282 	clz	r2, r2
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f042 0220 	orr.w	r2, r2, #32
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	f002 021f 	and.w	r2, r2, #31
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ab      	bne.n	8001e3e <HAL_RCC_OscConfig+0x26a>
 8001ee6:	e002      	b.n	8001eee <HAL_RCC_OscConfig+0x31a>
 8001ee8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 817f 	beq.w	8002202 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f04:	4ba7      	ldr	r3, [pc, #668]	; (80021a4 <HAL_RCC_OscConfig+0x5d0>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f10:	4ba4      	ldr	r3, [pc, #656]	; (80021a4 <HAL_RCC_OscConfig+0x5d0>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d173      	bne.n	8002004 <HAL_RCC_OscConfig+0x430>
 8001f1c:	4ba1      	ldr	r3, [pc, #644]	; (80021a4 <HAL_RCC_OscConfig+0x5d0>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f28:	d16c      	bne.n	8002004 <HAL_RCC_OscConfig+0x430>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001f3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d102      	bne.n	8001f5a <HAL_RCC_OscConfig+0x386>
 8001f54:	4b93      	ldr	r3, [pc, #588]	; (80021a4 <HAL_RCC_OscConfig+0x5d0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	e013      	b.n	8001f82 <HAL_RCC_OscConfig+0x3ae>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f72:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f7e:	4b89      	ldr	r3, [pc, #548]	; (80021a4 <HAL_RCC_OscConfig+0x5d0>)
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	2202      	movs	r2, #2
 8001f84:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001f88:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001f8c:	fa92 f2a2 	rbit	r2, r2
 8001f90:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001f94:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f98:	fab2 f282 	clz	r2, r2
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	f042 0220 	orr.w	r2, r2, #32
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f002 021f 	and.w	r2, r2, #31
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f202 	lsl.w	r2, r1, r2
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCC_OscConfig+0x3f6>
 8001fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d002      	beq.n	8001fca <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f000 be52 	b.w	8002c6e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x5d0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	21f8      	movs	r1, #248	; 0xf8
 8001fe0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001fe8:	fa91 f1a1 	rbit	r1, r1
 8001fec:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001ff0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ff4:	fab1 f181 	clz	r1, r1
 8001ff8:	b2c9      	uxtb	r1, r1
 8001ffa:	408b      	lsls	r3, r1
 8001ffc:	4969      	ldr	r1, [pc, #420]	; (80021a4 <HAL_RCC_OscConfig+0x5d0>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e0fe      	b.n	8002202 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002008:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8088 	beq.w	8002126 <HAL_RCC_OscConfig+0x552>
 8002016:	2301      	movs	r3, #1
 8002018:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002028:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002036:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	461a      	mov	r2, r3
 800203e:	2301      	movs	r3, #1
 8002040:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7fe fcb7 	bl	80009b4 <HAL_GetTick>
 8002046:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204a:	e00a      	b.n	8002062 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204c:	f7fe fcb2 	bl	80009b4 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d902      	bls.n	8002062 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	f000 be06 	b.w	8002c6e <HAL_RCC_OscConfig+0x109a>
 8002062:	2302      	movs	r3, #2
 8002064:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002074:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d102      	bne.n	8002092 <HAL_RCC_OscConfig+0x4be>
 800208c:	4b45      	ldr	r3, [pc, #276]	; (80021a4 <HAL_RCC_OscConfig+0x5d0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	e013      	b.n	80020ba <HAL_RCC_OscConfig+0x4e6>
 8002092:	2302      	movs	r3, #2
 8002094:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80020a4:	2302      	movs	r3, #2
 80020a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80020aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80020b6:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <HAL_RCC_OscConfig+0x5d0>)
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	2202      	movs	r2, #2
 80020bc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80020c0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80020c4:	fa92 f2a2 	rbit	r2, r2
 80020c8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80020cc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80020d0:	fab2 f282 	clz	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f042 0220 	orr.w	r2, r2, #32
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	f002 021f 	and.w	r2, r2, #31
 80020e0:	2101      	movs	r1, #1
 80020e2:	fa01 f202 	lsl.w	r2, r1, r2
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0af      	beq.n	800204c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HAL_RCC_OscConfig+0x5d0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	21f8      	movs	r1, #248	; 0xf8
 8002102:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800210a:	fa91 f1a1 	rbit	r1, r1
 800210e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002112:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002116:	fab1 f181 	clz	r1, r1
 800211a:	b2c9      	uxtb	r1, r1
 800211c:	408b      	lsls	r3, r1
 800211e:	4921      	ldr	r1, [pc, #132]	; (80021a4 <HAL_RCC_OscConfig+0x5d0>)
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
 8002124:	e06d      	b.n	8002202 <HAL_RCC_OscConfig+0x62e>
 8002126:	2301      	movs	r3, #1
 8002128:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002138:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002146:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	461a      	mov	r2, r3
 800214e:	2300      	movs	r3, #0
 8002150:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7fe fc2f 	bl	80009b4 <HAL_GetTick>
 8002156:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215c:	f7fe fc2a 	bl	80009b4 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d902      	bls.n	8002172 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	f000 bd7e 	b.w	8002c6e <HAL_RCC_OscConfig+0x109a>
 8002172:	2302      	movs	r3, #2
 8002174:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002184:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d105      	bne.n	80021a8 <HAL_RCC_OscConfig+0x5d4>
 800219c:	4b01      	ldr	r3, [pc, #4]	; (80021a4 <HAL_RCC_OscConfig+0x5d0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	e016      	b.n	80021d0 <HAL_RCC_OscConfig+0x5fc>
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	2302      	movs	r3, #2
 80021aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80021ba:	2302      	movs	r3, #2
 80021bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80021c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80021c4:	fa93 f3a3 	rbit	r3, r3
 80021c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80021cc:	4bbf      	ldr	r3, [pc, #764]	; (80024cc <HAL_RCC_OscConfig+0x8f8>)
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	2202      	movs	r2, #2
 80021d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80021d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80021da:	fa92 f2a2 	rbit	r2, r2
 80021de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80021e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80021e6:	fab2 f282 	clz	r2, r2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f042 0220 	orr.w	r2, r2, #32
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f002 021f 	and.w	r2, r2, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ac      	bne.n	800215c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002206:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8113 	beq.w	800243e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d07c      	beq.n	8002322 <HAL_RCC_OscConfig+0x74e>
 8002228:	2301      	movs	r3, #1
 800222a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800223a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	4ba2      	ldr	r3, [pc, #648]	; (80024d0 <HAL_RCC_OscConfig+0x8fc>)
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	461a      	mov	r2, r3
 800224e:	2301      	movs	r3, #1
 8002250:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7fe fbaf 	bl	80009b4 <HAL_GetTick>
 8002256:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225a:	e00a      	b.n	8002272 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800225c:	f7fe fbaa 	bl	80009b4 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d902      	bls.n	8002272 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	f000 bcfe 	b.w	8002c6e <HAL_RCC_OscConfig+0x109a>
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800227c:	fa93 f2a3 	rbit	r2, r3
 8002280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002284:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002292:	2202      	movs	r2, #2
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	fa93 f2a3 	rbit	r2, r3
 80022a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022b6:	2202      	movs	r2, #2
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	4b7e      	ldr	r3, [pc, #504]	; (80024cc <HAL_RCC_OscConfig+0x8f8>)
 80022d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022de:	2102      	movs	r1, #2
 80022e0:	6019      	str	r1, [r3, #0]
 80022e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f1a3 	rbit	r1, r3
 80022f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022f8:	6019      	str	r1, [r3, #0]
  return result;
 80022fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d09d      	beq.n	800225c <HAL_RCC_OscConfig+0x688>
 8002320:	e08d      	b.n	800243e <HAL_RCC_OscConfig+0x86a>
 8002322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002326:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002332:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fa93 f2a3 	rbit	r2, r3
 800233c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002340:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002344:	601a      	str	r2, [r3, #0]
  return result;
 8002346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800234e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	4b5d      	ldr	r3, [pc, #372]	; (80024d0 <HAL_RCC_OscConfig+0x8fc>)
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	461a      	mov	r2, r3
 8002360:	2300      	movs	r3, #0
 8002362:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7fe fb26 	bl	80009b4 <HAL_GetTick>
 8002368:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236e:	f7fe fb21 	bl	80009b4 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d902      	bls.n	8002384 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	f000 bc75 	b.w	8002c6e <HAL_RCC_OscConfig+0x109a>
 8002384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002388:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800238c:	2202      	movs	r2, #2
 800238e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002394:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80023b0:	2202      	movs	r2, #2
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	fa93 f2a3 	rbit	r2, r3
 80023c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80023d4:	2202      	movs	r2, #2
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	fa93 f2a3 	rbit	r2, r3
 80023e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80023ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f0:	4b36      	ldr	r3, [pc, #216]	; (80024cc <HAL_RCC_OscConfig+0x8f8>)
 80023f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80023fc:	2102      	movs	r1, #2
 80023fe:	6019      	str	r1, [r3, #0]
 8002400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002404:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	fa93 f1a3 	rbit	r1, r3
 800240e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002412:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002416:	6019      	str	r1, [r3, #0]
  return result;
 8002418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	2101      	movs	r1, #1
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d197      	bne.n	800236e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002442:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 81a5 	beq.w	800279e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002454:	2300      	movs	r3, #0
 8002456:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <HAL_RCC_OscConfig+0x8f8>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d116      	bne.n	8002494 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4b19      	ldr	r3, [pc, #100]	; (80024cc <HAL_RCC_OscConfig+0x8f8>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	4a18      	ldr	r2, [pc, #96]	; (80024cc <HAL_RCC_OscConfig+0x8f8>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	61d3      	str	r3, [r2, #28]
 8002472:	4b16      	ldr	r3, [pc, #88]	; (80024cc <HAL_RCC_OscConfig+0x8f8>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800247a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002488:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800248c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800248e:	2301      	movs	r3, #1
 8002490:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_RCC_OscConfig+0x900>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d121      	bne.n	80024e4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <HAL_RCC_OscConfig+0x900>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <HAL_RCC_OscConfig+0x900>)
 80024a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ac:	f7fe fa82 	bl	80009b4 <HAL_GetTick>
 80024b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e010      	b.n	80024d8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7fe fa7d 	bl	80009b4 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d908      	bls.n	80024d8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e3d1      	b.n	8002c6e <HAL_RCC_OscConfig+0x109a>
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	10908120 	.word	0x10908120
 80024d4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d8:	4b8d      	ldr	r3, [pc, #564]	; (8002710 <HAL_RCC_OscConfig+0xb3c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0e8      	beq.n	80024b6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x92e>
 80024f4:	4b87      	ldr	r3, [pc, #540]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a86      	ldr	r2, [pc, #536]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	e035      	b.n	800256e <HAL_RCC_OscConfig+0x99a>
 8002502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002506:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x958>
 8002512:	4b80      	ldr	r3, [pc, #512]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a7f      	ldr	r2, [pc, #508]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b7d      	ldr	r3, [pc, #500]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a7c      	ldr	r2, [pc, #496]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	e020      	b.n	800256e <HAL_RCC_OscConfig+0x99a>
 800252c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002530:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b05      	cmp	r3, #5
 800253a:	d10c      	bne.n	8002556 <HAL_RCC_OscConfig+0x982>
 800253c:	4b75      	ldr	r3, [pc, #468]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4a74      	ldr	r2, [pc, #464]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	6213      	str	r3, [r2, #32]
 8002548:	4b72      	ldr	r3, [pc, #456]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a71      	ldr	r2, [pc, #452]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	e00b      	b.n	800256e <HAL_RCC_OscConfig+0x99a>
 8002556:	4b6f      	ldr	r3, [pc, #444]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a6e      	ldr	r2, [pc, #440]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	6213      	str	r3, [r2, #32]
 8002562:	4b6c      	ldr	r3, [pc, #432]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a6b      	ldr	r2, [pc, #428]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002572:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8081 	beq.w	8002682 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002580:	f7fe fa18 	bl	80009b4 <HAL_GetTick>
 8002584:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002588:	e00b      	b.n	80025a2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7fe fa13 	bl	80009b4 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e365      	b.n	8002c6e <HAL_RCC_OscConfig+0x109a>
 80025a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025aa:	2202      	movs	r2, #2
 80025ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fa93 f2a3 	rbit	r2, r3
 80025bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025ce:	2202      	movs	r2, #2
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fa93 f2a3 	rbit	r2, r3
 80025e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80025e8:	601a      	str	r2, [r3, #0]
  return result;
 80025ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ee:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80025f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	f043 0302 	orr.w	r3, r3, #2
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d102      	bne.n	800260e <HAL_RCC_OscConfig+0xa3a>
 8002608:	4b42      	ldr	r3, [pc, #264]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	e013      	b.n	8002636 <HAL_RCC_OscConfig+0xa62>
 800260e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002612:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002616:	2202      	movs	r2, #2
 8002618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800261e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	fa93 f2a3 	rbit	r2, r3
 8002628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800262c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	4b38      	ldr	r3, [pc, #224]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800263a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800263e:	2102      	movs	r1, #2
 8002640:	6011      	str	r1, [r2, #0]
 8002642:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002646:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	fa92 f1a2 	rbit	r1, r2
 8002650:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002654:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002658:	6011      	str	r1, [r2, #0]
  return result;
 800265a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800265e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	fab2 f282 	clz	r2, r2
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f002 021f 	and.w	r2, r2, #31
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f202 	lsl.w	r2, r1, r2
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d084      	beq.n	800258a <HAL_RCC_OscConfig+0x9b6>
 8002680:	e083      	b.n	800278a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002682:	f7fe f997 	bl	80009b4 <HAL_GetTick>
 8002686:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800268c:	f7fe f992 	bl	80009b4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e2e4      	b.n	8002c6e <HAL_RCC_OscConfig+0x109a>
 80026a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026ac:	2202      	movs	r2, #2
 80026ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	fa93 f2a3 	rbit	r2, r3
 80026be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026cc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026d0:	2202      	movs	r2, #2
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f2a3 	rbit	r2, r3
 80026e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80026ea:	601a      	str	r2, [r3, #0]
  return result;
 80026ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80026f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d106      	bne.n	8002718 <HAL_RCC_OscConfig+0xb44>
 800270a:	4b02      	ldr	r3, [pc, #8]	; (8002714 <HAL_RCC_OscConfig+0xb40>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	e017      	b.n	8002740 <HAL_RCC_OscConfig+0xb6c>
 8002710:	40007000 	.word	0x40007000
 8002714:	40021000 	.word	0x40021000
 8002718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002720:	2202      	movs	r2, #2
 8002722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002728:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	fa93 f2a3 	rbit	r2, r3
 8002732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002736:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	4bb3      	ldr	r3, [pc, #716]	; (8002a0c <HAL_RCC_OscConfig+0xe38>)
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002744:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002748:	2102      	movs	r1, #2
 800274a:	6011      	str	r1, [r2, #0]
 800274c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002750:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	fa92 f1a2 	rbit	r1, r2
 800275a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800275e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002762:	6011      	str	r1, [r2, #0]
  return result;
 8002764:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002768:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	fab2 f282 	clz	r2, r2
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	f002 021f 	and.w	r2, r2, #31
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f202 	lsl.w	r2, r1, r2
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d180      	bne.n	800268c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800278a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800278e:	2b01      	cmp	r3, #1
 8002790:	d105      	bne.n	800279e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002792:	4b9e      	ldr	r3, [pc, #632]	; (8002a0c <HAL_RCC_OscConfig+0xe38>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a9d      	ldr	r2, [pc, #628]	; (8002a0c <HAL_RCC_OscConfig+0xe38>)
 8002798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 825e 	beq.w	8002c6c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b0:	4b96      	ldr	r3, [pc, #600]	; (8002a0c <HAL_RCC_OscConfig+0xe38>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	f000 821f 	beq.w	8002bfc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	f040 8170 	bne.w	8002ab0 <HAL_RCC_OscConfig+0xedc>
 80027d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	fa93 f2a3 	rbit	r2, r3
 80027ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027f4:	601a      	str	r2, [r3, #0]
  return result;
 80027f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027fe:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800280a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	461a      	mov	r2, r3
 8002812:	2300      	movs	r3, #0
 8002814:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe f8cd 	bl	80009b4 <HAL_GetTick>
 800281a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281e:	e009      	b.n	8002834 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002820:	f7fe f8c8 	bl	80009b4 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e21c      	b.n	8002c6e <HAL_RCC_OscConfig+0x109a>
 8002834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002838:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800283c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002840:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002846:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	fa93 f2a3 	rbit	r2, r3
 8002850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002854:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002858:	601a      	str	r2, [r3, #0]
  return result;
 800285a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800285e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002862:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d102      	bne.n	800287e <HAL_RCC_OscConfig+0xcaa>
 8002878:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <HAL_RCC_OscConfig+0xe38>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	e027      	b.n	80028ce <HAL_RCC_OscConfig+0xcfa>
 800287e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002882:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002886:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800288a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002890:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	fa93 f2a3 	rbit	r2, r3
 800289a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800289e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80028ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	4b50      	ldr	r3, [pc, #320]	; (8002a0c <HAL_RCC_OscConfig+0xe38>)
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028d2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80028d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028da:	6011      	str	r1, [r2, #0]
 80028dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028e0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	fa92 f1a2 	rbit	r1, r2
 80028ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028ee:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80028f2:	6011      	str	r1, [r2, #0]
  return result;
 80028f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028f8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	fab2 f282 	clz	r2, r2
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	f042 0220 	orr.w	r2, r2, #32
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f002 021f 	and.w	r2, r2, #31
 800290e:	2101      	movs	r1, #1
 8002910:	fa01 f202 	lsl.w	r2, r1, r2
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d182      	bne.n	8002820 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291a:	4b3c      	ldr	r3, [pc, #240]	; (8002a0c <HAL_RCC_OscConfig+0xe38>)
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	f023 020f 	bic.w	r2, r3, #15
 8002922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002926:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	4937      	ldr	r1, [pc, #220]	; (8002a0c <HAL_RCC_OscConfig+0xe38>)
 8002930:	4313      	orrs	r3, r2
 8002932:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_RCC_OscConfig+0xe38>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800293c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002940:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6a19      	ldr	r1, [r3, #32]
 8002948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800294c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	430b      	orrs	r3, r1
 8002956:	492d      	ldr	r1, [pc, #180]	; (8002a0c <HAL_RCC_OscConfig+0xe38>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
 800295c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002960:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002964:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800296e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	fa93 f2a3 	rbit	r2, r3
 8002978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800297c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002980:	601a      	str	r2, [r3, #0]
  return result;
 8002982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002986:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800298a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002996:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	461a      	mov	r2, r3
 800299e:	2301      	movs	r3, #1
 80029a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fe f807 	bl	80009b4 <HAL_GetTick>
 80029a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029aa:	e009      	b.n	80029c0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fe f802 	bl	80009b4 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e156      	b.n	8002c6e <HAL_RCC_OscConfig+0x109a>
 80029c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	fa93 f2a3 	rbit	r2, r3
 80029dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80029e4:	601a      	str	r2, [r3, #0]
  return result;
 80029e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80029ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_RCC_OscConfig+0xe3c>
 8002a04:	4b01      	ldr	r3, [pc, #4]	; (8002a0c <HAL_RCC_OscConfig+0xe38>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	e02a      	b.n	8002a60 <HAL_RCC_OscConfig+0xe8c>
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a14:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a22:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fa93 f2a3 	rbit	r2, r3
 8002a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a30:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a48:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	fa93 f2a3 	rbit	r2, r3
 8002a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a56:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	4b86      	ldr	r3, [pc, #536]	; (8002c78 <HAL_RCC_OscConfig+0x10a4>)
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a64:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a6c:	6011      	str	r1, [r2, #0]
 8002a6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a72:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	fa92 f1a2 	rbit	r1, r2
 8002a7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a80:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002a84:	6011      	str	r1, [r2, #0]
  return result;
 8002a86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a8a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	fab2 f282 	clz	r2, r2
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	f042 0220 	orr.w	r2, r2, #32
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f002 021f 	and.w	r2, r2, #31
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f43f af7f 	beq.w	80029ac <HAL_RCC_OscConfig+0xdd8>
 8002aae:	e0dd      	b.n	8002c6c <HAL_RCC_OscConfig+0x1098>
 8002ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ab8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	fa93 f2a3 	rbit	r2, r3
 8002acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ad4:	601a      	str	r2, [r3, #0]
  return result;
 8002ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ada:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ade:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	461a      	mov	r2, r3
 8002af2:	2300      	movs	r3, #0
 8002af4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fd ff5d 	bl	80009b4 <HAL_GetTick>
 8002afa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afe:	e009      	b.n	8002b14 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fd ff58 	bl	80009b4 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0ac      	b.n	8002c6e <HAL_RCC_OscConfig+0x109a>
 8002b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b18:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b26:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	fa93 f2a3 	rbit	r2, r3
 8002b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b34:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b38:	601a      	str	r2, [r3, #0]
  return result;
 8002b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d102      	bne.n	8002b5e <HAL_RCC_OscConfig+0xf8a>
 8002b58:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCC_OscConfig+0x10a4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	e027      	b.n	8002bae <HAL_RCC_OscConfig+0xfda>
 8002b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b62:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	fa93 f2a3 	rbit	r2, r3
 8002b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b7e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b88:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f2a3 	rbit	r2, r3
 8002ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	4b33      	ldr	r3, [pc, #204]	; (8002c78 <HAL_RCC_OscConfig+0x10a4>)
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bb2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002bb6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bba:	6011      	str	r1, [r2, #0]
 8002bbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bc0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	fa92 f1a2 	rbit	r1, r2
 8002bca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bce:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002bd2:	6011      	str	r1, [r2, #0]
  return result;
 8002bd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bd8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	fab2 f282 	clz	r2, r2
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	f042 0220 	orr.w	r2, r2, #32
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f002 021f 	and.w	r2, r2, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d182      	bne.n	8002b00 <HAL_RCC_OscConfig+0xf2c>
 8002bfa:	e037      	b.n	8002c6c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e02e      	b.n	8002c6e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_RCC_OscConfig+0x10a4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002c18:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <HAL_RCC_OscConfig+0x10a4>)
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c24:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d117      	bne.n	8002c68 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c3c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d10b      	bne.n	8002c68 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002c50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c54:	f003 020f 	and.w	r2, r3, #15
 8002c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000

08002c7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b09e      	sub	sp, #120	; 0x78
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e162      	b.n	8002f5a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c94:	4b90      	ldr	r3, [pc, #576]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d910      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b8d      	ldr	r3, [pc, #564]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 0207 	bic.w	r2, r3, #7
 8002caa:	498b      	ldr	r1, [pc, #556]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b89      	ldr	r3, [pc, #548]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e14a      	b.n	8002f5a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd0:	4b82      	ldr	r3, [pc, #520]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	497f      	ldr	r1, [pc, #508]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80dc 	beq.w	8002ea8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d13c      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xf6>
 8002cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cfc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d102      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xa6>
 8002d1c:	4b6f      	ldr	r3, [pc, #444]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	e00f      	b.n	8002d42 <HAL_RCC_ClockConfig+0xc6>
 8002d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	667b      	str	r3, [r7, #100]	; 0x64
 8002d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d34:	663b      	str	r3, [r7, #96]	; 0x60
 8002d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d3e:	4b67      	ldr	r3, [pc, #412]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d46:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d4a:	fa92 f2a2 	rbit	r2, r2
 8002d4e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d52:	fab2 f282 	clz	r2, r2
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	f042 0220 	orr.w	r2, r2, #32
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	f002 021f 	and.w	r2, r2, #31
 8002d62:	2101      	movs	r1, #1
 8002d64:	fa01 f202 	lsl.w	r2, r1, r2
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d17b      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e0f3      	b.n	8002f5a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d13c      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x178>
 8002d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x128>
 8002d9e:	4b4f      	ldr	r3, [pc, #316]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	e00f      	b.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
 8002da4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	647b      	str	r3, [r7, #68]	; 0x44
 8002db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002db6:	643b      	str	r3, [r7, #64]	; 0x40
 8002db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc0:	4b46      	ldr	r3, [pc, #280]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dcc:	fa92 f2a2 	rbit	r2, r2
 8002dd0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dd4:	fab2 f282 	clz	r2, r2
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f042 0220 	orr.w	r2, r2, #32
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	f002 021f 	and.w	r2, r2, #31
 8002de4:	2101      	movs	r1, #1
 8002de6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d13a      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0b2      	b.n	8002f5a <HAL_RCC_ClockConfig+0x2de>
 8002df4:	2302      	movs	r3, #2
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d102      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x1a0>
 8002e16:	4b31      	ldr	r3, [pc, #196]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	e00d      	b.n	8002e38 <HAL_RCC_ClockConfig+0x1bc>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
 8002e28:	2302      	movs	r3, #2
 8002e2a:	623b      	str	r3, [r7, #32]
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	4b29      	ldr	r3, [pc, #164]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	2202      	movs	r2, #2
 8002e3a:	61ba      	str	r2, [r7, #24]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	fa92 f2a2 	rbit	r2, r2
 8002e42:	617a      	str	r2, [r7, #20]
  return result;
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	fab2 f282 	clz	r2, r2
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	f042 0220 	orr.w	r2, r2, #32
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f002 021f 	and.w	r2, r2, #31
 8002e56:	2101      	movs	r1, #1
 8002e58:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e079      	b.n	8002f5a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	491a      	ldr	r1, [pc, #104]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e78:	f7fd fd9c 	bl	80009b4 <HAL_GetTick>
 8002e7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7fd fd98 	bl	80009b4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e061      	b.n	8002f5a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 020c 	and.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1eb      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d214      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 0207 	bic.w	r2, r3, #7
 8002ebe:	4906      	ldr	r1, [pc, #24]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e040      	b.n	8002f5a <HAL_RCC_ClockConfig+0x2de>
 8002ed8:	40022000 	.word	0x40022000
 8002edc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_RCC_ClockConfig+0x2e8>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	491a      	ldr	r1, [pc, #104]	; (8002f64 <HAL_RCC_ClockConfig+0x2e8>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f0a:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <HAL_RCC_ClockConfig+0x2e8>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4912      	ldr	r1, [pc, #72]	; (8002f64 <HAL_RCC_ClockConfig+0x2e8>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f1e:	f000 f829 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f22:	4601      	mov	r1, r0
 8002f24:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <HAL_RCC_ClockConfig+0x2e8>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f2c:	22f0      	movs	r2, #240	; 0xf0
 8002f2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	fa92 f2a2 	rbit	r2, r2
 8002f36:	60fa      	str	r2, [r7, #12]
  return result;
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	fab2 f282 	clz	r2, r2
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	40d3      	lsrs	r3, r2
 8002f42:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x2ec>)
 8002f44:	5cd3      	ldrb	r3, [r2, r3]
 8002f46:	fa21 f303 	lsr.w	r3, r1, r3
 8002f4a:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <HAL_RCC_ClockConfig+0x2f0>)
 8002f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_RCC_ClockConfig+0x2f4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fcea 	bl	800092c <HAL_InitTick>
  
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3778      	adds	r7, #120	; 0x78
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
 8002f68:	08004d08 	.word	0x08004d08
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b08b      	sub	sp, #44	; 0x2c
 8002f78:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f8e:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d002      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x30>
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d003      	beq.n	8002faa <HAL_RCC_GetSysClockFreq+0x36>
 8002fa2:	e03f      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fa4:	4b25      	ldr	r3, [pc, #148]	; (800303c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fa6:	623b      	str	r3, [r7, #32]
      break;
 8002fa8:	e03f      	b.n	800302a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002fb0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002fb4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	fa92 f2a2 	rbit	r2, r2
 8002fbc:	607a      	str	r2, [r7, #4]
  return result;
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	fab2 f282 	clz	r2, r2
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	40d3      	lsrs	r3, r2
 8002fc8:	4a1d      	ldr	r2, [pc, #116]	; (8003040 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002fce:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	fa92 f2a2 	rbit	r2, r2
 8002fe0:	60fa      	str	r2, [r7, #12]
  return result;
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	fab2 f282 	clz	r2, r2
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	40d3      	lsrs	r3, r2
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fee:	5cd3      	ldrb	r3, [r2, r3]
 8002ff0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ffc:	4a0f      	ldr	r2, [pc, #60]	; (800303c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	fbb2 f2f3 	udiv	r2, r2, r3
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
 800300c:	e007      	b.n	800301e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800300e:	4a0b      	ldr	r2, [pc, #44]	; (800303c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fbb2 f2f3 	udiv	r2, r2, r3
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	fb02 f303 	mul.w	r3, r2, r3
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	623b      	str	r3, [r7, #32]
      break;
 8003022:	e002      	b.n	800302a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003026:	623b      	str	r3, [r7, #32]
      break;
 8003028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800302a:	6a3b      	ldr	r3, [r7, #32]
}
 800302c:	4618      	mov	r0, r3
 800302e:	372c      	adds	r7, #44	; 0x2c
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	40021000 	.word	0x40021000
 800303c:	007a1200 	.word	0x007a1200
 8003040:	08004d20 	.word	0x08004d20
 8003044:	08004d30 	.word	0x08004d30

08003048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000000 	.word	0x20000000

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003066:	f7ff ffef 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 800306a:	4601      	mov	r1, r0
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003074:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003078:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	fa92 f2a2 	rbit	r2, r2
 8003080:	603a      	str	r2, [r7, #0]
  return result;
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	fab2 f282 	clz	r2, r2
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	40d3      	lsrs	r3, r2
 800308c:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800308e:	5cd3      	ldrb	r3, [r2, r3]
 8003090:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000
 80030a0:	08004d18 	.word	0x08004d18

080030a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030aa:	f7ff ffcd 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 80030ae:	4601      	mov	r1, r0
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80030b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80030bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	fa92 f2a2 	rbit	r2, r2
 80030c4:	603a      	str	r2, [r7, #0]
  return result;
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	fab2 f282 	clz	r2, r2
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	40d3      	lsrs	r3, r2
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	08004d18 	.word	0x08004d18

080030e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b092      	sub	sp, #72	; 0x48
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80d4 	beq.w	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310c:	4b4e      	ldr	r3, [pc, #312]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10e      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003118:	4b4b      	ldr	r3, [pc, #300]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	4a4a      	ldr	r2, [pc, #296]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003122:	61d3      	str	r3, [r2, #28]
 8003124:	4b48      	ldr	r3, [pc, #288]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003130:	2301      	movs	r3, #1
 8003132:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	4b45      	ldr	r3, [pc, #276]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d118      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003142:	4b42      	ldr	r3, [pc, #264]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a41      	ldr	r2, [pc, #260]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314e:	f7fd fc31 	bl	80009b4 <HAL_GetTick>
 8003152:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	e008      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003156:	f7fd fc2d 	bl	80009b4 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b64      	cmp	r3, #100	; 0x64
 8003162:	d901      	bls.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e1d6      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	4b38      	ldr	r3, [pc, #224]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003174:	4b34      	ldr	r3, [pc, #208]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800317e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8084 	beq.w	800328e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003190:	429a      	cmp	r2, r3
 8003192:	d07c      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003194:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800319e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b26      	ldr	r3, [pc, #152]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	461a      	mov	r2, r3
 80031be:	2301      	movs	r3, #1
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	461a      	mov	r2, r3
 80031e2:	2300      	movs	r3, #0
 80031e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031e6:	4a18      	ldr	r2, [pc, #96]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d04b      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f6:	f7fd fbdd 	bl	80009b4 <HAL_GetTick>
 80031fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fc:	e00a      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fe:	f7fd fbd9 	bl	80009b4 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f241 3288 	movw	r2, #5000	; 0x1388
 800320c:	4293      	cmp	r3, r2
 800320e:	d901      	bls.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e180      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003214:	2302      	movs	r3, #2
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
 8003220:	2302      	movs	r3, #2
 8003222:	623b      	str	r3, [r7, #32]
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	61fb      	str	r3, [r7, #28]
  return result;
 800322c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d108      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003242:	4b01      	ldr	r3, [pc, #4]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	e00d      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003248:	40021000 	.word	0x40021000
 800324c:	40007000 	.word	0x40007000
 8003250:	10908100 	.word	0x10908100
 8003254:	2302      	movs	r3, #2
 8003256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	4b9a      	ldr	r3, [pc, #616]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	2202      	movs	r2, #2
 8003266:	613a      	str	r2, [r7, #16]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	fa92 f2a2 	rbit	r2, r2
 800326e:	60fa      	str	r2, [r7, #12]
  return result;
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	fab2 f282 	clz	r2, r2
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	f002 021f 	and.w	r2, r2, #31
 8003282:	2101      	movs	r1, #1
 8003284:	fa01 f202 	lsl.w	r2, r1, r2
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0b7      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800328e:	4b8f      	ldr	r3, [pc, #572]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	498c      	ldr	r1, [pc, #560]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800329c:	4313      	orrs	r3, r2
 800329e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d105      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a8:	4b88      	ldr	r3, [pc, #544]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	4a87      	ldr	r2, [pc, #540]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032c0:	4b82      	ldr	r3, [pc, #520]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	f023 0203 	bic.w	r2, r3, #3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	497f      	ldr	r1, [pc, #508]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032de:	4b7b      	ldr	r3, [pc, #492]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	4978      	ldr	r1, [pc, #480]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032fc:	4b73      	ldr	r3, [pc, #460]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	4970      	ldr	r1, [pc, #448]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800330a:	4313      	orrs	r3, r2
 800330c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800331a:	4b6c      	ldr	r3, [pc, #432]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f023 0210 	bic.w	r2, r3, #16
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	4969      	ldr	r1, [pc, #420]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003328:	4313      	orrs	r3, r2
 800332a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003338:	4b64      	ldr	r3, [pc, #400]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	4961      	ldr	r1, [pc, #388]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003356:	4b5d      	ldr	r3, [pc, #372]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f023 0220 	bic.w	r2, r3, #32
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	495a      	ldr	r1, [pc, #360]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003364:	4313      	orrs	r3, r2
 8003366:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003374:	4b55      	ldr	r3, [pc, #340]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	4952      	ldr	r1, [pc, #328]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003392:	4b4e      	ldr	r3, [pc, #312]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	494b      	ldr	r1, [pc, #300]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033b0:	4b46      	ldr	r3, [pc, #280]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	4943      	ldr	r1, [pc, #268]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033ce:	4b3f      	ldr	r3, [pc, #252]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	493c      	ldr	r1, [pc, #240]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033ec:	4b37      	ldr	r3, [pc, #220]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	4934      	ldr	r1, [pc, #208]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800340a:	4b30      	ldr	r3, [pc, #192]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	492d      	ldr	r1, [pc, #180]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003418:	4313      	orrs	r3, r2
 800341a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003428:	4b28      	ldr	r3, [pc, #160]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	4925      	ldr	r1, [pc, #148]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003446:	4b21      	ldr	r3, [pc, #132]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	491e      	ldr	r1, [pc, #120]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	4916      	ldr	r1, [pc, #88]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d008      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003482:	4b12      	ldr	r3, [pc, #72]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	490f      	ldr	r1, [pc, #60]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003490:	4313      	orrs	r3, r2
 8003492:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ac:	4907      	ldr	r1, [pc, #28]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00c      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80034be:	4b03      	ldr	r3, [pc, #12]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	e002      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000
 80034d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d2:	4913      	ldr	r1, [pc, #76]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80034e4:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f0:	490b      	ldr	r1, [pc, #44]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350e:	4904      	ldr	r1, [pc, #16]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003510:	4313      	orrs	r3, r2
 8003512:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3748      	adds	r7, #72	; 0x48
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000

08003524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e049      	b.n	80035ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd f8d8 	bl	8000700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f000 fa74 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e049      	b.n	8003678 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f841 	bl	8003680 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3304      	adds	r3, #4
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f000 fa1d 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e0ff      	b.n	80038b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b14      	cmp	r3, #20
 80036be:	f200 80f0 	bhi.w	80038a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	0800371d 	.word	0x0800371d
 80036cc:	080038a3 	.word	0x080038a3
 80036d0:	080038a3 	.word	0x080038a3
 80036d4:	080038a3 	.word	0x080038a3
 80036d8:	0800375d 	.word	0x0800375d
 80036dc:	080038a3 	.word	0x080038a3
 80036e0:	080038a3 	.word	0x080038a3
 80036e4:	080038a3 	.word	0x080038a3
 80036e8:	0800379f 	.word	0x0800379f
 80036ec:	080038a3 	.word	0x080038a3
 80036f0:	080038a3 	.word	0x080038a3
 80036f4:	080038a3 	.word	0x080038a3
 80036f8:	080037df 	.word	0x080037df
 80036fc:	080038a3 	.word	0x080038a3
 8003700:	080038a3 	.word	0x080038a3
 8003704:	080038a3 	.word	0x080038a3
 8003708:	08003821 	.word	0x08003821
 800370c:	080038a3 	.word	0x080038a3
 8003710:	080038a3 	.word	0x080038a3
 8003714:	080038a3 	.word	0x080038a3
 8003718:	08003861 	.word	0x08003861
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fa32 	bl	8003b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0208 	orr.w	r2, r2, #8
 8003736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0204 	bic.w	r2, r2, #4
 8003746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6999      	ldr	r1, [r3, #24]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	619a      	str	r2, [r3, #24]
      break;
 800375a:	e0a5      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 faac 	bl	8003cc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6999      	ldr	r1, [r3, #24]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	021a      	lsls	r2, r3, #8
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	619a      	str	r2, [r3, #24]
      break;
 800379c:	e084      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fb1f 	bl	8003de8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0208 	orr.w	r2, r2, #8
 80037b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0204 	bic.w	r2, r2, #4
 80037c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69d9      	ldr	r1, [r3, #28]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	61da      	str	r2, [r3, #28]
      break;
 80037dc:	e064      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fb91 	bl	8003f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69d9      	ldr	r1, [r3, #28]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	021a      	lsls	r2, r3, #8
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	61da      	str	r2, [r3, #28]
      break;
 800381e:	e043      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fbe0 	bl	8003fec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0208 	orr.w	r2, r2, #8
 800383a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0204 	bic.w	r2, r2, #4
 800384a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800385e:	e023      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fc2a 	bl	80040c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	021a      	lsls	r2, r3, #8
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038a0:	e002      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
      break;
 80038a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop

080038bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_TIM_ConfigClockSource+0x1c>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e0b6      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x18a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003902:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003914:	d03e      	beq.n	8003994 <HAL_TIM_ConfigClockSource+0xd8>
 8003916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391a:	f200 8087 	bhi.w	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 800391e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003922:	f000 8086 	beq.w	8003a32 <HAL_TIM_ConfigClockSource+0x176>
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392a:	d87f      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 800392c:	2b70      	cmp	r3, #112	; 0x70
 800392e:	d01a      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0xaa>
 8003930:	2b70      	cmp	r3, #112	; 0x70
 8003932:	d87b      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 8003934:	2b60      	cmp	r3, #96	; 0x60
 8003936:	d050      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x11e>
 8003938:	2b60      	cmp	r3, #96	; 0x60
 800393a:	d877      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 800393c:	2b50      	cmp	r3, #80	; 0x50
 800393e:	d03c      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0xfe>
 8003940:	2b50      	cmp	r3, #80	; 0x50
 8003942:	d873      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 8003944:	2b40      	cmp	r3, #64	; 0x40
 8003946:	d058      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0x13e>
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d86f      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 800394c:	2b30      	cmp	r3, #48	; 0x30
 800394e:	d064      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x15e>
 8003950:	2b30      	cmp	r3, #48	; 0x30
 8003952:	d86b      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 8003954:	2b20      	cmp	r3, #32
 8003956:	d060      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x15e>
 8003958:	2b20      	cmp	r3, #32
 800395a:	d867      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d05c      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x15e>
 8003960:	2b10      	cmp	r3, #16
 8003962:	d05a      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x15e>
 8003964:	e062      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6899      	ldr	r1, [r3, #8]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f000 fc89 	bl	800428c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003988:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	609a      	str	r2, [r3, #8]
      break;
 8003992:	e04f      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6899      	ldr	r1, [r3, #8]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f000 fc72 	bl	800428c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039b6:	609a      	str	r2, [r3, #8]
      break;
 80039b8:	e03c      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6859      	ldr	r1, [r3, #4]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	461a      	mov	r2, r3
 80039c8:	f000 fbe6 	bl	8004198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2150      	movs	r1, #80	; 0x50
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fc3f 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 80039d8:	e02c      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	461a      	mov	r2, r3
 80039e8:	f000 fc05 	bl	80041f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2160      	movs	r1, #96	; 0x60
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fc2f 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 80039f8:	e01c      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f000 fbc6 	bl	8004198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2140      	movs	r1, #64	; 0x40
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fc1f 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003a18:	e00c      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4619      	mov	r1, r3
 8003a24:	4610      	mov	r0, r2
 8003a26:	f000 fc16 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003a2a:	e003      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a30:	e000      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a42      	ldr	r2, [pc, #264]	; (8003b6c <TIM_Base_SetConfig+0x11c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d013      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6e:	d00f      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a3f      	ldr	r2, [pc, #252]	; (8003b70 <TIM_Base_SetConfig+0x120>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00b      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a3e      	ldr	r2, [pc, #248]	; (8003b74 <TIM_Base_SetConfig+0x124>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d007      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a3d      	ldr	r2, [pc, #244]	; (8003b78 <TIM_Base_SetConfig+0x128>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d003      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a3c      	ldr	r2, [pc, #240]	; (8003b7c <TIM_Base_SetConfig+0x12c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d108      	bne.n	8003aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a31      	ldr	r2, [pc, #196]	; (8003b6c <TIM_Base_SetConfig+0x11c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01f      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab0:	d01b      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2e      	ldr	r2, [pc, #184]	; (8003b70 <TIM_Base_SetConfig+0x120>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d017      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <TIM_Base_SetConfig+0x124>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a2c      	ldr	r2, [pc, #176]	; (8003b78 <TIM_Base_SetConfig+0x128>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00f      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2c      	ldr	r2, [pc, #176]	; (8003b80 <TIM_Base_SetConfig+0x130>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a2b      	ldr	r2, [pc, #172]	; (8003b84 <TIM_Base_SetConfig+0x134>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2a      	ldr	r2, [pc, #168]	; (8003b88 <TIM_Base_SetConfig+0x138>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a25      	ldr	r2, [pc, #148]	; (8003b7c <TIM_Base_SetConfig+0x12c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d108      	bne.n	8003afc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a12      	ldr	r2, [pc, #72]	; (8003b6c <TIM_Base_SetConfig+0x11c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <TIM_Base_SetConfig+0x100>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <TIM_Base_SetConfig+0x128>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00f      	beq.n	8003b50 <TIM_Base_SetConfig+0x100>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <TIM_Base_SetConfig+0x130>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <TIM_Base_SetConfig+0x100>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <TIM_Base_SetConfig+0x134>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <TIM_Base_SetConfig+0x100>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a11      	ldr	r2, [pc, #68]	; (8003b88 <TIM_Base_SetConfig+0x138>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_Base_SetConfig+0x100>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a0c      	ldr	r2, [pc, #48]	; (8003b7c <TIM_Base_SetConfig+0x12c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d103      	bne.n	8003b58 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	615a      	str	r2, [r3, #20]
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40013400 	.word	0x40013400
 8003b7c:	40015000 	.word	0x40015000
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40014400 	.word	0x40014400
 8003b88:	40014800 	.word	0x40014800

08003b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f023 0201 	bic.w	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f023 0302 	bic.w	r3, r3, #2
 8003bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a30      	ldr	r2, [pc, #192]	; (8003ca8 <TIM_OC1_SetConfig+0x11c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d013      	beq.n	8003c14 <TIM_OC1_SetConfig+0x88>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <TIM_OC1_SetConfig+0x120>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00f      	beq.n	8003c14 <TIM_OC1_SetConfig+0x88>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a2e      	ldr	r2, [pc, #184]	; (8003cb0 <TIM_OC1_SetConfig+0x124>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00b      	beq.n	8003c14 <TIM_OC1_SetConfig+0x88>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a2d      	ldr	r2, [pc, #180]	; (8003cb4 <TIM_OC1_SetConfig+0x128>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d007      	beq.n	8003c14 <TIM_OC1_SetConfig+0x88>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a2c      	ldr	r2, [pc, #176]	; (8003cb8 <TIM_OC1_SetConfig+0x12c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d003      	beq.n	8003c14 <TIM_OC1_SetConfig+0x88>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a2b      	ldr	r2, [pc, #172]	; (8003cbc <TIM_OC1_SetConfig+0x130>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d10c      	bne.n	8003c2e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 0308 	bic.w	r3, r3, #8
 8003c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f023 0304 	bic.w	r3, r3, #4
 8003c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1d      	ldr	r2, [pc, #116]	; (8003ca8 <TIM_OC1_SetConfig+0x11c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <TIM_OC1_SetConfig+0xd2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a1c      	ldr	r2, [pc, #112]	; (8003cac <TIM_OC1_SetConfig+0x120>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00f      	beq.n	8003c5e <TIM_OC1_SetConfig+0xd2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1b      	ldr	r2, [pc, #108]	; (8003cb0 <TIM_OC1_SetConfig+0x124>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00b      	beq.n	8003c5e <TIM_OC1_SetConfig+0xd2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1a      	ldr	r2, [pc, #104]	; (8003cb4 <TIM_OC1_SetConfig+0x128>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d007      	beq.n	8003c5e <TIM_OC1_SetConfig+0xd2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <TIM_OC1_SetConfig+0x12c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d003      	beq.n	8003c5e <TIM_OC1_SetConfig+0xd2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <TIM_OC1_SetConfig+0x130>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d111      	bne.n	8003c82 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	621a      	str	r2, [r3, #32]
}
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	40012c00 	.word	0x40012c00
 8003cac:	40013400 	.word	0x40013400
 8003cb0:	40014000 	.word	0x40014000
 8003cb4:	40014400 	.word	0x40014400
 8003cb8:	40014800 	.word	0x40014800
 8003cbc:	40015000 	.word	0x40015000

08003cc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f023 0210 	bic.w	r2, r3, #16
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f023 0320 	bic.w	r3, r3, #32
 8003d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a2c      	ldr	r2, [pc, #176]	; (8003dd0 <TIM_OC2_SetConfig+0x110>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d007      	beq.n	8003d34 <TIM_OC2_SetConfig+0x74>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a2b      	ldr	r2, [pc, #172]	; (8003dd4 <TIM_OC2_SetConfig+0x114>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_OC2_SetConfig+0x74>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a2a      	ldr	r2, [pc, #168]	; (8003dd8 <TIM_OC2_SetConfig+0x118>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d10d      	bne.n	8003d50 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <TIM_OC2_SetConfig+0x110>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <TIM_OC2_SetConfig+0xc0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a1e      	ldr	r2, [pc, #120]	; (8003dd4 <TIM_OC2_SetConfig+0x114>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00f      	beq.n	8003d80 <TIM_OC2_SetConfig+0xc0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a1e      	ldr	r2, [pc, #120]	; (8003ddc <TIM_OC2_SetConfig+0x11c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00b      	beq.n	8003d80 <TIM_OC2_SetConfig+0xc0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <TIM_OC2_SetConfig+0x120>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d007      	beq.n	8003d80 <TIM_OC2_SetConfig+0xc0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a1c      	ldr	r2, [pc, #112]	; (8003de4 <TIM_OC2_SetConfig+0x124>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_OC2_SetConfig+0xc0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <TIM_OC2_SetConfig+0x118>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d113      	bne.n	8003da8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d86:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d8e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	40013400 	.word	0x40013400
 8003dd8:	40015000 	.word	0x40015000
 8003ddc:	40014000 	.word	0x40014000
 8003de0:	40014400 	.word	0x40014400
 8003de4:	40014800 	.word	0x40014800

08003de8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0303 	bic.w	r3, r3, #3
 8003e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a2b      	ldr	r2, [pc, #172]	; (8003ef4 <TIM_OC3_SetConfig+0x10c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d007      	beq.n	8003e5a <TIM_OC3_SetConfig+0x72>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2a      	ldr	r2, [pc, #168]	; (8003ef8 <TIM_OC3_SetConfig+0x110>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d003      	beq.n	8003e5a <TIM_OC3_SetConfig+0x72>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a29      	ldr	r2, [pc, #164]	; (8003efc <TIM_OC3_SetConfig+0x114>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d10d      	bne.n	8003e76 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e74:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a1e      	ldr	r2, [pc, #120]	; (8003ef4 <TIM_OC3_SetConfig+0x10c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <TIM_OC3_SetConfig+0xbe>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a1d      	ldr	r2, [pc, #116]	; (8003ef8 <TIM_OC3_SetConfig+0x110>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00f      	beq.n	8003ea6 <TIM_OC3_SetConfig+0xbe>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a1d      	ldr	r2, [pc, #116]	; (8003f00 <TIM_OC3_SetConfig+0x118>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_OC3_SetConfig+0xbe>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <TIM_OC3_SetConfig+0x11c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <TIM_OC3_SetConfig+0xbe>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a1b      	ldr	r2, [pc, #108]	; (8003f08 <TIM_OC3_SetConfig+0x120>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_OC3_SetConfig+0xbe>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a16      	ldr	r2, [pc, #88]	; (8003efc <TIM_OC3_SetConfig+0x114>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d113      	bne.n	8003ece <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	621a      	str	r2, [r3, #32]
}
 8003ee8:	bf00      	nop
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40013400 	.word	0x40013400
 8003efc:	40015000 	.word	0x40015000
 8003f00:	40014000 	.word	0x40014000
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800

08003f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	031b      	lsls	r3, r3, #12
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a1a      	ldr	r2, [pc, #104]	; (8003fd4 <TIM_OC4_SetConfig+0xc8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d013      	beq.n	8003f98 <TIM_OC4_SetConfig+0x8c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a19      	ldr	r2, [pc, #100]	; (8003fd8 <TIM_OC4_SetConfig+0xcc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00f      	beq.n	8003f98 <TIM_OC4_SetConfig+0x8c>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a18      	ldr	r2, [pc, #96]	; (8003fdc <TIM_OC4_SetConfig+0xd0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00b      	beq.n	8003f98 <TIM_OC4_SetConfig+0x8c>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <TIM_OC4_SetConfig+0xd4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d007      	beq.n	8003f98 <TIM_OC4_SetConfig+0x8c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a16      	ldr	r2, [pc, #88]	; (8003fe4 <TIM_OC4_SetConfig+0xd8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_OC4_SetConfig+0x8c>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <TIM_OC4_SetConfig+0xdc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d109      	bne.n	8003fac <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	019b      	lsls	r3, r3, #6
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40013400 	.word	0x40013400
 8003fdc:	40014000 	.word	0x40014000
 8003fe0:	40014400 	.word	0x40014400
 8003fe4:	40014800 	.word	0x40014800
 8003fe8:	40015000 	.word	0x40015000

08003fec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004030:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	041b      	lsls	r3, r3, #16
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a19      	ldr	r2, [pc, #100]	; (80040a8 <TIM_OC5_SetConfig+0xbc>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d013      	beq.n	800406e <TIM_OC5_SetConfig+0x82>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a18      	ldr	r2, [pc, #96]	; (80040ac <TIM_OC5_SetConfig+0xc0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00f      	beq.n	800406e <TIM_OC5_SetConfig+0x82>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <TIM_OC5_SetConfig+0xc4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00b      	beq.n	800406e <TIM_OC5_SetConfig+0x82>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <TIM_OC5_SetConfig+0xc8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d007      	beq.n	800406e <TIM_OC5_SetConfig+0x82>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a15      	ldr	r2, [pc, #84]	; (80040b8 <TIM_OC5_SetConfig+0xcc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d003      	beq.n	800406e <TIM_OC5_SetConfig+0x82>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a14      	ldr	r2, [pc, #80]	; (80040bc <TIM_OC5_SetConfig+0xd0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d109      	bne.n	8004082 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004074:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	621a      	str	r2, [r3, #32]
}
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	40012c00 	.word	0x40012c00
 80040ac:	40013400 	.word	0x40013400
 80040b0:	40014000 	.word	0x40014000
 80040b4:	40014400 	.word	0x40014400
 80040b8:	40014800 	.word	0x40014800
 80040bc:	40015000 	.word	0x40015000

080040c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	051b      	lsls	r3, r3, #20
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <TIM_OC6_SetConfig+0xc0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d013      	beq.n	8004144 <TIM_OC6_SetConfig+0x84>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a19      	ldr	r2, [pc, #100]	; (8004184 <TIM_OC6_SetConfig+0xc4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00f      	beq.n	8004144 <TIM_OC6_SetConfig+0x84>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a18      	ldr	r2, [pc, #96]	; (8004188 <TIM_OC6_SetConfig+0xc8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00b      	beq.n	8004144 <TIM_OC6_SetConfig+0x84>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a17      	ldr	r2, [pc, #92]	; (800418c <TIM_OC6_SetConfig+0xcc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d007      	beq.n	8004144 <TIM_OC6_SetConfig+0x84>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a16      	ldr	r2, [pc, #88]	; (8004190 <TIM_OC6_SetConfig+0xd0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_OC6_SetConfig+0x84>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a15      	ldr	r2, [pc, #84]	; (8004194 <TIM_OC6_SetConfig+0xd4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d109      	bne.n	8004158 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	029b      	lsls	r3, r3, #10
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	621a      	str	r2, [r3, #32]
}
 8004172:	bf00      	nop
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40012c00 	.word	0x40012c00
 8004184:	40013400 	.word	0x40013400
 8004188:	40014000 	.word	0x40014000
 800418c:	40014400 	.word	0x40014400
 8004190:	40014800 	.word	0x40014800
 8004194:	40015000 	.word	0x40015000

08004198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 0201 	bic.w	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 030a 	bic.w	r3, r3, #10
 80041d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b087      	sub	sp, #28
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0210 	bic.w	r2, r3, #16
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	031b      	lsls	r3, r3, #12
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004232:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	f043 0307 	orr.w	r3, r3, #7
 8004278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	021a      	lsls	r2, r3, #8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	bf00      	nop
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e06d      	b.n	80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a30      	ldr	r2, [pc, #192]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a2f      	ldr	r2, [pc, #188]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d004      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2d      	ldr	r2, [pc, #180]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d108      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004328:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a1e      	ldr	r2, [pc, #120]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d01d      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004360:	d018      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1a      	ldr	r2, [pc, #104]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00e      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a15      	ldr	r2, [pc, #84]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d009      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a16      	ldr	r2, [pc, #88]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a11      	ldr	r2, [pc, #68]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d10c      	bne.n	80043ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800439a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40013400 	.word	0x40013400
 80043d4:	40015000 	.word	0x40015000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40014000 	.word	0x40014000

080043e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e06a      	b.n	80044d6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	041b      	lsls	r3, r3, #16
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d009      	beq.n	8004498 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a16      	ldr	r2, [pc, #88]	; (80044ec <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d115      	bne.n	80044c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	051b      	lsls	r3, r3, #20
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	40013400 	.word	0x40013400
 80044ec:	40015000 	.word	0x40015000

080044f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e040      	b.n	8004584 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fc f94c 	bl	80007b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2224      	movs	r2, #36	; 0x24
 800451c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0201 	bic.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f82c 	bl	800458c <UART_SetConfig>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e022      	b.n	8004584 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f9f6 	bl	8004938 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800455a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800456a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fa7d 	bl	8004a7c <UART_CheckIdleState>
 8004582:	4603      	mov	r3, r0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4b92      	ldr	r3, [pc, #584]	; (8004800 <UART_SetConfig+0x274>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	6979      	ldr	r1, [r7, #20]
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a80      	ldr	r2, [pc, #512]	; (8004804 <UART_SetConfig+0x278>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d120      	bne.n	800464a <UART_SetConfig+0xbe>
 8004608:	4b7f      	ldr	r3, [pc, #508]	; (8004808 <UART_SetConfig+0x27c>)
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	2b03      	cmp	r3, #3
 8004612:	d817      	bhi.n	8004644 <UART_SetConfig+0xb8>
 8004614:	a201      	add	r2, pc, #4	; (adr r2, 800461c <UART_SetConfig+0x90>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	0800462d 	.word	0x0800462d
 8004620:	08004639 	.word	0x08004639
 8004624:	0800463f 	.word	0x0800463f
 8004628:	08004633 	.word	0x08004633
 800462c:	2301      	movs	r3, #1
 800462e:	77fb      	strb	r3, [r7, #31]
 8004630:	e0b5      	b.n	800479e <UART_SetConfig+0x212>
 8004632:	2302      	movs	r3, #2
 8004634:	77fb      	strb	r3, [r7, #31]
 8004636:	e0b2      	b.n	800479e <UART_SetConfig+0x212>
 8004638:	2304      	movs	r3, #4
 800463a:	77fb      	strb	r3, [r7, #31]
 800463c:	e0af      	b.n	800479e <UART_SetConfig+0x212>
 800463e:	2308      	movs	r3, #8
 8004640:	77fb      	strb	r3, [r7, #31]
 8004642:	e0ac      	b.n	800479e <UART_SetConfig+0x212>
 8004644:	2310      	movs	r3, #16
 8004646:	77fb      	strb	r3, [r7, #31]
 8004648:	e0a9      	b.n	800479e <UART_SetConfig+0x212>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a6f      	ldr	r2, [pc, #444]	; (800480c <UART_SetConfig+0x280>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d124      	bne.n	800469e <UART_SetConfig+0x112>
 8004654:	4b6c      	ldr	r3, [pc, #432]	; (8004808 <UART_SetConfig+0x27c>)
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800465c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004660:	d011      	beq.n	8004686 <UART_SetConfig+0xfa>
 8004662:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004666:	d817      	bhi.n	8004698 <UART_SetConfig+0x10c>
 8004668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800466c:	d011      	beq.n	8004692 <UART_SetConfig+0x106>
 800466e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004672:	d811      	bhi.n	8004698 <UART_SetConfig+0x10c>
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <UART_SetConfig+0xf4>
 8004678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467c:	d006      	beq.n	800468c <UART_SetConfig+0x100>
 800467e:	e00b      	b.n	8004698 <UART_SetConfig+0x10c>
 8004680:	2300      	movs	r3, #0
 8004682:	77fb      	strb	r3, [r7, #31]
 8004684:	e08b      	b.n	800479e <UART_SetConfig+0x212>
 8004686:	2302      	movs	r3, #2
 8004688:	77fb      	strb	r3, [r7, #31]
 800468a:	e088      	b.n	800479e <UART_SetConfig+0x212>
 800468c:	2304      	movs	r3, #4
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e085      	b.n	800479e <UART_SetConfig+0x212>
 8004692:	2308      	movs	r3, #8
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e082      	b.n	800479e <UART_SetConfig+0x212>
 8004698:	2310      	movs	r3, #16
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e07f      	b.n	800479e <UART_SetConfig+0x212>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a5b      	ldr	r2, [pc, #364]	; (8004810 <UART_SetConfig+0x284>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d124      	bne.n	80046f2 <UART_SetConfig+0x166>
 80046a8:	4b57      	ldr	r3, [pc, #348]	; (8004808 <UART_SetConfig+0x27c>)
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80046b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046b4:	d011      	beq.n	80046da <UART_SetConfig+0x14e>
 80046b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046ba:	d817      	bhi.n	80046ec <UART_SetConfig+0x160>
 80046bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046c0:	d011      	beq.n	80046e6 <UART_SetConfig+0x15a>
 80046c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046c6:	d811      	bhi.n	80046ec <UART_SetConfig+0x160>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <UART_SetConfig+0x148>
 80046cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046d0:	d006      	beq.n	80046e0 <UART_SetConfig+0x154>
 80046d2:	e00b      	b.n	80046ec <UART_SetConfig+0x160>
 80046d4:	2300      	movs	r3, #0
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e061      	b.n	800479e <UART_SetConfig+0x212>
 80046da:	2302      	movs	r3, #2
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	e05e      	b.n	800479e <UART_SetConfig+0x212>
 80046e0:	2304      	movs	r3, #4
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e05b      	b.n	800479e <UART_SetConfig+0x212>
 80046e6:	2308      	movs	r3, #8
 80046e8:	77fb      	strb	r3, [r7, #31]
 80046ea:	e058      	b.n	800479e <UART_SetConfig+0x212>
 80046ec:	2310      	movs	r3, #16
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e055      	b.n	800479e <UART_SetConfig+0x212>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a47      	ldr	r2, [pc, #284]	; (8004814 <UART_SetConfig+0x288>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d124      	bne.n	8004746 <UART_SetConfig+0x1ba>
 80046fc:	4b42      	ldr	r3, [pc, #264]	; (8004808 <UART_SetConfig+0x27c>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004704:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004708:	d011      	beq.n	800472e <UART_SetConfig+0x1a2>
 800470a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800470e:	d817      	bhi.n	8004740 <UART_SetConfig+0x1b4>
 8004710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004714:	d011      	beq.n	800473a <UART_SetConfig+0x1ae>
 8004716:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800471a:	d811      	bhi.n	8004740 <UART_SetConfig+0x1b4>
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <UART_SetConfig+0x19c>
 8004720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004724:	d006      	beq.n	8004734 <UART_SetConfig+0x1a8>
 8004726:	e00b      	b.n	8004740 <UART_SetConfig+0x1b4>
 8004728:	2300      	movs	r3, #0
 800472a:	77fb      	strb	r3, [r7, #31]
 800472c:	e037      	b.n	800479e <UART_SetConfig+0x212>
 800472e:	2302      	movs	r3, #2
 8004730:	77fb      	strb	r3, [r7, #31]
 8004732:	e034      	b.n	800479e <UART_SetConfig+0x212>
 8004734:	2304      	movs	r3, #4
 8004736:	77fb      	strb	r3, [r7, #31]
 8004738:	e031      	b.n	800479e <UART_SetConfig+0x212>
 800473a:	2308      	movs	r3, #8
 800473c:	77fb      	strb	r3, [r7, #31]
 800473e:	e02e      	b.n	800479e <UART_SetConfig+0x212>
 8004740:	2310      	movs	r3, #16
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	e02b      	b.n	800479e <UART_SetConfig+0x212>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a33      	ldr	r2, [pc, #204]	; (8004818 <UART_SetConfig+0x28c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d124      	bne.n	800479a <UART_SetConfig+0x20e>
 8004750:	4b2d      	ldr	r3, [pc, #180]	; (8004808 <UART_SetConfig+0x27c>)
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004758:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800475c:	d011      	beq.n	8004782 <UART_SetConfig+0x1f6>
 800475e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004762:	d817      	bhi.n	8004794 <UART_SetConfig+0x208>
 8004764:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004768:	d011      	beq.n	800478e <UART_SetConfig+0x202>
 800476a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800476e:	d811      	bhi.n	8004794 <UART_SetConfig+0x208>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <UART_SetConfig+0x1f0>
 8004774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004778:	d006      	beq.n	8004788 <UART_SetConfig+0x1fc>
 800477a:	e00b      	b.n	8004794 <UART_SetConfig+0x208>
 800477c:	2300      	movs	r3, #0
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e00d      	b.n	800479e <UART_SetConfig+0x212>
 8004782:	2302      	movs	r3, #2
 8004784:	77fb      	strb	r3, [r7, #31]
 8004786:	e00a      	b.n	800479e <UART_SetConfig+0x212>
 8004788:	2304      	movs	r3, #4
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e007      	b.n	800479e <UART_SetConfig+0x212>
 800478e:	2308      	movs	r3, #8
 8004790:	77fb      	strb	r3, [r7, #31]
 8004792:	e004      	b.n	800479e <UART_SetConfig+0x212>
 8004794:	2310      	movs	r3, #16
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e001      	b.n	800479e <UART_SetConfig+0x212>
 800479a:	2310      	movs	r3, #16
 800479c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a6:	d16c      	bne.n	8004882 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80047a8:	7ffb      	ldrb	r3, [r7, #31]
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d838      	bhi.n	8004820 <UART_SetConfig+0x294>
 80047ae:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <UART_SetConfig+0x228>)
 80047b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b4:	080047d9 	.word	0x080047d9
 80047b8:	080047e1 	.word	0x080047e1
 80047bc:	080047e9 	.word	0x080047e9
 80047c0:	08004821 	.word	0x08004821
 80047c4:	080047ef 	.word	0x080047ef
 80047c8:	08004821 	.word	0x08004821
 80047cc:	08004821 	.word	0x08004821
 80047d0:	08004821 	.word	0x08004821
 80047d4:	080047f7 	.word	0x080047f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d8:	f7fe fc42 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 80047dc:	61b8      	str	r0, [r7, #24]
        break;
 80047de:	e024      	b.n	800482a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047e0:	f7fe fc60 	bl	80030a4 <HAL_RCC_GetPCLK2Freq>
 80047e4:	61b8      	str	r0, [r7, #24]
        break;
 80047e6:	e020      	b.n	800482a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <UART_SetConfig+0x290>)
 80047ea:	61bb      	str	r3, [r7, #24]
        break;
 80047ec:	e01d      	b.n	800482a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ee:	f7fe fbc1 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 80047f2:	61b8      	str	r0, [r7, #24]
        break;
 80047f4:	e019      	b.n	800482a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047fa:	61bb      	str	r3, [r7, #24]
        break;
 80047fc:	e015      	b.n	800482a <UART_SetConfig+0x29e>
 80047fe:	bf00      	nop
 8004800:	efff69f3 	.word	0xefff69f3
 8004804:	40013800 	.word	0x40013800
 8004808:	40021000 	.word	0x40021000
 800480c:	40004400 	.word	0x40004400
 8004810:	40004800 	.word	0x40004800
 8004814:	40004c00 	.word	0x40004c00
 8004818:	40005000 	.word	0x40005000
 800481c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	77bb      	strb	r3, [r7, #30]
        break;
 8004828:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d075      	beq.n	800491c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	005a      	lsls	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	441a      	add	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	b29b      	uxth	r3, r3
 8004846:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b0f      	cmp	r3, #15
 800484c:	d916      	bls.n	800487c <UART_SetConfig+0x2f0>
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004854:	d212      	bcs.n	800487c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	b29b      	uxth	r3, r3
 800485a:	f023 030f 	bic.w	r3, r3, #15
 800485e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	085b      	lsrs	r3, r3, #1
 8004864:	b29b      	uxth	r3, r3
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	b29a      	uxth	r2, r3
 800486c:	89fb      	ldrh	r3, [r7, #14]
 800486e:	4313      	orrs	r3, r2
 8004870:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	89fa      	ldrh	r2, [r7, #14]
 8004878:	60da      	str	r2, [r3, #12]
 800487a:	e04f      	b.n	800491c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	77bb      	strb	r3, [r7, #30]
 8004880:	e04c      	b.n	800491c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004882:	7ffb      	ldrb	r3, [r7, #31]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d828      	bhi.n	80048da <UART_SetConfig+0x34e>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <UART_SetConfig+0x304>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048b5 	.word	0x080048b5
 8004894:	080048bd 	.word	0x080048bd
 8004898:	080048c5 	.word	0x080048c5
 800489c:	080048db 	.word	0x080048db
 80048a0:	080048cb 	.word	0x080048cb
 80048a4:	080048db 	.word	0x080048db
 80048a8:	080048db 	.word	0x080048db
 80048ac:	080048db 	.word	0x080048db
 80048b0:	080048d3 	.word	0x080048d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b4:	f7fe fbd4 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 80048b8:	61b8      	str	r0, [r7, #24]
        break;
 80048ba:	e013      	b.n	80048e4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048bc:	f7fe fbf2 	bl	80030a4 <HAL_RCC_GetPCLK2Freq>
 80048c0:	61b8      	str	r0, [r7, #24]
        break;
 80048c2:	e00f      	b.n	80048e4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c4:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <UART_SetConfig+0x3a8>)
 80048c6:	61bb      	str	r3, [r7, #24]
        break;
 80048c8:	e00c      	b.n	80048e4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ca:	f7fe fb53 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 80048ce:	61b8      	str	r0, [r7, #24]
        break;
 80048d0:	e008      	b.n	80048e4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d6:	61bb      	str	r3, [r7, #24]
        break;
 80048d8:	e004      	b.n	80048e4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	77bb      	strb	r3, [r7, #30]
        break;
 80048e2:	bf00      	nop
    }

    if (pclk != 0U)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d018      	beq.n	800491c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	085a      	lsrs	r2, r3, #1
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	441a      	add	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b0f      	cmp	r3, #15
 8004904:	d908      	bls.n	8004918 <UART_SetConfig+0x38c>
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490c:	d204      	bcs.n	8004918 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	e001      	b.n	800491c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004928:	7fbb      	ldrb	r3, [r7, #30]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	007a1200 	.word	0x007a1200

08004938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01a      	beq.n	8004a4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a36:	d10a      	bne.n	8004a4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	605a      	str	r2, [r3, #4]
  }
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a8c:	f7fb ff92 	bl	80009b4 <HAL_GetTick>
 8004a90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d10e      	bne.n	8004abe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f82d 	bl	8004b0e <UART_WaitOnFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e023      	b.n	8004b06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d10e      	bne.n	8004aea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f817 	bl	8004b0e <UART_WaitOnFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e00d      	b.n	8004b06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2220      	movs	r2, #32
 8004aee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b09c      	sub	sp, #112	; 0x70
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1e:	e0a5      	b.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	f000 80a1 	beq.w	8004c6c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2a:	f7fb ff43 	bl	80009b4 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d302      	bcc.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d13e      	bne.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b54:	667b      	str	r3, [r7, #100]	; 0x64
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e6      	bne.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3308      	adds	r3, #8
 8004b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	663b      	str	r3, [r7, #96]	; 0x60
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3308      	adds	r3, #8
 8004b90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b92:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e5      	bne.n	8004b72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e067      	b.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d04f      	beq.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bda:	d147      	bne.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	e853 3f00 	ldrex	r3, [r3]
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c04:	637b      	str	r3, [r7, #52]	; 0x34
 8004c06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c0c:	e841 2300 	strex	r3, r2, [r1]
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1e6      	bne.n	8004be6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	613b      	str	r3, [r7, #16]
   return(result);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c38:	623a      	str	r2, [r7, #32]
 8004c3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	69f9      	ldr	r1, [r7, #28]
 8004c3e:	6a3a      	ldr	r2, [r7, #32]
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e5      	bne.n	8004c18 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e010      	b.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69da      	ldr	r2, [r3, #28]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4013      	ands	r3, r2
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	f43f af4a 	beq.w	8004b20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3770      	adds	r7, #112	; 0x70
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <__libc_init_array>:
 8004c98:	b570      	push	{r4, r5, r6, lr}
 8004c9a:	4d0d      	ldr	r5, [pc, #52]	; (8004cd0 <__libc_init_array+0x38>)
 8004c9c:	4c0d      	ldr	r4, [pc, #52]	; (8004cd4 <__libc_init_array+0x3c>)
 8004c9e:	1b64      	subs	r4, r4, r5
 8004ca0:	10a4      	asrs	r4, r4, #2
 8004ca2:	2600      	movs	r6, #0
 8004ca4:	42a6      	cmp	r6, r4
 8004ca6:	d109      	bne.n	8004cbc <__libc_init_array+0x24>
 8004ca8:	4d0b      	ldr	r5, [pc, #44]	; (8004cd8 <__libc_init_array+0x40>)
 8004caa:	4c0c      	ldr	r4, [pc, #48]	; (8004cdc <__libc_init_array+0x44>)
 8004cac:	f000 f820 	bl	8004cf0 <_init>
 8004cb0:	1b64      	subs	r4, r4, r5
 8004cb2:	10a4      	asrs	r4, r4, #2
 8004cb4:	2600      	movs	r6, #0
 8004cb6:	42a6      	cmp	r6, r4
 8004cb8:	d105      	bne.n	8004cc6 <__libc_init_array+0x2e>
 8004cba:	bd70      	pop	{r4, r5, r6, pc}
 8004cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc0:	4798      	blx	r3
 8004cc2:	3601      	adds	r6, #1
 8004cc4:	e7ee      	b.n	8004ca4 <__libc_init_array+0xc>
 8004cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cca:	4798      	blx	r3
 8004ccc:	3601      	adds	r6, #1
 8004cce:	e7f2      	b.n	8004cb6 <__libc_init_array+0x1e>
 8004cd0:	08004d40 	.word	0x08004d40
 8004cd4:	08004d40 	.word	0x08004d40
 8004cd8:	08004d40 	.word	0x08004d40
 8004cdc:	08004d44 	.word	0x08004d44

08004ce0 <memset>:
 8004ce0:	4402      	add	r2, r0
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d100      	bne.n	8004cea <memset+0xa>
 8004ce8:	4770      	bx	lr
 8004cea:	f803 1b01 	strb.w	r1, [r3], #1
 8004cee:	e7f9      	b.n	8004ce4 <memset+0x4>

08004cf0 <_init>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr

08004cfc <_fini>:
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfe:	bf00      	nop
 8004d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d02:	bc08      	pop	{r3}
 8004d04:	469e      	mov	lr, r3
 8004d06:	4770      	bx	lr
